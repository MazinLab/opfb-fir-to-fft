-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_to_fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_0_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_TVALID : IN STD_LOGIC;
    input_0_TREADY : OUT STD_LOGIC;
    input_1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_TVALID : IN STD_LOGIC;
    input_1_TREADY : OUT STD_LOGIC;
    input_2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_TVALID : IN STD_LOGIC;
    input_2_TREADY : OUT STD_LOGIC;
    input_3_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_TVALID : IN STD_LOGIC;
    input_3_TREADY : OUT STD_LOGIC;
    input_4_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_4_TVALID : IN STD_LOGIC;
    input_4_TREADY : OUT STD_LOGIC;
    input_5_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_5_TVALID : IN STD_LOGIC;
    input_5_TREADY : OUT STD_LOGIC;
    input_6_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_6_TVALID : IN STD_LOGIC;
    input_6_TREADY : OUT STD_LOGIC;
    input_7_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_7_TVALID : IN STD_LOGIC;
    input_7_TREADY : OUT STD_LOGIC;
    input_8_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_8_TVALID : IN STD_LOGIC;
    input_8_TREADY : OUT STD_LOGIC;
    input_9_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_9_TVALID : IN STD_LOGIC;
    input_9_TREADY : OUT STD_LOGIC;
    input_10_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_10_TVALID : IN STD_LOGIC;
    input_10_TREADY : OUT STD_LOGIC;
    input_11_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_11_TVALID : IN STD_LOGIC;
    input_11_TREADY : OUT STD_LOGIC;
    input_12_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_12_TVALID : IN STD_LOGIC;
    input_12_TREADY : OUT STD_LOGIC;
    input_13_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_13_TVALID : IN STD_LOGIC;
    input_13_TREADY : OUT STD_LOGIC;
    input_14_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_14_TVALID : IN STD_LOGIC;
    input_14_TREADY : OUT STD_LOGIC;
    input_15_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_15_TVALID : IN STD_LOGIC;
    input_15_TREADY : OUT STD_LOGIC;
    input_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_3_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_4_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_5_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_6_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_7_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_8_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_9_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_10_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_11_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_12_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_13_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_14_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_15_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of fir_to_fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_to_fft,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.563000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=2736,HLS_SYN_LUT=850,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal cycle_V : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal bwrite : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal buffer_data_V_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_data_V_0_ce0 : STD_LOGIC;
    signal buffer_data_V_0_we0 : STD_LOGIC;
    signal buffer_data_V_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_data_V_0_ce1 : STD_LOGIC;
    signal buffer_data_V_0_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal buffer_data_V_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_data_V_1_ce0 : STD_LOGIC;
    signal buffer_data_V_1_we0 : STD_LOGIC;
    signal buffer_data_V_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_data_V_1_ce1 : STD_LOGIC;
    signal buffer_data_V_1_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal input_0_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal input_1_TDATA_blk_n : STD_LOGIC;
    signal input_2_TDATA_blk_n : STD_LOGIC;
    signal input_3_TDATA_blk_n : STD_LOGIC;
    signal input_4_TDATA_blk_n : STD_LOGIC;
    signal input_5_TDATA_blk_n : STD_LOGIC;
    signal input_6_TDATA_blk_n : STD_LOGIC;
    signal input_7_TDATA_blk_n : STD_LOGIC;
    signal input_8_TDATA_blk_n : STD_LOGIC;
    signal input_9_TDATA_blk_n : STD_LOGIC;
    signal input_10_TDATA_blk_n : STD_LOGIC;
    signal input_11_TDATA_blk_n : STD_LOGIC;
    signal input_12_TDATA_blk_n : STD_LOGIC;
    signal input_13_TDATA_blk_n : STD_LOGIC;
    signal input_14_TDATA_blk_n : STD_LOGIC;
    signal input_15_TDATA_blk_n : STD_LOGIC;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal input_0_data_V_tmp_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal regslice_forward_output_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_1_data_V_tmp_reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_data_V_tmp_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_data_V_tmp_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_4_data_V_tmp_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_5_data_V_tmp_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_6_data_V_tmp_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_7_data_V_tmp_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_8_data_V_tmp_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_9_data_V_tmp_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_10_data_V_tmp_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_11_data_V_tmp_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_12_data_V_tmp_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_13_data_V_tmp_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_14_data_V_tmp_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_15_data_V_tmp_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_630 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_s_reg_630_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ndx_fu_464_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ndx_reg_638 : STD_LOGIC_VECTOR (10 downto 0);
    signal bwrite_load_load_fu_475_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal bwrite_load_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal bwrite_load_reg_643_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bwrite_load_reg_643_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bwrite_load_reg_643_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_reg_663_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_reg_663_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_data_V_0_load_reg_668 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal buffer_data_V_1_load_reg_673 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal sext_ln67_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_fu_501_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_p_Val2_s : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln68_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_bwrite_load : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_1_fu_479_p17 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_fu_392_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_400_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln65_fu_408_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln65_fu_416_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln65_2_fu_422_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln65_1_fu_412_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1371_fu_388_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln65_fu_426_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln65_fu_432_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln65_fu_440_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_450_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1467_fu_446_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln65_3_fu_460_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln879_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_reverse_input_0_data_V_U_apdone_blk : STD_LOGIC;
    signal input_0_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_TVALID_int : STD_LOGIC;
    signal input_0_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_0_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_1_data_V_U_apdone_blk : STD_LOGIC;
    signal input_1_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_TVALID_int : STD_LOGIC;
    signal input_1_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_1_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_2_data_V_U_apdone_blk : STD_LOGIC;
    signal input_2_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_TVALID_int : STD_LOGIC;
    signal input_2_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_2_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_3_data_V_U_apdone_blk : STD_LOGIC;
    signal input_3_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_TVALID_int : STD_LOGIC;
    signal input_3_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_3_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_4_data_V_U_apdone_blk : STD_LOGIC;
    signal input_4_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_4_TVALID_int : STD_LOGIC;
    signal input_4_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_4_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_5_data_V_U_apdone_blk : STD_LOGIC;
    signal input_5_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_5_TVALID_int : STD_LOGIC;
    signal input_5_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_5_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_6_data_V_U_apdone_blk : STD_LOGIC;
    signal input_6_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_6_TVALID_int : STD_LOGIC;
    signal input_6_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_6_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_7_data_V_U_apdone_blk : STD_LOGIC;
    signal input_7_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_7_TVALID_int : STD_LOGIC;
    signal input_7_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_7_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_8_data_V_U_apdone_blk : STD_LOGIC;
    signal input_8_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_8_TVALID_int : STD_LOGIC;
    signal input_8_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_8_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_9_data_V_U_apdone_blk : STD_LOGIC;
    signal input_9_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_9_TVALID_int : STD_LOGIC;
    signal input_9_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_9_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_10_data_V_U_apdone_blk : STD_LOGIC;
    signal input_10_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_10_TVALID_int : STD_LOGIC;
    signal input_10_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_10_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_11_data_V_U_apdone_blk : STD_LOGIC;
    signal input_11_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_11_TVALID_int : STD_LOGIC;
    signal input_11_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_11_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_12_data_V_U_apdone_blk : STD_LOGIC;
    signal input_12_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_12_TVALID_int : STD_LOGIC;
    signal input_12_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_12_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_13_data_V_U_apdone_blk : STD_LOGIC;
    signal input_13_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_13_TVALID_int : STD_LOGIC;
    signal input_13_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_13_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_14_data_V_U_apdone_blk : STD_LOGIC;
    signal input_14_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_14_TVALID_int : STD_LOGIC;
    signal input_14_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_14_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_15_data_V_U_apdone_blk : STD_LOGIC;
    signal input_15_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_15_TVALID_int : STD_LOGIC;
    signal input_15_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_15_data_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_0_last_V_U_apdone_blk : STD_LOGIC;
    signal input_0_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_0_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_0_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_1_last_V_U_apdone_blk : STD_LOGIC;
    signal input_1_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_1_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_1_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_2_last_V_U_apdone_blk : STD_LOGIC;
    signal input_2_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_2_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_2_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_3_last_V_U_apdone_blk : STD_LOGIC;
    signal input_3_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_3_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_3_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_4_last_V_U_apdone_blk : STD_LOGIC;
    signal input_4_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_4_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_4_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_5_last_V_U_apdone_blk : STD_LOGIC;
    signal input_5_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_5_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_5_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_6_last_V_U_apdone_blk : STD_LOGIC;
    signal input_6_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_6_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_6_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_7_last_V_U_apdone_blk : STD_LOGIC;
    signal input_7_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_7_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_7_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_8_last_V_U_apdone_blk : STD_LOGIC;
    signal input_8_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_8_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_8_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_9_last_V_U_apdone_blk : STD_LOGIC;
    signal input_9_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_9_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_9_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_10_last_V_U_apdone_blk : STD_LOGIC;
    signal input_10_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_10_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_10_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_11_last_V_U_apdone_blk : STD_LOGIC;
    signal input_11_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_11_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_11_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_12_last_V_U_apdone_blk : STD_LOGIC;
    signal input_12_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_12_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_12_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_13_last_V_U_apdone_blk : STD_LOGIC;
    signal input_13_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_13_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_13_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_14_last_V_U_apdone_blk : STD_LOGIC;
    signal input_14_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_14_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_14_last_V_U_ack_in : STD_LOGIC;
    signal regslice_reverse_input_15_last_V_U_apdone_blk : STD_LOGIC;
    signal input_15_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_reverse_input_15_last_V_U_vld_out : STD_LOGIC;
    signal regslice_reverse_input_15_last_V_U_ack_in : STD_LOGIC;
    signal output_r_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal output_r_TVALID_int : STD_LOGIC;
    signal output_r_TREADY_int : STD_LOGIC;
    signal regslice_forward_output_data_V_U_vld_out : STD_LOGIC;
    signal regslice_forward_output_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_forward_output_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_output_last_V_U_vld_out : STD_LOGIC;

    component fir_to_fft_bufferbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component regslice_reverse IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_forward IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    buffer_data_V_0_U : component fir_to_fft_bufferbkb
    generic map (
        DataWidth => 512,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_data_V_0_address0,
        ce0 => buffer_data_V_0_ce0,
        we0 => buffer_data_V_0_we0,
        d0 => tmp_1_fu_479_p17,
        address1 => buffer_data_V_0_address1,
        ce1 => buffer_data_V_0_ce1,
        q1 => buffer_data_V_0_q1);

    buffer_data_V_1_U : component fir_to_fft_bufferbkb
    generic map (
        DataWidth => 512,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_data_V_1_address0,
        ce0 => buffer_data_V_1_ce0,
        we0 => buffer_data_V_1_we0,
        d0 => tmp_1_fu_479_p17,
        address1 => buffer_data_V_1_address1,
        ce1 => buffer_data_V_1_ce1,
        q1 => buffer_data_V_1_q1);

    regslice_reverse_input_0_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_0_TDATA,
        vld_in => input_0_TVALID,
        ack_in => regslice_reverse_input_0_data_V_U_ack_in,
        data_out => input_0_TDATA_int,
        vld_out => input_0_TVALID_int,
        ack_out => input_0_TREADY_int,
        apdone_blk => regslice_reverse_input_0_data_V_U_apdone_blk);

    regslice_reverse_input_1_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_1_TDATA,
        vld_in => input_1_TVALID,
        ack_in => regslice_reverse_input_1_data_V_U_ack_in,
        data_out => input_1_TDATA_int,
        vld_out => input_1_TVALID_int,
        ack_out => input_1_TREADY_int,
        apdone_blk => regslice_reverse_input_1_data_V_U_apdone_blk);

    regslice_reverse_input_2_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_2_TDATA,
        vld_in => input_2_TVALID,
        ack_in => regslice_reverse_input_2_data_V_U_ack_in,
        data_out => input_2_TDATA_int,
        vld_out => input_2_TVALID_int,
        ack_out => input_2_TREADY_int,
        apdone_blk => regslice_reverse_input_2_data_V_U_apdone_blk);

    regslice_reverse_input_3_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_3_TDATA,
        vld_in => input_3_TVALID,
        ack_in => regslice_reverse_input_3_data_V_U_ack_in,
        data_out => input_3_TDATA_int,
        vld_out => input_3_TVALID_int,
        ack_out => input_3_TREADY_int,
        apdone_blk => regslice_reverse_input_3_data_V_U_apdone_blk);

    regslice_reverse_input_4_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_4_TDATA,
        vld_in => input_4_TVALID,
        ack_in => regslice_reverse_input_4_data_V_U_ack_in,
        data_out => input_4_TDATA_int,
        vld_out => input_4_TVALID_int,
        ack_out => input_4_TREADY_int,
        apdone_blk => regslice_reverse_input_4_data_V_U_apdone_blk);

    regslice_reverse_input_5_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_5_TDATA,
        vld_in => input_5_TVALID,
        ack_in => regslice_reverse_input_5_data_V_U_ack_in,
        data_out => input_5_TDATA_int,
        vld_out => input_5_TVALID_int,
        ack_out => input_5_TREADY_int,
        apdone_blk => regslice_reverse_input_5_data_V_U_apdone_blk);

    regslice_reverse_input_6_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_6_TDATA,
        vld_in => input_6_TVALID,
        ack_in => regslice_reverse_input_6_data_V_U_ack_in,
        data_out => input_6_TDATA_int,
        vld_out => input_6_TVALID_int,
        ack_out => input_6_TREADY_int,
        apdone_blk => regslice_reverse_input_6_data_V_U_apdone_blk);

    regslice_reverse_input_7_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_7_TDATA,
        vld_in => input_7_TVALID,
        ack_in => regslice_reverse_input_7_data_V_U_ack_in,
        data_out => input_7_TDATA_int,
        vld_out => input_7_TVALID_int,
        ack_out => input_7_TREADY_int,
        apdone_blk => regslice_reverse_input_7_data_V_U_apdone_blk);

    regslice_reverse_input_8_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_8_TDATA,
        vld_in => input_8_TVALID,
        ack_in => regslice_reverse_input_8_data_V_U_ack_in,
        data_out => input_8_TDATA_int,
        vld_out => input_8_TVALID_int,
        ack_out => input_8_TREADY_int,
        apdone_blk => regslice_reverse_input_8_data_V_U_apdone_blk);

    regslice_reverse_input_9_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_9_TDATA,
        vld_in => input_9_TVALID,
        ack_in => regslice_reverse_input_9_data_V_U_ack_in,
        data_out => input_9_TDATA_int,
        vld_out => input_9_TVALID_int,
        ack_out => input_9_TREADY_int,
        apdone_blk => regslice_reverse_input_9_data_V_U_apdone_blk);

    regslice_reverse_input_10_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_10_TDATA,
        vld_in => input_10_TVALID,
        ack_in => regslice_reverse_input_10_data_V_U_ack_in,
        data_out => input_10_TDATA_int,
        vld_out => input_10_TVALID_int,
        ack_out => input_10_TREADY_int,
        apdone_blk => regslice_reverse_input_10_data_V_U_apdone_blk);

    regslice_reverse_input_11_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_11_TDATA,
        vld_in => input_11_TVALID,
        ack_in => regslice_reverse_input_11_data_V_U_ack_in,
        data_out => input_11_TDATA_int,
        vld_out => input_11_TVALID_int,
        ack_out => input_11_TREADY_int,
        apdone_blk => regslice_reverse_input_11_data_V_U_apdone_blk);

    regslice_reverse_input_12_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_12_TDATA,
        vld_in => input_12_TVALID,
        ack_in => regslice_reverse_input_12_data_V_U_ack_in,
        data_out => input_12_TDATA_int,
        vld_out => input_12_TVALID_int,
        ack_out => input_12_TREADY_int,
        apdone_blk => regslice_reverse_input_12_data_V_U_apdone_blk);

    regslice_reverse_input_13_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_13_TDATA,
        vld_in => input_13_TVALID,
        ack_in => regslice_reverse_input_13_data_V_U_ack_in,
        data_out => input_13_TDATA_int,
        vld_out => input_13_TVALID_int,
        ack_out => input_13_TREADY_int,
        apdone_blk => regslice_reverse_input_13_data_V_U_apdone_blk);

    regslice_reverse_input_14_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_14_TDATA,
        vld_in => input_14_TVALID,
        ack_in => regslice_reverse_input_14_data_V_U_ack_in,
        data_out => input_14_TDATA_int,
        vld_out => input_14_TVALID_int,
        ack_out => input_14_TREADY_int,
        apdone_blk => regslice_reverse_input_14_data_V_U_apdone_blk);

    regslice_reverse_input_15_data_V_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_15_TDATA,
        vld_in => input_15_TVALID,
        ack_in => regslice_reverse_input_15_data_V_U_ack_in,
        data_out => input_15_TDATA_int,
        vld_out => input_15_TVALID_int,
        ack_out => input_15_TREADY_int,
        apdone_blk => regslice_reverse_input_15_data_V_U_apdone_blk);

    regslice_reverse_input_0_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_0_TLAST,
        vld_in => input_0_TVALID,
        ack_in => regslice_reverse_input_0_last_V_U_ack_in,
        data_out => input_0_TLAST_int,
        vld_out => regslice_reverse_input_0_last_V_U_vld_out,
        ack_out => input_0_TREADY_int,
        apdone_blk => regslice_reverse_input_0_last_V_U_apdone_blk);

    regslice_reverse_input_1_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_1_TLAST,
        vld_in => input_1_TVALID,
        ack_in => regslice_reverse_input_1_last_V_U_ack_in,
        data_out => input_1_TLAST_int,
        vld_out => regslice_reverse_input_1_last_V_U_vld_out,
        ack_out => input_1_TREADY_int,
        apdone_blk => regslice_reverse_input_1_last_V_U_apdone_blk);

    regslice_reverse_input_2_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_2_TLAST,
        vld_in => input_2_TVALID,
        ack_in => regslice_reverse_input_2_last_V_U_ack_in,
        data_out => input_2_TLAST_int,
        vld_out => regslice_reverse_input_2_last_V_U_vld_out,
        ack_out => input_2_TREADY_int,
        apdone_blk => regslice_reverse_input_2_last_V_U_apdone_blk);

    regslice_reverse_input_3_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_3_TLAST,
        vld_in => input_3_TVALID,
        ack_in => regslice_reverse_input_3_last_V_U_ack_in,
        data_out => input_3_TLAST_int,
        vld_out => regslice_reverse_input_3_last_V_U_vld_out,
        ack_out => input_3_TREADY_int,
        apdone_blk => regslice_reverse_input_3_last_V_U_apdone_blk);

    regslice_reverse_input_4_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_4_TLAST,
        vld_in => input_4_TVALID,
        ack_in => regslice_reverse_input_4_last_V_U_ack_in,
        data_out => input_4_TLAST_int,
        vld_out => regslice_reverse_input_4_last_V_U_vld_out,
        ack_out => input_4_TREADY_int,
        apdone_blk => regslice_reverse_input_4_last_V_U_apdone_blk);

    regslice_reverse_input_5_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_5_TLAST,
        vld_in => input_5_TVALID,
        ack_in => regslice_reverse_input_5_last_V_U_ack_in,
        data_out => input_5_TLAST_int,
        vld_out => regslice_reverse_input_5_last_V_U_vld_out,
        ack_out => input_5_TREADY_int,
        apdone_blk => regslice_reverse_input_5_last_V_U_apdone_blk);

    regslice_reverse_input_6_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_6_TLAST,
        vld_in => input_6_TVALID,
        ack_in => regslice_reverse_input_6_last_V_U_ack_in,
        data_out => input_6_TLAST_int,
        vld_out => regslice_reverse_input_6_last_V_U_vld_out,
        ack_out => input_6_TREADY_int,
        apdone_blk => regslice_reverse_input_6_last_V_U_apdone_blk);

    regslice_reverse_input_7_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_7_TLAST,
        vld_in => input_7_TVALID,
        ack_in => regslice_reverse_input_7_last_V_U_ack_in,
        data_out => input_7_TLAST_int,
        vld_out => regslice_reverse_input_7_last_V_U_vld_out,
        ack_out => input_7_TREADY_int,
        apdone_blk => regslice_reverse_input_7_last_V_U_apdone_blk);

    regslice_reverse_input_8_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_8_TLAST,
        vld_in => input_8_TVALID,
        ack_in => regslice_reverse_input_8_last_V_U_ack_in,
        data_out => input_8_TLAST_int,
        vld_out => regslice_reverse_input_8_last_V_U_vld_out,
        ack_out => input_8_TREADY_int,
        apdone_blk => regslice_reverse_input_8_last_V_U_apdone_blk);

    regslice_reverse_input_9_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_9_TLAST,
        vld_in => input_9_TVALID,
        ack_in => regslice_reverse_input_9_last_V_U_ack_in,
        data_out => input_9_TLAST_int,
        vld_out => regslice_reverse_input_9_last_V_U_vld_out,
        ack_out => input_9_TREADY_int,
        apdone_blk => regslice_reverse_input_9_last_V_U_apdone_blk);

    regslice_reverse_input_10_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_10_TLAST,
        vld_in => input_10_TVALID,
        ack_in => regslice_reverse_input_10_last_V_U_ack_in,
        data_out => input_10_TLAST_int,
        vld_out => regslice_reverse_input_10_last_V_U_vld_out,
        ack_out => input_10_TREADY_int,
        apdone_blk => regslice_reverse_input_10_last_V_U_apdone_blk);

    regslice_reverse_input_11_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_11_TLAST,
        vld_in => input_11_TVALID,
        ack_in => regslice_reverse_input_11_last_V_U_ack_in,
        data_out => input_11_TLAST_int,
        vld_out => regslice_reverse_input_11_last_V_U_vld_out,
        ack_out => input_11_TREADY_int,
        apdone_blk => regslice_reverse_input_11_last_V_U_apdone_blk);

    regslice_reverse_input_12_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_12_TLAST,
        vld_in => input_12_TVALID,
        ack_in => regslice_reverse_input_12_last_V_U_ack_in,
        data_out => input_12_TLAST_int,
        vld_out => regslice_reverse_input_12_last_V_U_vld_out,
        ack_out => input_12_TREADY_int,
        apdone_blk => regslice_reverse_input_12_last_V_U_apdone_blk);

    regslice_reverse_input_13_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_13_TLAST,
        vld_in => input_13_TVALID,
        ack_in => regslice_reverse_input_13_last_V_U_ack_in,
        data_out => input_13_TLAST_int,
        vld_out => regslice_reverse_input_13_last_V_U_vld_out,
        ack_out => input_13_TREADY_int,
        apdone_blk => regslice_reverse_input_13_last_V_U_apdone_blk);

    regslice_reverse_input_14_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_14_TLAST,
        vld_in => input_14_TVALID,
        ack_in => regslice_reverse_input_14_last_V_U_ack_in,
        data_out => input_14_TLAST_int,
        vld_out => regslice_reverse_input_14_last_V_U_vld_out,
        ack_out => input_14_TREADY_int,
        apdone_blk => regslice_reverse_input_14_last_V_U_apdone_blk);

    regslice_reverse_input_15_last_V_U : component regslice_reverse
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_15_TLAST,
        vld_in => input_15_TVALID,
        ack_in => regslice_reverse_input_15_last_V_U_ack_in,
        data_out => input_15_TLAST_int,
        vld_out => regslice_reverse_input_15_last_V_U_vld_out,
        ack_out => input_15_TREADY_int,
        apdone_blk => regslice_reverse_input_15_last_V_U_apdone_blk);

    regslice_forward_output_data_V_U : component regslice_forward
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int,
        vld_in => output_r_TVALID_int,
        ack_in => output_r_TREADY_int,
        data_out => output_r_TDATA,
        vld_out => regslice_forward_output_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_data_V_U_apdone_blk);

    regslice_forward_output_last_V_U : component regslice_forward
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => or_ln75_reg_663_pp0_iter4_reg,
        vld_in => output_r_TVALID_int,
        ack_in => regslice_forward_output_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_forward_output_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((bwrite_load_reg_643_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer_data_V_0_load_reg_668 <= buffer_data_V_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((bwrite_load_reg_643_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer_data_V_1_load_reg_673 <= buffer_data_V_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln879_1_fu_527_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bwrite <= xor_ln68_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bwrite_load_reg_643 <= ap_sig_allocacmp_bwrite_load;
                input_0_data_V_tmp_reg_550 <= input_0_TDATA_int;
                input_10_data_V_tmp_reg_600 <= input_10_TDATA_int;
                input_11_data_V_tmp_reg_605 <= input_11_TDATA_int;
                input_12_data_V_tmp_reg_610 <= input_12_TDATA_int;
                input_13_data_V_tmp_reg_615 <= input_13_TDATA_int;
                input_14_data_V_tmp_reg_620 <= input_14_TDATA_int;
                input_15_data_V_tmp_reg_625 <= input_15_TDATA_int;
                input_1_data_V_tmp_reg_555 <= input_1_TDATA_int;
                input_2_data_V_tmp_reg_560 <= input_2_TDATA_int;
                input_3_data_V_tmp_reg_565 <= input_3_TDATA_int;
                input_4_data_V_tmp_reg_570 <= input_4_TDATA_int;
                input_5_data_V_tmp_reg_575 <= input_5_TDATA_int;
                input_6_data_V_tmp_reg_580 <= input_6_TDATA_int;
                input_7_data_V_tmp_reg_585 <= input_7_TDATA_int;
                input_8_data_V_tmp_reg_590 <= input_8_TDATA_int;
                input_9_data_V_tmp_reg_595 <= input_9_TDATA_int;
                ndx_reg_638 <= ndx_fu_464_p2;
                p_Val2_s_reg_630 <= ap_sig_allocacmp_p_Val2_s;
                p_Val2_s_reg_630_pp0_iter1_reg <= p_Val2_s_reg_630;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bwrite_load_reg_643_pp0_iter2_reg <= bwrite_load_reg_643;
                bwrite_load_reg_643_pp0_iter3_reg <= bwrite_load_reg_643_pp0_iter2_reg;
                bwrite_load_reg_643_pp0_iter4_reg <= bwrite_load_reg_643_pp0_iter3_reg;
                or_ln75_reg_663 <= or_ln75_fu_532_p2;
                or_ln75_reg_663_pp0_iter3_reg <= or_ln75_reg_663;
                or_ln75_reg_663_pp0_iter4_reg <= or_ln75_reg_663_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cycle_V <= add_ln700_fu_501_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln700_fu_501_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_630) + unsigned(ap_const_lv9_1));
    and_ln65_fu_440_p2 <= (sub_ln65_fu_426_p2 and select_ln65_fu_432_p3);
    and_ln_fu_400_p3 <= (tmp_fu_392_p3 & ap_const_lv7_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter6, regslice_forward_output_data_V_U_apdone_blk, input_0_TVALID_int, input_1_TVALID_int, input_2_TVALID_int, input_3_TVALID_int, input_4_TVALID_int, input_5_TVALID_int, input_6_TVALID_int, input_7_TVALID_int, input_8_TVALID_int, input_9_TVALID_int, input_10_TVALID_int, input_11_TVALID_int, input_12_TVALID_int, input_13_TVALID_int, input_14_TVALID_int, input_15_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((regslice_forward_output_data_V_U_apdone_blk = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and ((input_15_TVALID_int = ap_const_logic_0) or (input_14_TVALID_int = ap_const_logic_0) or (input_13_TVALID_int = ap_const_logic_0) or (input_12_TVALID_int = ap_const_logic_0) or (input_11_TVALID_int = ap_const_logic_0) or (input_10_TVALID_int = ap_const_logic_0) or (input_9_TVALID_int = ap_const_logic_0) or (input_8_TVALID_int = ap_const_logic_0) or (input_7_TVALID_int = ap_const_logic_0) or (input_6_TVALID_int = ap_const_logic_0) or (input_5_TVALID_int = ap_const_logic_0) or (input_4_TVALID_int = ap_const_logic_0) or (input_3_TVALID_int = ap_const_logic_0) or (input_2_TVALID_int = ap_const_logic_0) or (input_1_TVALID_int = ap_const_logic_0) or (input_0_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, regslice_forward_output_data_V_U_apdone_blk, input_0_TVALID_int, input_1_TVALID_int, input_2_TVALID_int, input_3_TVALID_int, input_4_TVALID_int, input_5_TVALID_int, input_6_TVALID_int, input_7_TVALID_int, input_8_TVALID_int, input_9_TVALID_int, input_10_TVALID_int, input_11_TVALID_int, input_12_TVALID_int, input_13_TVALID_int, input_14_TVALID_int, input_15_TVALID_int, output_r_TREADY_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((output_r_TREADY_int = ap_const_logic_0) or (regslice_forward_output_data_V_U_apdone_blk = ap_const_logic_1))) or ((output_r_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and ((input_15_TVALID_int = ap_const_logic_0) or (input_14_TVALID_int = ap_const_logic_0) or (input_13_TVALID_int = ap_const_logic_0) or (input_12_TVALID_int = ap_const_logic_0) or (input_11_TVALID_int = ap_const_logic_0) or (input_10_TVALID_int = ap_const_logic_0) or (input_9_TVALID_int = ap_const_logic_0) or (input_8_TVALID_int = ap_const_logic_0) or (input_7_TVALID_int = ap_const_logic_0) or (input_6_TVALID_int = ap_const_logic_0) or (input_5_TVALID_int = ap_const_logic_0) or (input_4_TVALID_int = ap_const_logic_0) or (input_3_TVALID_int = ap_const_logic_0) or (input_2_TVALID_int = ap_const_logic_0) or (input_1_TVALID_int = ap_const_logic_0) or (input_0_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, regslice_forward_output_data_V_U_apdone_blk, input_0_TVALID_int, input_1_TVALID_int, input_2_TVALID_int, input_3_TVALID_int, input_4_TVALID_int, input_5_TVALID_int, input_6_TVALID_int, input_7_TVALID_int, input_8_TVALID_int, input_9_TVALID_int, input_10_TVALID_int, input_11_TVALID_int, input_12_TVALID_int, input_13_TVALID_int, input_14_TVALID_int, input_15_TVALID_int, output_r_TREADY_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((output_r_TREADY_int = ap_const_logic_0) or (regslice_forward_output_data_V_U_apdone_blk = ap_const_logic_1))) or ((output_r_TREADY_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and ((input_15_TVALID_int = ap_const_logic_0) or (input_14_TVALID_int = ap_const_logic_0) or (input_13_TVALID_int = ap_const_logic_0) or (input_12_TVALID_int = ap_const_logic_0) or (input_11_TVALID_int = ap_const_logic_0) or (input_10_TVALID_int = ap_const_logic_0) or (input_9_TVALID_int = ap_const_logic_0) or (input_8_TVALID_int = ap_const_logic_0) or (input_7_TVALID_int = ap_const_logic_0) or (input_6_TVALID_int = ap_const_logic_0) or (input_5_TVALID_int = ap_const_logic_0) or (input_4_TVALID_int = ap_const_logic_0) or (input_3_TVALID_int = ap_const_logic_0) or (input_2_TVALID_int = ap_const_logic_0) or (input_1_TVALID_int = ap_const_logic_0) or (input_0_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(input_0_TVALID_int, input_1_TVALID_int, input_2_TVALID_int, input_3_TVALID_int, input_4_TVALID_int, input_5_TVALID_int, input_6_TVALID_int, input_7_TVALID_int, input_8_TVALID_int, input_9_TVALID_int, input_10_TVALID_int, input_11_TVALID_int, input_12_TVALID_int, input_13_TVALID_int, input_14_TVALID_int, input_15_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((input_15_TVALID_int = ap_const_logic_0) or (input_14_TVALID_int = ap_const_logic_0) or (input_13_TVALID_int = ap_const_logic_0) or (input_12_TVALID_int = ap_const_logic_0) or (input_11_TVALID_int = ap_const_logic_0) or (input_10_TVALID_int = ap_const_logic_0) or (input_9_TVALID_int = ap_const_logic_0) or (input_8_TVALID_int = ap_const_logic_0) or (input_7_TVALID_int = ap_const_logic_0) or (input_6_TVALID_int = ap_const_logic_0) or (input_5_TVALID_int = ap_const_logic_0) or (input_4_TVALID_int = ap_const_logic_0) or (input_3_TVALID_int = ap_const_logic_0) or (input_2_TVALID_int = ap_const_logic_0) or (input_1_TVALID_int = ap_const_logic_0) or (input_0_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(regslice_forward_output_data_V_U_apdone_blk)
    begin
                ap_block_state7_pp0_stage0_iter6 <= (regslice_forward_output_data_V_U_apdone_blk = ap_const_logic_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_bwrite_load_assign_proc : process(bwrite, ap_block_pp0_stage0, icmp_ln879_1_fu_527_p2, ap_enable_reg_pp0_iter2, xor_ln68_fu_517_p2)
    begin
        if (((icmp_ln879_1_fu_527_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_bwrite_load <= xor_ln68_fu_517_p2;
        else 
            ap_sig_allocacmp_bwrite_load <= bwrite;
        end if; 
    end process;


    ap_sig_allocacmp_p_Val2_s_assign_proc : process(cycle_V, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln700_fu_501_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_p_Val2_s <= add_ln700_fu_501_p2;
        else 
            ap_sig_allocacmp_p_Val2_s <= cycle_V;
        end if; 
    end process;

    buffer_data_V_0_address0 <= sext_ln67_fu_470_p1(9 - 1 downto 0);
    buffer_data_V_0_address1 <= zext_ln544_fu_512_p1(9 - 1 downto 0);

    buffer_data_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_data_V_0_ce0 <= ap_const_logic_1;
        else 
            buffer_data_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_data_V_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            buffer_data_V_0_ce1 <= ap_const_logic_1;
        else 
            buffer_data_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_data_V_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, bwrite_load_load_fu_475_p1, ap_enable_reg_pp0_iter1)
    begin
        if (((bwrite_load_load_fu_475_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_data_V_0_we0 <= ap_const_logic_1;
        else 
            buffer_data_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_data_V_1_address0 <= sext_ln67_fu_470_p1(9 - 1 downto 0);
    buffer_data_V_1_address1 <= zext_ln544_fu_512_p1(9 - 1 downto 0);

    buffer_data_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_data_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer_data_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_data_V_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            buffer_data_V_1_ce1 <= ap_const_logic_1;
        else 
            buffer_data_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_data_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, bwrite_load_load_fu_475_p1, ap_enable_reg_pp0_iter1)
    begin
        if (((bwrite_load_load_fu_475_p1 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_data_V_1_we0 <= ap_const_logic_1;
        else 
            buffer_data_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bwrite_load_load_fu_475_p1 <= ap_sig_allocacmp_bwrite_load;
    icmp_ln879_1_fu_527_p2 <= "1" when (p_Val2_s_reg_630_pp0_iter1_reg = ap_const_lv9_1FF) else "0";
    icmp_ln879_fu_522_p2 <= "1" when (p_Val2_s_reg_630_pp0_iter1_reg = ap_const_lv9_FF) else "0";

    input_0_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_0_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_0_TDATA_blk_n <= input_0_TVALID_int;
        else 
            input_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_0_TREADY_assign_proc : process(input_0_TVALID, regslice_reverse_input_0_data_V_U_ack_in)
    begin
        if (((input_0_TVALID = ap_const_logic_1) and (regslice_reverse_input_0_data_V_U_ack_in = ap_const_logic_1))) then 
            input_0_TREADY <= ap_const_logic_1;
        else 
            input_0_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_0_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_TREADY_int <= ap_const_logic_1;
        else 
            input_0_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_10_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_10_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_10_TDATA_blk_n <= input_10_TVALID_int;
        else 
            input_10_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_10_TREADY_assign_proc : process(input_10_TVALID, regslice_reverse_input_10_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_10_data_V_U_ack_in = ap_const_logic_1) and (input_10_TVALID = ap_const_logic_1))) then 
            input_10_TREADY <= ap_const_logic_1;
        else 
            input_10_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_10_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_10_TREADY_int <= ap_const_logic_1;
        else 
            input_10_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_11_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_11_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_11_TDATA_blk_n <= input_11_TVALID_int;
        else 
            input_11_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_11_TREADY_assign_proc : process(input_11_TVALID, regslice_reverse_input_11_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_11_data_V_U_ack_in = ap_const_logic_1) and (input_11_TVALID = ap_const_logic_1))) then 
            input_11_TREADY <= ap_const_logic_1;
        else 
            input_11_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_11_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_11_TREADY_int <= ap_const_logic_1;
        else 
            input_11_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_12_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_12_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_12_TDATA_blk_n <= input_12_TVALID_int;
        else 
            input_12_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_12_TREADY_assign_proc : process(input_12_TVALID, regslice_reverse_input_12_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_12_data_V_U_ack_in = ap_const_logic_1) and (input_12_TVALID = ap_const_logic_1))) then 
            input_12_TREADY <= ap_const_logic_1;
        else 
            input_12_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_12_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_12_TREADY_int <= ap_const_logic_1;
        else 
            input_12_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_13_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_13_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_13_TDATA_blk_n <= input_13_TVALID_int;
        else 
            input_13_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_13_TREADY_assign_proc : process(input_13_TVALID, regslice_reverse_input_13_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_13_data_V_U_ack_in = ap_const_logic_1) and (input_13_TVALID = ap_const_logic_1))) then 
            input_13_TREADY <= ap_const_logic_1;
        else 
            input_13_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_13_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_13_TREADY_int <= ap_const_logic_1;
        else 
            input_13_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_14_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_14_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_14_TDATA_blk_n <= input_14_TVALID_int;
        else 
            input_14_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_14_TREADY_assign_proc : process(input_14_TVALID, regslice_reverse_input_14_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_14_data_V_U_ack_in = ap_const_logic_1) and (input_14_TVALID = ap_const_logic_1))) then 
            input_14_TREADY <= ap_const_logic_1;
        else 
            input_14_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_14_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_14_TREADY_int <= ap_const_logic_1;
        else 
            input_14_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_15_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_15_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_15_TDATA_blk_n <= input_15_TVALID_int;
        else 
            input_15_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_15_TREADY_assign_proc : process(input_15_TVALID, regslice_reverse_input_15_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_15_data_V_U_ack_in = ap_const_logic_1) and (input_15_TVALID = ap_const_logic_1))) then 
            input_15_TREADY <= ap_const_logic_1;
        else 
            input_15_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_15_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_15_TREADY_int <= ap_const_logic_1;
        else 
            input_15_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_1_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_1_TDATA_blk_n <= input_1_TVALID_int;
        else 
            input_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_1_TREADY_assign_proc : process(input_1_TVALID, regslice_reverse_input_1_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_1_data_V_U_ack_in = ap_const_logic_1) and (input_1_TVALID = ap_const_logic_1))) then 
            input_1_TREADY <= ap_const_logic_1;
        else 
            input_1_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_1_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_TREADY_int <= ap_const_logic_1;
        else 
            input_1_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_2_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_2_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_2_TDATA_blk_n <= input_2_TVALID_int;
        else 
            input_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_2_TREADY_assign_proc : process(input_2_TVALID, regslice_reverse_input_2_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_2_data_V_U_ack_in = ap_const_logic_1) and (input_2_TVALID = ap_const_logic_1))) then 
            input_2_TREADY <= ap_const_logic_1;
        else 
            input_2_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_2_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_TREADY_int <= ap_const_logic_1;
        else 
            input_2_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_3_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_3_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_3_TDATA_blk_n <= input_3_TVALID_int;
        else 
            input_3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_3_TREADY_assign_proc : process(input_3_TVALID, regslice_reverse_input_3_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_3_data_V_U_ack_in = ap_const_logic_1) and (input_3_TVALID = ap_const_logic_1))) then 
            input_3_TREADY <= ap_const_logic_1;
        else 
            input_3_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_3_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_3_TREADY_int <= ap_const_logic_1;
        else 
            input_3_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_4_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_4_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_4_TDATA_blk_n <= input_4_TVALID_int;
        else 
            input_4_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_4_TREADY_assign_proc : process(input_4_TVALID, regslice_reverse_input_4_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_4_data_V_U_ack_in = ap_const_logic_1) and (input_4_TVALID = ap_const_logic_1))) then 
            input_4_TREADY <= ap_const_logic_1;
        else 
            input_4_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_4_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_4_TREADY_int <= ap_const_logic_1;
        else 
            input_4_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_5_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_5_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_5_TDATA_blk_n <= input_5_TVALID_int;
        else 
            input_5_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_5_TREADY_assign_proc : process(input_5_TVALID, regslice_reverse_input_5_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_5_data_V_U_ack_in = ap_const_logic_1) and (input_5_TVALID = ap_const_logic_1))) then 
            input_5_TREADY <= ap_const_logic_1;
        else 
            input_5_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_5_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_5_TREADY_int <= ap_const_logic_1;
        else 
            input_5_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_6_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_6_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_6_TDATA_blk_n <= input_6_TVALID_int;
        else 
            input_6_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_6_TREADY_assign_proc : process(input_6_TVALID, regslice_reverse_input_6_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_6_data_V_U_ack_in = ap_const_logic_1) and (input_6_TVALID = ap_const_logic_1))) then 
            input_6_TREADY <= ap_const_logic_1;
        else 
            input_6_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_6_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_6_TREADY_int <= ap_const_logic_1;
        else 
            input_6_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_7_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_7_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_7_TDATA_blk_n <= input_7_TVALID_int;
        else 
            input_7_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_7_TREADY_assign_proc : process(input_7_TVALID, regslice_reverse_input_7_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_7_data_V_U_ack_in = ap_const_logic_1) and (input_7_TVALID = ap_const_logic_1))) then 
            input_7_TREADY <= ap_const_logic_1;
        else 
            input_7_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_7_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_7_TREADY_int <= ap_const_logic_1;
        else 
            input_7_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_8_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_8_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_8_TDATA_blk_n <= input_8_TVALID_int;
        else 
            input_8_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_8_TREADY_assign_proc : process(input_8_TVALID, regslice_reverse_input_8_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_8_data_V_U_ack_in = ap_const_logic_1) and (input_8_TVALID = ap_const_logic_1))) then 
            input_8_TREADY <= ap_const_logic_1;
        else 
            input_8_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_8_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_8_TREADY_int <= ap_const_logic_1;
        else 
            input_8_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    input_9_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_9_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_9_TDATA_blk_n <= input_9_TVALID_int;
        else 
            input_9_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_9_TREADY_assign_proc : process(input_9_TVALID, regslice_reverse_input_9_data_V_U_ack_in)
    begin
        if (((regslice_reverse_input_9_data_V_U_ack_in = ap_const_logic_1) and (input_9_TVALID = ap_const_logic_1))) then 
            input_9_TREADY <= ap_const_logic_1;
        else 
            input_9_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_9_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_9_TREADY_int <= ap_const_logic_1;
        else 
            input_9_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    ndx_fu_464_p2 <= std_logic_vector(signed(sext_ln1467_fu_446_p1) + signed(zext_ln65_3_fu_460_p1));
    or_ln75_fu_532_p2 <= (icmp_ln879_fu_522_p2 or icmp_ln879_1_fu_527_p2);

    output_r_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, output_r_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TDATA_int <= 
        buffer_data_V_0_load_reg_668 when (bwrite_load_reg_643_pp0_iter4_reg(0) = '1') else 
        buffer_data_V_1_load_reg_673;
    output_r_TVALID <= regslice_forward_output_data_V_U_vld_out;

    output_r_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_TVALID_int <= ap_const_logic_1;
        else 
            output_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln65_fu_432_p3 <= 
        ap_const_lv10_3FF when (trunc_ln1371_fu_388_p1(0) = '1') else 
        ap_const_lv10_0;
        sext_ln1467_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln65_fu_440_p2),11));

        sext_ln67_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ndx_reg_638),64));

    sub_ln65_fu_426_p2 <= std_logic_vector(unsigned(zext_ln65_2_fu_422_p1) - unsigned(zext_ln65_1_fu_412_p1));
    tmp_1_fu_479_p17 <= (((((((((((((((input_15_data_V_tmp_reg_625 & input_14_data_V_tmp_reg_620) & input_13_data_V_tmp_reg_615) & input_12_data_V_tmp_reg_610) & input_11_data_V_tmp_reg_605) & input_10_data_V_tmp_reg_600) & input_9_data_V_tmp_reg_595) & input_8_data_V_tmp_reg_590) & input_7_data_V_tmp_reg_585) & input_6_data_V_tmp_reg_580) & input_5_data_V_tmp_reg_575) & input_4_data_V_tmp_reg_570) & input_3_data_V_tmp_reg_565) & input_2_data_V_tmp_reg_560) & input_1_data_V_tmp_reg_555) & input_0_data_V_tmp_reg_550);
    tmp_2_fu_450_p4 <= ap_sig_allocacmp_p_Val2_s(8 downto 1);
    tmp_fu_392_p3 <= ap_sig_allocacmp_p_Val2_s(8 downto 8);
    trunc_ln1371_fu_388_p1 <= ap_sig_allocacmp_p_Val2_s(1 - 1 downto 0);
    xor_ln65_fu_416_p2 <= (zext_ln65_fu_408_p1 xor ap_const_lv9_180);
    xor_ln68_fu_517_p2 <= (bwrite_load_reg_643 xor ap_const_lv1_1);
    zext_ln544_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_630_pp0_iter1_reg),64));
    zext_ln65_1_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_400_p3),10));
    zext_ln65_2_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln65_fu_416_p2),10));
    zext_ln65_3_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_450_p4),11));
    zext_ln65_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_400_p3),9));
end behav;
