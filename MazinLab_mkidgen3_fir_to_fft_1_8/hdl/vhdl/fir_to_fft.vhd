-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_to_fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_0_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_TVALID : IN STD_LOGIC;
    input_0_TREADY : OUT STD_LOGIC;
    input_1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_TVALID : IN STD_LOGIC;
    input_1_TREADY : OUT STD_LOGIC;
    input_2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_TVALID : IN STD_LOGIC;
    input_2_TREADY : OUT STD_LOGIC;
    input_3_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_TVALID : IN STD_LOGIC;
    input_3_TREADY : OUT STD_LOGIC;
    input_4_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_4_TVALID : IN STD_LOGIC;
    input_4_TREADY : OUT STD_LOGIC;
    input_5_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_5_TVALID : IN STD_LOGIC;
    input_5_TREADY : OUT STD_LOGIC;
    input_6_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_6_TVALID : IN STD_LOGIC;
    input_6_TREADY : OUT STD_LOGIC;
    input_7_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_7_TVALID : IN STD_LOGIC;
    input_7_TREADY : OUT STD_LOGIC;
    input_8_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_8_TVALID : IN STD_LOGIC;
    input_8_TREADY : OUT STD_LOGIC;
    input_9_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_9_TVALID : IN STD_LOGIC;
    input_9_TREADY : OUT STD_LOGIC;
    input_10_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_10_TVALID : IN STD_LOGIC;
    input_10_TREADY : OUT STD_LOGIC;
    input_11_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_11_TVALID : IN STD_LOGIC;
    input_11_TREADY : OUT STD_LOGIC;
    input_12_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_12_TVALID : IN STD_LOGIC;
    input_12_TREADY : OUT STD_LOGIC;
    input_13_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_13_TVALID : IN STD_LOGIC;
    input_13_TREADY : OUT STD_LOGIC;
    input_14_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_14_TVALID : IN STD_LOGIC;
    input_14_TREADY : OUT STD_LOGIC;
    input_15_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_15_TVALID : IN STD_LOGIC;
    input_15_TREADY : OUT STD_LOGIC;
    input_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_3_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_4_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_5_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_6_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_7_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_8_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_9_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_10_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_11_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_12_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_13_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_14_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_15_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_0_TVALID : OUT STD_LOGIC;
    output_0_TREADY : IN STD_LOGIC;
    output_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_1_TVALID : OUT STD_LOGIC;
    output_1_TREADY : IN STD_LOGIC;
    output_2_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_2_TVALID : OUT STD_LOGIC;
    output_2_TREADY : IN STD_LOGIC;
    output_3_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_3_TVALID : OUT STD_LOGIC;
    output_3_TREADY : IN STD_LOGIC;
    output_4_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_4_TVALID : OUT STD_LOGIC;
    output_4_TREADY : IN STD_LOGIC;
    output_5_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_5_TVALID : OUT STD_LOGIC;
    output_5_TREADY : IN STD_LOGIC;
    output_6_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_6_TVALID : OUT STD_LOGIC;
    output_6_TREADY : IN STD_LOGIC;
    output_7_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_7_TVALID : OUT STD_LOGIC;
    output_7_TREADY : IN STD_LOGIC;
    output_8_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_8_TVALID : OUT STD_LOGIC;
    output_8_TREADY : IN STD_LOGIC;
    output_9_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_9_TVALID : OUT STD_LOGIC;
    output_9_TREADY : IN STD_LOGIC;
    output_10_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_10_TVALID : OUT STD_LOGIC;
    output_10_TREADY : IN STD_LOGIC;
    output_11_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_11_TVALID : OUT STD_LOGIC;
    output_11_TREADY : IN STD_LOGIC;
    output_12_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_12_TVALID : OUT STD_LOGIC;
    output_12_TREADY : IN STD_LOGIC;
    output_13_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_13_TVALID : OUT STD_LOGIC;
    output_13_TREADY : IN STD_LOGIC;
    output_14_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_14_TVALID : OUT STD_LOGIC;
    output_14_TREADY : IN STD_LOGIC;
    output_15_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_15_TVALID : OUT STD_LOGIC;
    output_15_TREADY : IN STD_LOGIC;
    output_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_2_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_3_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_4_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_5_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_6_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_7_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_8_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_9_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_10_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_11_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_12_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_13_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_14_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_15_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of fir_to_fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_to_fft,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.563000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=2857,HLS_SYN_LUT=1060,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_20 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_const_lv11_3F : STD_LOGIC_VECTOR (10 downto 0) := "00000111111";
    constant ap_const_lv11_40 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_const_lv11_5F : STD_LOGIC_VECTOR (10 downto 0) := "00001011111";
    constant ap_const_lv11_60 : STD_LOGIC_VECTOR (10 downto 0) := "00001100000";
    constant ap_const_lv11_7F : STD_LOGIC_VECTOR (10 downto 0) := "00001111111";
    constant ap_const_lv11_80 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_const_lv11_9F : STD_LOGIC_VECTOR (10 downto 0) := "00010011111";
    constant ap_const_lv11_A0 : STD_LOGIC_VECTOR (10 downto 0) := "00010100000";
    constant ap_const_lv11_BF : STD_LOGIC_VECTOR (10 downto 0) := "00010111111";
    constant ap_const_lv11_C0 : STD_LOGIC_VECTOR (10 downto 0) := "00011000000";
    constant ap_const_lv11_DF : STD_LOGIC_VECTOR (10 downto 0) := "00011011111";
    constant ap_const_lv11_E0 : STD_LOGIC_VECTOR (10 downto 0) := "00011100000";
    constant ap_const_lv11_FF : STD_LOGIC_VECTOR (10 downto 0) := "00011111111";
    constant ap_const_lv11_100 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_const_lv11_11F : STD_LOGIC_VECTOR (10 downto 0) := "00100011111";
    constant ap_const_lv11_120 : STD_LOGIC_VECTOR (10 downto 0) := "00100100000";
    constant ap_const_lv11_13F : STD_LOGIC_VECTOR (10 downto 0) := "00100111111";
    constant ap_const_lv11_140 : STD_LOGIC_VECTOR (10 downto 0) := "00101000000";
    constant ap_const_lv11_15F : STD_LOGIC_VECTOR (10 downto 0) := "00101011111";
    constant ap_const_lv11_160 : STD_LOGIC_VECTOR (10 downto 0) := "00101100000";
    constant ap_const_lv11_17F : STD_LOGIC_VECTOR (10 downto 0) := "00101111111";
    constant ap_const_lv11_180 : STD_LOGIC_VECTOR (10 downto 0) := "00110000000";
    constant ap_const_lv11_19F : STD_LOGIC_VECTOR (10 downto 0) := "00110011111";
    constant ap_const_lv11_1A0 : STD_LOGIC_VECTOR (10 downto 0) := "00110100000";
    constant ap_const_lv11_1BF : STD_LOGIC_VECTOR (10 downto 0) := "00110111111";
    constant ap_const_lv11_1C0 : STD_LOGIC_VECTOR (10 downto 0) := "00111000000";
    constant ap_const_lv11_1DF : STD_LOGIC_VECTOR (10 downto 0) := "00111011111";
    constant ap_const_lv11_1E0 : STD_LOGIC_VECTOR (10 downto 0) := "00111100000";
    constant ap_const_lv11_1FF : STD_LOGIC_VECTOR (10 downto 0) := "00111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal cycle_V : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal bwrite : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal cycleout_V : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal buffer_data_V_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_data_V_0_ce0 : STD_LOGIC;
    signal buffer_data_V_0_we0 : STD_LOGIC;
    signal buffer_data_V_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_data_V_0_ce1 : STD_LOGIC;
    signal buffer_data_V_0_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal buffer_data_V_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_data_V_1_ce0 : STD_LOGIC;
    signal buffer_data_V_1_we0 : STD_LOGIC;
    signal buffer_data_V_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_data_V_1_ce1 : STD_LOGIC;
    signal buffer_data_V_1_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal primed : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal input_0_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal input_1_TDATA_blk_n : STD_LOGIC;
    signal input_2_TDATA_blk_n : STD_LOGIC;
    signal input_3_TDATA_blk_n : STD_LOGIC;
    signal input_4_TDATA_blk_n : STD_LOGIC;
    signal input_5_TDATA_blk_n : STD_LOGIC;
    signal input_6_TDATA_blk_n : STD_LOGIC;
    signal input_7_TDATA_blk_n : STD_LOGIC;
    signal input_8_TDATA_blk_n : STD_LOGIC;
    signal input_9_TDATA_blk_n : STD_LOGIC;
    signal input_10_TDATA_blk_n : STD_LOGIC;
    signal input_11_TDATA_blk_n : STD_LOGIC;
    signal input_12_TDATA_blk_n : STD_LOGIC;
    signal input_13_TDATA_blk_n : STD_LOGIC;
    signal input_14_TDATA_blk_n : STD_LOGIC;
    signal input_15_TDATA_blk_n : STD_LOGIC;
    signal output_0_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal output_1_TDATA_blk_n : STD_LOGIC;
    signal output_2_TDATA_blk_n : STD_LOGIC;
    signal output_3_TDATA_blk_n : STD_LOGIC;
    signal output_4_TDATA_blk_n : STD_LOGIC;
    signal output_5_TDATA_blk_n : STD_LOGIC;
    signal output_6_TDATA_blk_n : STD_LOGIC;
    signal output_7_TDATA_blk_n : STD_LOGIC;
    signal output_8_TDATA_blk_n : STD_LOGIC;
    signal output_9_TDATA_blk_n : STD_LOGIC;
    signal output_10_TDATA_blk_n : STD_LOGIC;
    signal output_11_TDATA_blk_n : STD_LOGIC;
    signal output_12_TDATA_blk_n : STD_LOGIC;
    signal output_13_TDATA_blk_n : STD_LOGIC;
    signal output_14_TDATA_blk_n : STD_LOGIC;
    signal output_15_TDATA_blk_n : STD_LOGIC;
    signal input_0_data_V_tmp_reg_1027 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_1_data_V_tmp_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_data_V_tmp_reg_1037 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_data_V_tmp_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_4_data_V_tmp_reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_5_data_V_tmp_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_6_data_V_tmp_reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_7_data_V_tmp_reg_1062 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_8_data_V_tmp_reg_1067 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_9_data_V_tmp_reg_1072 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_10_data_V_tmp_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_11_data_V_tmp_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_12_data_V_tmp_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_13_data_V_tmp_reg_1092 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_14_data_V_tmp_reg_1097 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_15_data_V_tmp_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal ndx_fu_736_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ndx_reg_1107 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln879_1_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_1112 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_1112_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_reg_1116_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_reg_1116_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_reg_1116_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_reg_1116_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal primed_load_reg_1136 : STD_LOGIC_VECTOR (0 downto 0);
    signal primed_load_reg_1136_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bwrite_load_load_fu_793_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal bwrite_load_reg_1140 : STD_LOGIC_VECTOR (0 downto 0);
    signal bwrite_load_reg_1140_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bwrite_load_reg_1140_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bwrite_load_reg_1140_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_data_V_0_load_reg_1156 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal buffer_data_V_1_load_reg_1161 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal sext_ln63_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_1_fu_776_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln64_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_bwrite_load : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_840_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln73_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_797_p17 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_1_fu_664_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_672_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln62_fu_680_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln62_fu_688_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln62_2_fu_694_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln62_1_fu_684_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1371_fu_660_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln62_fu_698_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln62_fu_704_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln62_fu_712_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_722_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1467_fu_718_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_3_fu_732_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln879_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln63_fu_852_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component fir_to_fft_bufferbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;



begin
    buffer_data_V_0_U : component fir_to_fft_bufferbkb
    generic map (
        DataWidth => 512,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_data_V_0_address0,
        ce0 => buffer_data_V_0_ce0,
        we0 => buffer_data_V_0_we0,
        d0 => tmp_fu_797_p17,
        address1 => buffer_data_V_0_address1,
        ce1 => buffer_data_V_0_ce1,
        q1 => buffer_data_V_0_q1);

    buffer_data_V_1_U : component fir_to_fft_bufferbkb
    generic map (
        DataWidth => 512,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_data_V_1_address0,
        ce0 => buffer_data_V_1_ce0,
        we0 => buffer_data_V_1_we0,
        d0 => tmp_fu_797_p17,
        address1 => buffer_data_V_1_address1,
        ce1 => buffer_data_V_1_ce1,
        q1 => buffer_data_V_1_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((bwrite_load_reg_1140_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                buffer_data_V_0_load_reg_1156 <= buffer_data_V_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (bwrite_load_reg_1140_pp0_iter3_reg = ap_const_lv1_0))) then
                buffer_data_V_1_load_reg_1161 <= buffer_data_V_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln879_1_reg_1112_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                bwrite <= xor_ln64_fu_829_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bwrite_load_reg_1140 <= ap_sig_allocacmp_bwrite_load;
                icmp_ln879_1_reg_1112 <= icmp_ln879_1_fu_748_p2;
                icmp_ln879_1_reg_1112_pp0_iter1_reg <= icmp_ln879_1_reg_1112;
                input_0_data_V_tmp_reg_1027 <= input_0_TDATA;
                input_10_data_V_tmp_reg_1077 <= input_10_TDATA;
                input_11_data_V_tmp_reg_1082 <= input_11_TDATA;
                input_12_data_V_tmp_reg_1087 <= input_12_TDATA;
                input_13_data_V_tmp_reg_1092 <= input_13_TDATA;
                input_14_data_V_tmp_reg_1097 <= input_14_TDATA;
                input_15_data_V_tmp_reg_1102 <= input_15_TDATA;
                input_1_data_V_tmp_reg_1032 <= input_1_TDATA;
                input_2_data_V_tmp_reg_1037 <= input_2_TDATA;
                input_3_data_V_tmp_reg_1042 <= input_3_TDATA;
                input_4_data_V_tmp_reg_1047 <= input_4_TDATA;
                input_5_data_V_tmp_reg_1052 <= input_5_TDATA;
                input_6_data_V_tmp_reg_1057 <= input_6_TDATA;
                input_7_data_V_tmp_reg_1062 <= input_7_TDATA;
                input_8_data_V_tmp_reg_1067 <= input_8_TDATA;
                input_9_data_V_tmp_reg_1072 <= input_9_TDATA;
                ndx_reg_1107 <= ndx_fu_736_p2;
                or_ln68_reg_1116 <= or_ln68_fu_754_p2;
                or_ln68_reg_1116_pp0_iter1_reg <= or_ln68_reg_1116;
                primed_load_reg_1136 <= primed;
                primed_load_reg_1136_pp0_iter1_reg <= primed_load_reg_1136;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bwrite_load_reg_1140_pp0_iter2_reg <= bwrite_load_reg_1140;
                bwrite_load_reg_1140_pp0_iter3_reg <= bwrite_load_reg_1140_pp0_iter2_reg;
                bwrite_load_reg_1140_pp0_iter4_reg <= bwrite_load_reg_1140_pp0_iter3_reg;
                or_ln68_reg_1116_pp0_iter2_reg <= or_ln68_reg_1116_pp0_iter1_reg;
                or_ln68_reg_1116_pp0_iter3_reg <= or_ln68_reg_1116_pp0_iter2_reg;
                or_ln68_reg_1116_pp0_iter4_reg <= or_ln68_reg_1116_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cycle_V <= add_ln700_1_fu_776_p2;
                primed <= or_ln73_fu_764_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((primed_load_reg_1136_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                cycleout_V <= add_ln700_fu_840_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln700_1_fu_776_p2 <= std_logic_vector(unsigned(cycle_V) + unsigned(ap_const_lv9_1));
    add_ln700_fu_840_p2 <= std_logic_vector(unsigned(cycleout_V) + unsigned(ap_const_lv9_1));
    and_ln62_fu_712_p2 <= (sub_ln62_fu_698_p2 and select_ln62_fu_704_p3);
    and_ln_fu_672_p3 <= (tmp_1_fu_664_p3 & ap_const_lv7_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(input_0_TVALID, input_1_TVALID, input_2_TVALID, input_3_TVALID, input_4_TVALID, input_5_TVALID, input_6_TVALID, input_7_TVALID, input_8_TVALID, input_9_TVALID, input_10_TVALID, input_11_TVALID, input_12_TVALID, input_13_TVALID, input_14_TVALID, input_15_TVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_1 = ap_const_logic_1) and ((input_0_TVALID = ap_const_logic_0) or (input_15_TVALID = ap_const_logic_0) or (input_14_TVALID = ap_const_logic_0) or (input_13_TVALID = ap_const_logic_0) or (input_12_TVALID = ap_const_logic_0) or (input_11_TVALID = ap_const_logic_0) or (input_10_TVALID = ap_const_logic_0) or (input_9_TVALID = ap_const_logic_0) or (input_8_TVALID = ap_const_logic_0) or (input_7_TVALID = ap_const_logic_0) or (input_6_TVALID = ap_const_logic_0) or (input_5_TVALID = ap_const_logic_0) or (input_4_TVALID = ap_const_logic_0) or (input_3_TVALID = ap_const_logic_0) or (input_2_TVALID = ap_const_logic_0) or (input_1_TVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(input_0_TVALID, input_1_TVALID, input_2_TVALID, input_3_TVALID, input_4_TVALID, input_5_TVALID, input_6_TVALID, input_7_TVALID, input_8_TVALID, input_9_TVALID, input_10_TVALID, input_11_TVALID, input_12_TVALID, input_13_TVALID, input_14_TVALID, input_15_TVALID, ap_enable_reg_pp0_iter5, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)) or ((ap_const_logic_1 = ap_const_logic_1) and ((input_0_TVALID = ap_const_logic_0) or (input_15_TVALID = ap_const_logic_0) or (input_14_TVALID = ap_const_logic_0) or (input_13_TVALID = ap_const_logic_0) or (input_12_TVALID = ap_const_logic_0) or (input_11_TVALID = ap_const_logic_0) or (input_10_TVALID = ap_const_logic_0) or (input_9_TVALID = ap_const_logic_0) or (input_8_TVALID = ap_const_logic_0) or (input_7_TVALID = ap_const_logic_0) or (input_6_TVALID = ap_const_logic_0) or (input_5_TVALID = ap_const_logic_0) or (input_4_TVALID = ap_const_logic_0) or (input_3_TVALID = ap_const_logic_0) or (input_2_TVALID = ap_const_logic_0) or (input_1_TVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(input_0_TVALID, input_1_TVALID, input_2_TVALID, input_3_TVALID, input_4_TVALID, input_5_TVALID, input_6_TVALID, input_7_TVALID, input_8_TVALID, input_9_TVALID, input_10_TVALID, input_11_TVALID, input_12_TVALID, input_13_TVALID, input_14_TVALID, input_15_TVALID, ap_enable_reg_pp0_iter5, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)) or ((ap_const_logic_1 = ap_const_logic_1) and ((input_0_TVALID = ap_const_logic_0) or (input_15_TVALID = ap_const_logic_0) or (input_14_TVALID = ap_const_logic_0) or (input_13_TVALID = ap_const_logic_0) or (input_12_TVALID = ap_const_logic_0) or (input_11_TVALID = ap_const_logic_0) or (input_10_TVALID = ap_const_logic_0) or (input_9_TVALID = ap_const_logic_0) or (input_8_TVALID = ap_const_logic_0) or (input_7_TVALID = ap_const_logic_0) or (input_6_TVALID = ap_const_logic_0) or (input_5_TVALID = ap_const_logic_0) or (input_4_TVALID = ap_const_logic_0) or (input_3_TVALID = ap_const_logic_0) or (input_2_TVALID = ap_const_logic_0) or (input_1_TVALID = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(input_0_TVALID, input_1_TVALID, input_2_TVALID, input_3_TVALID, input_4_TVALID, input_5_TVALID, input_6_TVALID, input_7_TVALID, input_8_TVALID, input_9_TVALID, input_10_TVALID, input_11_TVALID, input_12_TVALID, input_13_TVALID, input_14_TVALID, input_15_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((input_0_TVALID = ap_const_logic_0) or (input_15_TVALID = ap_const_logic_0) or (input_14_TVALID = ap_const_logic_0) or (input_13_TVALID = ap_const_logic_0) or (input_12_TVALID = ap_const_logic_0) or (input_11_TVALID = ap_const_logic_0) or (input_10_TVALID = ap_const_logic_0) or (input_9_TVALID = ap_const_logic_0) or (input_8_TVALID = ap_const_logic_0) or (input_7_TVALID = ap_const_logic_0) or (input_6_TVALID = ap_const_logic_0) or (input_5_TVALID = ap_const_logic_0) or (input_4_TVALID = ap_const_logic_0) or (input_3_TVALID = ap_const_logic_0) or (input_2_TVALID = ap_const_logic_0) or (input_1_TVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(output_0_TREADY, output_1_TREADY, output_2_TREADY, output_3_TREADY, output_4_TREADY, output_5_TREADY, output_6_TREADY, output_7_TREADY, output_8_TREADY, output_9_TREADY, output_10_TREADY, output_11_TREADY, output_12_TREADY, output_13_TREADY, output_14_TREADY, output_15_TREADY)
    begin
                ap_block_state6_io <= ((output_8_TREADY = ap_const_logic_0) or (output_7_TREADY = ap_const_logic_0) or (output_6_TREADY = ap_const_logic_0) or (output_5_TREADY = ap_const_logic_0) or (output_4_TREADY = ap_const_logic_0) or (output_3_TREADY = ap_const_logic_0) or (output_2_TREADY = ap_const_logic_0) or (output_1_TREADY = ap_const_logic_0) or (output_0_TREADY = ap_const_logic_0) or (output_15_TREADY = ap_const_logic_0) or (output_14_TREADY = ap_const_logic_0) or (output_13_TREADY = ap_const_logic_0) or (output_12_TREADY = ap_const_logic_0) or (output_11_TREADY = ap_const_logic_0) or (output_10_TREADY = ap_const_logic_0) or (output_9_TREADY = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_bwrite_load_assign_proc : process(bwrite, ap_block_pp0_stage0, icmp_ln879_1_reg_1112_pp0_iter1_reg, ap_enable_reg_pp0_iter2, xor_ln64_fu_829_p2)
    begin
        if (((icmp_ln879_1_reg_1112_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_bwrite_load <= xor_ln64_fu_829_p2;
        else 
            ap_sig_allocacmp_bwrite_load <= bwrite;
        end if; 
    end process;

    buffer_data_V_0_address0 <= sext_ln63_fu_788_p1(9 - 1 downto 0);
    buffer_data_V_0_address1 <= zext_ln544_fu_823_p1(9 - 1 downto 0);

    buffer_data_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_data_V_0_ce0 <= ap_const_logic_1;
        else 
            buffer_data_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_data_V_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            buffer_data_V_0_ce1 <= ap_const_logic_1;
        else 
            buffer_data_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_data_V_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, bwrite_load_load_fu_793_p1, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (bwrite_load_load_fu_793_p1 = ap_const_lv1_0))) then 
            buffer_data_V_0_we0 <= ap_const_logic_1;
        else 
            buffer_data_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_data_V_1_address0 <= sext_ln63_fu_788_p1(9 - 1 downto 0);
    buffer_data_V_1_address1 <= zext_ln544_fu_823_p1(9 - 1 downto 0);

    buffer_data_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_data_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer_data_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_data_V_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            buffer_data_V_1_ce1 <= ap_const_logic_1;
        else 
            buffer_data_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_data_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, bwrite_load_load_fu_793_p1, ap_enable_reg_pp0_iter1)
    begin
        if (((bwrite_load_load_fu_793_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_data_V_1_we0 <= ap_const_logic_1;
        else 
            buffer_data_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bwrite_load_load_fu_793_p1 <= ap_sig_allocacmp_bwrite_load;
    icmp_ln879_1_fu_748_p2 <= "1" when (cycle_V = ap_const_lv9_1FF) else "0";
    icmp_ln879_fu_742_p2 <= "1" when (cycle_V = ap_const_lv9_FF) else "0";

    input_0_TDATA_blk_n_assign_proc : process(input_0_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_0_TDATA_blk_n <= input_0_TVALID;
        else 
            input_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_0_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_TREADY <= ap_const_logic_1;
        else 
            input_0_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_10_TDATA_blk_n_assign_proc : process(input_10_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_10_TDATA_blk_n <= input_10_TVALID;
        else 
            input_10_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_10_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_10_TREADY <= ap_const_logic_1;
        else 
            input_10_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_11_TDATA_blk_n_assign_proc : process(input_11_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_11_TDATA_blk_n <= input_11_TVALID;
        else 
            input_11_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_11_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_11_TREADY <= ap_const_logic_1;
        else 
            input_11_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_12_TDATA_blk_n_assign_proc : process(input_12_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_12_TDATA_blk_n <= input_12_TVALID;
        else 
            input_12_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_12_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_12_TREADY <= ap_const_logic_1;
        else 
            input_12_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_13_TDATA_blk_n_assign_proc : process(input_13_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_13_TDATA_blk_n <= input_13_TVALID;
        else 
            input_13_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_13_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_13_TREADY <= ap_const_logic_1;
        else 
            input_13_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_14_TDATA_blk_n_assign_proc : process(input_14_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_14_TDATA_blk_n <= input_14_TVALID;
        else 
            input_14_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_14_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_14_TREADY <= ap_const_logic_1;
        else 
            input_14_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_15_TDATA_blk_n_assign_proc : process(input_15_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_15_TDATA_blk_n <= input_15_TVALID;
        else 
            input_15_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_15_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_15_TREADY <= ap_const_logic_1;
        else 
            input_15_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_1_TDATA_blk_n_assign_proc : process(input_1_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_1_TDATA_blk_n <= input_1_TVALID;
        else 
            input_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_1_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_1_TREADY <= ap_const_logic_1;
        else 
            input_1_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_2_TDATA_blk_n_assign_proc : process(input_2_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_2_TDATA_blk_n <= input_2_TVALID;
        else 
            input_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_2_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_2_TREADY <= ap_const_logic_1;
        else 
            input_2_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_3_TDATA_blk_n_assign_proc : process(input_3_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_3_TDATA_blk_n <= input_3_TVALID;
        else 
            input_3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_3_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_3_TREADY <= ap_const_logic_1;
        else 
            input_3_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_4_TDATA_blk_n_assign_proc : process(input_4_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_4_TDATA_blk_n <= input_4_TVALID;
        else 
            input_4_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_4_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_4_TREADY <= ap_const_logic_1;
        else 
            input_4_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_5_TDATA_blk_n_assign_proc : process(input_5_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_5_TDATA_blk_n <= input_5_TVALID;
        else 
            input_5_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_5_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_5_TREADY <= ap_const_logic_1;
        else 
            input_5_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_6_TDATA_blk_n_assign_proc : process(input_6_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_6_TDATA_blk_n <= input_6_TVALID;
        else 
            input_6_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_6_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_6_TREADY <= ap_const_logic_1;
        else 
            input_6_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_7_TDATA_blk_n_assign_proc : process(input_7_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_7_TDATA_blk_n <= input_7_TVALID;
        else 
            input_7_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_7_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_7_TREADY <= ap_const_logic_1;
        else 
            input_7_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_8_TDATA_blk_n_assign_proc : process(input_8_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_8_TDATA_blk_n <= input_8_TVALID;
        else 
            input_8_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_8_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_8_TREADY <= ap_const_logic_1;
        else 
            input_8_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_9_TDATA_blk_n_assign_proc : process(input_9_TVALID, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_9_TDATA_blk_n <= input_9_TVALID;
        else 
            input_9_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_9_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_9_TREADY <= ap_const_logic_1;
        else 
            input_9_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    ndx_fu_736_p2 <= std_logic_vector(signed(sext_ln1467_fu_718_p1) + signed(zext_ln62_3_fu_732_p1));
    or_ln68_fu_754_p2 <= (icmp_ln879_fu_742_p2 or icmp_ln879_1_fu_748_p2);
    or_ln73_fu_764_p2 <= (primed or icmp_ln879_1_fu_748_p2);
    output_0_TDATA <= select_ln63_fu_852_p3(32 - 1 downto 0);

    output_0_TDATA_blk_n_assign_proc : process(output_0_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_0_TDATA_blk_n <= output_0_TREADY;
        else 
            output_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_0_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_0_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_0_TVALID <= ap_const_logic_1;
        else 
            output_0_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_10_TDATA <= select_ln63_fu_852_p3(351 downto 320);

    output_10_TDATA_blk_n_assign_proc : process(output_10_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_10_TDATA_blk_n <= output_10_TREADY;
        else 
            output_10_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_10_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_10_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_10_TVALID <= ap_const_logic_1;
        else 
            output_10_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_11_TDATA <= select_ln63_fu_852_p3(383 downto 352);

    output_11_TDATA_blk_n_assign_proc : process(output_11_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_11_TDATA_blk_n <= output_11_TREADY;
        else 
            output_11_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_11_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_11_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_11_TVALID <= ap_const_logic_1;
        else 
            output_11_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_12_TDATA <= select_ln63_fu_852_p3(415 downto 384);

    output_12_TDATA_blk_n_assign_proc : process(output_12_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_12_TDATA_blk_n <= output_12_TREADY;
        else 
            output_12_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_12_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_12_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_12_TVALID <= ap_const_logic_1;
        else 
            output_12_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_13_TDATA <= select_ln63_fu_852_p3(447 downto 416);

    output_13_TDATA_blk_n_assign_proc : process(output_13_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_13_TDATA_blk_n <= output_13_TREADY;
        else 
            output_13_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_13_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_13_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_13_TVALID <= ap_const_logic_1;
        else 
            output_13_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_14_TDATA <= select_ln63_fu_852_p3(479 downto 448);

    output_14_TDATA_blk_n_assign_proc : process(output_14_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_14_TDATA_blk_n <= output_14_TREADY;
        else 
            output_14_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_14_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_14_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_14_TVALID <= ap_const_logic_1;
        else 
            output_14_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_15_TDATA <= select_ln63_fu_852_p3(511 downto 480);

    output_15_TDATA_blk_n_assign_proc : process(output_15_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_15_TDATA_blk_n <= output_15_TREADY;
        else 
            output_15_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_15_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_15_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_15_TVALID <= ap_const_logic_1;
        else 
            output_15_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_1_TDATA <= select_ln63_fu_852_p3(63 downto 32);

    output_1_TDATA_blk_n_assign_proc : process(output_1_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_1_TDATA_blk_n <= output_1_TREADY;
        else 
            output_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_1_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_1_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_1_TVALID <= ap_const_logic_1;
        else 
            output_1_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_2_TDATA <= select_ln63_fu_852_p3(95 downto 64);

    output_2_TDATA_blk_n_assign_proc : process(output_2_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_2_TDATA_blk_n <= output_2_TREADY;
        else 
            output_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_2_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_2_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_2_TVALID <= ap_const_logic_1;
        else 
            output_2_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_3_TDATA <= select_ln63_fu_852_p3(127 downto 96);

    output_3_TDATA_blk_n_assign_proc : process(output_3_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_3_TDATA_blk_n <= output_3_TREADY;
        else 
            output_3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_3_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_3_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_3_TVALID <= ap_const_logic_1;
        else 
            output_3_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_4_TDATA <= select_ln63_fu_852_p3(159 downto 128);

    output_4_TDATA_blk_n_assign_proc : process(output_4_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_4_TDATA_blk_n <= output_4_TREADY;
        else 
            output_4_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_4_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_4_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_4_TVALID <= ap_const_logic_1;
        else 
            output_4_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_5_TDATA <= select_ln63_fu_852_p3(191 downto 160);

    output_5_TDATA_blk_n_assign_proc : process(output_5_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_5_TDATA_blk_n <= output_5_TREADY;
        else 
            output_5_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_5_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_5_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_5_TVALID <= ap_const_logic_1;
        else 
            output_5_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_6_TDATA <= select_ln63_fu_852_p3(223 downto 192);

    output_6_TDATA_blk_n_assign_proc : process(output_6_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_6_TDATA_blk_n <= output_6_TREADY;
        else 
            output_6_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_6_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_6_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_6_TVALID <= ap_const_logic_1;
        else 
            output_6_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_7_TDATA <= select_ln63_fu_852_p3(255 downto 224);

    output_7_TDATA_blk_n_assign_proc : process(output_7_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_7_TDATA_blk_n <= output_7_TREADY;
        else 
            output_7_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_7_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_7_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_7_TVALID <= ap_const_logic_1;
        else 
            output_7_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_8_TDATA <= select_ln63_fu_852_p3(287 downto 256);

    output_8_TDATA_blk_n_assign_proc : process(output_8_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_8_TDATA_blk_n <= output_8_TREADY;
        else 
            output_8_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_8_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_8_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_8_TVALID <= ap_const_logic_1;
        else 
            output_8_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_9_TDATA <= select_ln63_fu_852_p3(319 downto 288);

    output_9_TDATA_blk_n_assign_proc : process(output_9_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_9_TDATA_blk_n <= output_9_TREADY;
        else 
            output_9_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_9_TLAST <= or_ln68_reg_1116_pp0_iter4_reg;

    output_9_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_9_TVALID <= ap_const_logic_1;
        else 
            output_9_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln62_fu_704_p3 <= 
        ap_const_lv10_3FF when (trunc_ln1371_fu_660_p1(0) = '1') else 
        ap_const_lv10_0;
    select_ln63_fu_852_p3 <= 
        buffer_data_V_0_load_reg_1156 when (bwrite_load_reg_1140_pp0_iter4_reg(0) = '1') else 
        buffer_data_V_1_load_reg_1161;
        sext_ln1467_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln62_fu_712_p2),11));

        sext_ln63_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ndx_reg_1107),64));

    sub_ln62_fu_698_p2 <= std_logic_vector(unsigned(zext_ln62_2_fu_694_p1) - unsigned(zext_ln62_1_fu_684_p1));
    tmp_1_fu_664_p3 <= cycle_V(8 downto 8);
    tmp_2_fu_722_p4 <= cycle_V(8 downto 1);
    tmp_fu_797_p17 <= (((((((((((((((input_15_data_V_tmp_reg_1102 & input_14_data_V_tmp_reg_1097) & input_13_data_V_tmp_reg_1092) & input_12_data_V_tmp_reg_1087) & input_11_data_V_tmp_reg_1082) & input_10_data_V_tmp_reg_1077) & input_9_data_V_tmp_reg_1072) & input_8_data_V_tmp_reg_1067) & input_7_data_V_tmp_reg_1062) & input_6_data_V_tmp_reg_1057) & input_5_data_V_tmp_reg_1052) & input_4_data_V_tmp_reg_1047) & input_3_data_V_tmp_reg_1042) & input_2_data_V_tmp_reg_1037) & input_1_data_V_tmp_reg_1032) & input_0_data_V_tmp_reg_1027);
    trunc_ln1371_fu_660_p1 <= cycle_V(1 - 1 downto 0);
    xor_ln62_fu_688_p2 <= (zext_ln62_fu_680_p1 xor ap_const_lv9_180);
    xor_ln64_fu_829_p2 <= (bwrite_load_reg_1140 xor ap_const_lv1_1);
    zext_ln544_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cycleout_V),64));
    zext_ln62_1_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_672_p3),10));
    zext_ln62_2_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln62_fu_688_p2),10));
    zext_ln62_3_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_722_p4),11));
    zext_ln62_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_672_p3),9));
end behav;
