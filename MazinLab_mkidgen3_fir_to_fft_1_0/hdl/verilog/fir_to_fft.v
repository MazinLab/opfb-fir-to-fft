// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_to_fft,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.538000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=60,HLS_SYN_DSP=0,HLS_SYN_FF=6026,HLS_SYN_LUT=1996,HLS_VERSION=2019_2_1}" *)

module fir_to_fft (
        ap_clk,
        ap_rst_n,
        input_0_TDATA,
        input_0_TVALID,
        input_0_TREADY,
        input_1_TDATA,
        input_1_TVALID,
        input_1_TREADY,
        input_2_TDATA,
        input_2_TVALID,
        input_2_TREADY,
        input_3_TDATA,
        input_3_TVALID,
        input_3_TREADY,
        input_4_TDATA,
        input_4_TVALID,
        input_4_TREADY,
        input_5_TDATA,
        input_5_TVALID,
        input_5_TREADY,
        input_6_TDATA,
        input_6_TVALID,
        input_6_TREADY,
        input_7_TDATA,
        input_7_TVALID,
        input_7_TREADY,
        input_8_TDATA,
        input_8_TVALID,
        input_8_TREADY,
        input_9_TDATA,
        input_9_TVALID,
        input_9_TREADY,
        input_10_TDATA,
        input_10_TVALID,
        input_10_TREADY,
        input_11_TDATA,
        input_11_TVALID,
        input_11_TREADY,
        input_12_TDATA,
        input_12_TVALID,
        input_12_TREADY,
        input_13_TDATA,
        input_13_TVALID,
        input_13_TREADY,
        input_14_TDATA,
        input_14_TVALID,
        input_14_TREADY,
        input_15_TDATA,
        input_15_TVALID,
        input_15_TREADY,
        input_0_TLAST,
        input_1_TLAST,
        input_2_TLAST,
        input_3_TLAST,
        input_4_TLAST,
        input_5_TLAST,
        input_6_TLAST,
        input_7_TLAST,
        input_8_TLAST,
        input_9_TLAST,
        input_10_TLAST,
        input_11_TLAST,
        input_12_TLAST,
        input_13_TLAST,
        input_14_TLAST,
        input_15_TLAST,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_0_TDATA;
input   input_0_TVALID;
output   input_0_TREADY;
input  [31:0] input_1_TDATA;
input   input_1_TVALID;
output   input_1_TREADY;
input  [31:0] input_2_TDATA;
input   input_2_TVALID;
output   input_2_TREADY;
input  [31:0] input_3_TDATA;
input   input_3_TVALID;
output   input_3_TREADY;
input  [31:0] input_4_TDATA;
input   input_4_TVALID;
output   input_4_TREADY;
input  [31:0] input_5_TDATA;
input   input_5_TVALID;
output   input_5_TREADY;
input  [31:0] input_6_TDATA;
input   input_6_TVALID;
output   input_6_TREADY;
input  [31:0] input_7_TDATA;
input   input_7_TVALID;
output   input_7_TREADY;
input  [31:0] input_8_TDATA;
input   input_8_TVALID;
output   input_8_TREADY;
input  [31:0] input_9_TDATA;
input   input_9_TVALID;
output   input_9_TREADY;
input  [31:0] input_10_TDATA;
input   input_10_TVALID;
output   input_10_TREADY;
input  [31:0] input_11_TDATA;
input   input_11_TVALID;
output   input_11_TREADY;
input  [31:0] input_12_TDATA;
input   input_12_TVALID;
output   input_12_TREADY;
input  [31:0] input_13_TDATA;
input   input_13_TVALID;
output   input_13_TREADY;
input  [31:0] input_14_TDATA;
input   input_14_TVALID;
output   input_14_TREADY;
input  [31:0] input_15_TDATA;
input   input_15_TVALID;
output   input_15_TREADY;
input  [0:0] input_0_TLAST;
input  [0:0] input_1_TLAST;
input  [0:0] input_2_TLAST;
input  [0:0] input_3_TLAST;
input  [0:0] input_4_TLAST;
input  [0:0] input_5_TLAST;
input  [0:0] input_6_TLAST;
input  [0:0] input_7_TLAST;
input  [0:0] input_8_TLAST;
input  [0:0] input_9_TLAST;
input  [0:0] input_10_TLAST;
input  [0:0] input_11_TLAST;
input  [0:0] input_12_TLAST;
input  [0:0] input_13_TLAST;
input  [0:0] input_14_TLAST;
input  [0:0] input_15_TLAST;
output  [511:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [0:0] output_r_TLAST;

reg input_0_TREADY;
reg input_1_TREADY;
reg input_2_TREADY;
reg input_3_TREADY;
reg input_4_TREADY;
reg input_5_TREADY;
reg input_6_TREADY;
reg input_7_TREADY;
reg input_8_TREADY;
reg input_9_TREADY;
reg input_10_TREADY;
reg input_11_TREADY;
reg input_12_TREADY;
reg input_13_TREADY;
reg input_14_TREADY;
reg input_15_TREADY;

 reg    ap_rst_n_inv;
reg   [8:0] cycle_V;
reg   [0:0] bwrite;
wire   [7:0] A_data_V_address0;
reg    A_data_V_ce0;
reg    A_data_V_we0;
wire   [511:0] A_data_V_d0;
wire   [7:0] A_data_V_address1;
reg    A_data_V_ce1;
wire   [511:0] A_data_V_q1;
wire   [6:0] C_data_V_address0;
reg    C_data_V_ce0;
reg    C_data_V_we0;
wire   [511:0] C_data_V_d0;
wire   [6:0] C_data_V_address1;
reg    C_data_V_ce1;
wire   [511:0] C_data_V_q1;
reg   [0:0] primed;
reg   [8:0] cycleout_V;
wire   [6:0] B_data_V_0_address0;
reg    B_data_V_0_ce0;
reg    B_data_V_0_we0;
wire   [6:0] B_data_V_0_address1;
reg    B_data_V_0_ce1;
wire   [511:0] B_data_V_0_q1;
wire   [6:0] B_data_V_1_address0;
reg    B_data_V_1_ce0;
reg    B_data_V_1_we0;
wire   [6:0] B_data_V_1_address1;
reg    B_data_V_1_ce1;
wire   [511:0] B_data_V_1_q1;
reg    input_0_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    input_1_TDATA_blk_n;
reg    input_2_TDATA_blk_n;
reg    input_3_TDATA_blk_n;
reg    input_4_TDATA_blk_n;
reg    input_5_TDATA_blk_n;
reg    input_6_TDATA_blk_n;
reg    input_7_TDATA_blk_n;
reg    input_8_TDATA_blk_n;
reg    input_9_TDATA_blk_n;
reg    input_10_TDATA_blk_n;
reg    input_11_TDATA_blk_n;
reg    input_12_TDATA_blk_n;
reg    input_13_TDATA_blk_n;
reg    input_14_TDATA_blk_n;
reg    input_15_TDATA_blk_n;
reg    output_r_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [31:0] input_0_data_V_tmp_reg_796;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    regslice_forward_output_data_V_U_apdone_blk;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] input_1_data_V_tmp_reg_801;
reg   [31:0] input_2_data_V_tmp_reg_806;
reg   [31:0] input_3_data_V_tmp_reg_811;
reg   [31:0] input_4_data_V_tmp_reg_816;
reg   [31:0] input_5_data_V_tmp_reg_821;
reg   [31:0] input_6_data_V_tmp_reg_826;
reg   [31:0] input_7_data_V_tmp_reg_831;
reg   [31:0] input_8_data_V_tmp_reg_836;
reg   [31:0] input_9_data_V_tmp_reg_841;
reg   [31:0] input_10_data_V_tmp_reg_846;
reg   [31:0] input_11_data_V_tmp_reg_851;
reg   [31:0] input_12_data_V_tmp_reg_856;
reg   [31:0] input_13_data_V_tmp_reg_861;
reg   [31:0] input_14_data_V_tmp_reg_866;
reg   [31:0] input_15_data_V_tmp_reg_871;
wire   [0:0] trunc_ln791_fu_460_p1;
reg   [0:0] trunc_ln791_reg_876;
wire   [0:0] bwrite_load_load_fu_464_p1;
reg   [0:0] bwrite_load_reg_880;
reg   [0:0] bwrite_load_reg_880_pp0_iter1_reg;
reg   [0:0] bwrite_load_reg_880_pp0_iter2_reg;
reg   [0:0] bwrite_load_reg_880_pp0_iter3_reg;
wire   [0:0] tmp_fu_510_p3;
wire   [0:0] tmp_2_fu_572_p3;
reg   [0:0] tmp_2_reg_890;
wire   [7:0] ret_V_2_fu_580_p2;
reg   [7:0] ret_V_2_reg_894;
reg   [8:0] t_V_reg_899;
reg   [0:0] tmp_4_reg_907;
reg   [0:0] tmp_4_reg_907_pp0_iter1_reg;
reg   [0:0] tmp_4_reg_907_pp0_iter2_reg;
reg   [0:0] tmp_4_reg_907_pp0_iter3_reg;
wire   [9:0] ret_V_4_fu_602_p2;
reg   [9:0] ret_V_4_reg_913;
wire   [0:0] icmp_ln879_1_fu_614_p2;
reg   [0:0] icmp_ln879_1_reg_918;
wire   [0:0] or_ln66_fu_620_p2;
reg   [0:0] or_ln66_reg_922;
reg   [0:0] or_ln66_reg_922_pp0_iter1_reg;
reg   [0:0] or_ln66_reg_922_pp0_iter2_reg;
reg   [0:0] or_ln66_reg_922_pp0_iter3_reg;
reg   [0:0] or_ln66_reg_922_pp0_iter4_reg;
wire   [0:0] icmp_ln891_fu_626_p2;
reg   [0:0] icmp_ln891_reg_927;
wire   [0:0] primed_load_load_fu_669_p1;
reg   [0:0] primed_load_reg_932;
reg   [0:0] primed_load_reg_932_pp0_iter2_reg;
reg   [0:0] primed_load_reg_932_pp0_iter3_reg;
wire   [0:0] icmp_ln887_fu_677_p2;
reg   [0:0] icmp_ln887_reg_943;
reg   [0:0] icmp_ln887_reg_943_pp0_iter2_reg;
reg   [0:0] icmp_ln887_reg_943_pp0_iter3_reg;
wire   [8:0] ret_V_3_fu_682_p2;
reg   [8:0] ret_V_3_reg_949;
reg   [511:0] A_data_V_load_reg_969;
reg    ap_enable_reg_pp0_iter3;
reg   [511:0] B_data_V_0_load_reg_974;
reg   [511:0] B_data_V_0_load_reg_974_pp0_iter4_reg;
reg   [511:0] B_data_V_1_load_reg_979;
reg   [511:0] C_data_V_load_reg_984;
reg    ap_enable_reg_pp0_iter4;
wire   [0:0] and_ln49_1_fu_767_p2;
reg   [0:0] and_ln49_1_reg_989;
wire   [0:0] or_ln49_fu_772_p2;
reg   [0:0] or_ln49_reg_994;
wire   [511:0] select_ln49_1_fu_778_p3;
reg   [511:0] select_ln49_1_reg_999;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln544_fu_468_p1;
wire   [63:0] zext_ln544_1_fu_528_p1;
wire   [63:0] zext_ln544_3_fu_644_p1;
wire   [63:0] zext_ln544_2_fu_673_p1;
wire   [63:0] zext_ln544_5_fu_690_p1;
wire   [63:0] zext_ln544_4_fu_732_p1;
wire   [8:0] add_ln700_1_fu_632_p2;
wire   [0:0] xor_ln68_fu_696_p2;
reg   [0:0] ap_sig_allocacmp_bwrite_load;
wire   [0:0] or_ln70_fu_718_p2;
wire   [8:0] add_ln700_fu_707_p2;
reg   [8:0] ap_sig_allocacmp_t_V;
reg    ap_block_pp0_stage0_01001;
wire   [511:0] tmp_3_fu_534_p17;
wire   [7:0] grp_fu_382_p4;
wire   [6:0] ret_V_1_fu_518_p4;
wire   [9:0] zext_ln215_fu_598_p1;
wire   [0:0] icmp_ln879_fu_608_p2;
wire  signed [32:0] sext_ln1354_1_fu_687_p1;
wire  signed [32:0] sext_ln1354_fu_729_p1;
wire   [0:0] xor_ln887_fu_737_p2;
wire   [0:0] and_ln887_1_fu_747_p2;
wire   [0:0] xor_ln887_1_fu_756_p2;
wire   [0:0] and_ln49_fu_761_p2;
wire   [0:0] and_ln887_2_fu_751_p2;
wire   [0:0] and_ln887_fu_742_p2;
wire   [511:0] select_ln49_fu_784_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_reverse_input_0_data_V_U_apdone_blk;
wire   [31:0] input_0_TDATA_int;
wire    input_0_TVALID_int;
reg    input_0_TREADY_int;
wire    regslice_reverse_input_0_data_V_U_ack_in;
wire    regslice_reverse_input_1_data_V_U_apdone_blk;
wire   [31:0] input_1_TDATA_int;
wire    input_1_TVALID_int;
reg    input_1_TREADY_int;
wire    regslice_reverse_input_1_data_V_U_ack_in;
wire    regslice_reverse_input_2_data_V_U_apdone_blk;
wire   [31:0] input_2_TDATA_int;
wire    input_2_TVALID_int;
reg    input_2_TREADY_int;
wire    regslice_reverse_input_2_data_V_U_ack_in;
wire    regslice_reverse_input_3_data_V_U_apdone_blk;
wire   [31:0] input_3_TDATA_int;
wire    input_3_TVALID_int;
reg    input_3_TREADY_int;
wire    regslice_reverse_input_3_data_V_U_ack_in;
wire    regslice_reverse_input_4_data_V_U_apdone_blk;
wire   [31:0] input_4_TDATA_int;
wire    input_4_TVALID_int;
reg    input_4_TREADY_int;
wire    regslice_reverse_input_4_data_V_U_ack_in;
wire    regslice_reverse_input_5_data_V_U_apdone_blk;
wire   [31:0] input_5_TDATA_int;
wire    input_5_TVALID_int;
reg    input_5_TREADY_int;
wire    regslice_reverse_input_5_data_V_U_ack_in;
wire    regslice_reverse_input_6_data_V_U_apdone_blk;
wire   [31:0] input_6_TDATA_int;
wire    input_6_TVALID_int;
reg    input_6_TREADY_int;
wire    regslice_reverse_input_6_data_V_U_ack_in;
wire    regslice_reverse_input_7_data_V_U_apdone_blk;
wire   [31:0] input_7_TDATA_int;
wire    input_7_TVALID_int;
reg    input_7_TREADY_int;
wire    regslice_reverse_input_7_data_V_U_ack_in;
wire    regslice_reverse_input_8_data_V_U_apdone_blk;
wire   [31:0] input_8_TDATA_int;
wire    input_8_TVALID_int;
reg    input_8_TREADY_int;
wire    regslice_reverse_input_8_data_V_U_ack_in;
wire    regslice_reverse_input_9_data_V_U_apdone_blk;
wire   [31:0] input_9_TDATA_int;
wire    input_9_TVALID_int;
reg    input_9_TREADY_int;
wire    regslice_reverse_input_9_data_V_U_ack_in;
wire    regslice_reverse_input_10_data_V_U_apdone_blk;
wire   [31:0] input_10_TDATA_int;
wire    input_10_TVALID_int;
reg    input_10_TREADY_int;
wire    regslice_reverse_input_10_data_V_U_ack_in;
wire    regslice_reverse_input_11_data_V_U_apdone_blk;
wire   [31:0] input_11_TDATA_int;
wire    input_11_TVALID_int;
reg    input_11_TREADY_int;
wire    regslice_reverse_input_11_data_V_U_ack_in;
wire    regslice_reverse_input_12_data_V_U_apdone_blk;
wire   [31:0] input_12_TDATA_int;
wire    input_12_TVALID_int;
reg    input_12_TREADY_int;
wire    regslice_reverse_input_12_data_V_U_ack_in;
wire    regslice_reverse_input_13_data_V_U_apdone_blk;
wire   [31:0] input_13_TDATA_int;
wire    input_13_TVALID_int;
reg    input_13_TREADY_int;
wire    regslice_reverse_input_13_data_V_U_ack_in;
wire    regslice_reverse_input_14_data_V_U_apdone_blk;
wire   [31:0] input_14_TDATA_int;
wire    input_14_TVALID_int;
reg    input_14_TREADY_int;
wire    regslice_reverse_input_14_data_V_U_ack_in;
wire    regslice_reverse_input_15_data_V_U_apdone_blk;
wire   [31:0] input_15_TDATA_int;
wire    input_15_TVALID_int;
reg    input_15_TREADY_int;
wire    regslice_reverse_input_15_data_V_U_ack_in;
wire    regslice_reverse_input_0_last_V_U_apdone_blk;
wire   [0:0] input_0_TLAST_int;
wire    regslice_reverse_input_0_last_V_U_vld_out;
wire    regslice_reverse_input_0_last_V_U_ack_in;
wire    regslice_reverse_input_1_last_V_U_apdone_blk;
wire   [0:0] input_1_TLAST_int;
wire    regslice_reverse_input_1_last_V_U_vld_out;
wire    regslice_reverse_input_1_last_V_U_ack_in;
wire    regslice_reverse_input_2_last_V_U_apdone_blk;
wire   [0:0] input_2_TLAST_int;
wire    regslice_reverse_input_2_last_V_U_vld_out;
wire    regslice_reverse_input_2_last_V_U_ack_in;
wire    regslice_reverse_input_3_last_V_U_apdone_blk;
wire   [0:0] input_3_TLAST_int;
wire    regslice_reverse_input_3_last_V_U_vld_out;
wire    regslice_reverse_input_3_last_V_U_ack_in;
wire    regslice_reverse_input_4_last_V_U_apdone_blk;
wire   [0:0] input_4_TLAST_int;
wire    regslice_reverse_input_4_last_V_U_vld_out;
wire    regslice_reverse_input_4_last_V_U_ack_in;
wire    regslice_reverse_input_5_last_V_U_apdone_blk;
wire   [0:0] input_5_TLAST_int;
wire    regslice_reverse_input_5_last_V_U_vld_out;
wire    regslice_reverse_input_5_last_V_U_ack_in;
wire    regslice_reverse_input_6_last_V_U_apdone_blk;
wire   [0:0] input_6_TLAST_int;
wire    regslice_reverse_input_6_last_V_U_vld_out;
wire    regslice_reverse_input_6_last_V_U_ack_in;
wire    regslice_reverse_input_7_last_V_U_apdone_blk;
wire   [0:0] input_7_TLAST_int;
wire    regslice_reverse_input_7_last_V_U_vld_out;
wire    regslice_reverse_input_7_last_V_U_ack_in;
wire    regslice_reverse_input_8_last_V_U_apdone_blk;
wire   [0:0] input_8_TLAST_int;
wire    regslice_reverse_input_8_last_V_U_vld_out;
wire    regslice_reverse_input_8_last_V_U_ack_in;
wire    regslice_reverse_input_9_last_V_U_apdone_blk;
wire   [0:0] input_9_TLAST_int;
wire    regslice_reverse_input_9_last_V_U_vld_out;
wire    regslice_reverse_input_9_last_V_U_ack_in;
wire    regslice_reverse_input_10_last_V_U_apdone_blk;
wire   [0:0] input_10_TLAST_int;
wire    regslice_reverse_input_10_last_V_U_vld_out;
wire    regslice_reverse_input_10_last_V_U_ack_in;
wire    regslice_reverse_input_11_last_V_U_apdone_blk;
wire   [0:0] input_11_TLAST_int;
wire    regslice_reverse_input_11_last_V_U_vld_out;
wire    regslice_reverse_input_11_last_V_U_ack_in;
wire    regslice_reverse_input_12_last_V_U_apdone_blk;
wire   [0:0] input_12_TLAST_int;
wire    regslice_reverse_input_12_last_V_U_vld_out;
wire    regslice_reverse_input_12_last_V_U_ack_in;
wire    regslice_reverse_input_13_last_V_U_apdone_blk;
wire   [0:0] input_13_TLAST_int;
wire    regslice_reverse_input_13_last_V_U_vld_out;
wire    regslice_reverse_input_13_last_V_U_ack_in;
wire    regslice_reverse_input_14_last_V_U_apdone_blk;
wire   [0:0] input_14_TLAST_int;
wire    regslice_reverse_input_14_last_V_U_vld_out;
wire    regslice_reverse_input_14_last_V_U_ack_in;
wire    regslice_reverse_input_15_last_V_U_apdone_blk;
wire   [0:0] input_15_TLAST_int;
wire    regslice_reverse_input_15_last_V_U_vld_out;
wire    regslice_reverse_input_15_last_V_U_ack_in;
wire   [511:0] output_r_TDATA_int;
reg    output_r_TVALID_int;
wire    output_r_TREADY_int;
wire    regslice_forward_output_data_V_U_vld_out;
wire    regslice_forward_output_last_V_U_apdone_blk;
wire    regslice_forward_output_last_V_U_ack_in_dummy;
wire    regslice_forward_output_last_V_U_vld_out;

// power-on initialization
initial begin
#0 cycle_V = 9'd0;
#0 bwrite = 1'd0;
#0 primed = 1'd0;
#0 cycleout_V = 9'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

fir_to_fft_A_data_V #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
A_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_data_V_address0),
    .ce0(A_data_V_ce0),
    .we0(A_data_V_we0),
    .d0(A_data_V_d0),
    .address1(A_data_V_address1),
    .ce1(A_data_V_ce1),
    .q1(A_data_V_q1)
);

fir_to_fft_C_data_V #(
    .DataWidth( 512 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
C_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(C_data_V_address0),
    .ce0(C_data_V_ce0),
    .we0(C_data_V_we0),
    .d0(C_data_V_d0),
    .address1(C_data_V_address1),
    .ce1(C_data_V_ce1),
    .q1(C_data_V_q1)
);

fir_to_fft_C_data_V #(
    .DataWidth( 512 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
B_data_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_data_V_0_address0),
    .ce0(B_data_V_0_ce0),
    .we0(B_data_V_0_we0),
    .d0(tmp_3_fu_534_p17),
    .address1(B_data_V_0_address1),
    .ce1(B_data_V_0_ce1),
    .q1(B_data_V_0_q1)
);

fir_to_fft_C_data_V #(
    .DataWidth( 512 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
B_data_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_data_V_1_address0),
    .ce0(B_data_V_1_ce0),
    .we0(B_data_V_1_we0),
    .d0(tmp_3_fu_534_p17),
    .address1(B_data_V_1_address1),
    .ce1(B_data_V_1_ce1),
    .q1(B_data_V_1_q1)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_0_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_0_TDATA),
    .vld_in(input_0_TVALID),
    .ack_in(regslice_reverse_input_0_data_V_U_ack_in),
    .data_out(input_0_TDATA_int),
    .vld_out(input_0_TVALID_int),
    .ack_out(input_0_TREADY_int),
    .apdone_blk(regslice_reverse_input_0_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_1_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_1_TDATA),
    .vld_in(input_1_TVALID),
    .ack_in(regslice_reverse_input_1_data_V_U_ack_in),
    .data_out(input_1_TDATA_int),
    .vld_out(input_1_TVALID_int),
    .ack_out(input_1_TREADY_int),
    .apdone_blk(regslice_reverse_input_1_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_2_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_2_TDATA),
    .vld_in(input_2_TVALID),
    .ack_in(regslice_reverse_input_2_data_V_U_ack_in),
    .data_out(input_2_TDATA_int),
    .vld_out(input_2_TVALID_int),
    .ack_out(input_2_TREADY_int),
    .apdone_blk(regslice_reverse_input_2_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_3_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_3_TDATA),
    .vld_in(input_3_TVALID),
    .ack_in(regslice_reverse_input_3_data_V_U_ack_in),
    .data_out(input_3_TDATA_int),
    .vld_out(input_3_TVALID_int),
    .ack_out(input_3_TREADY_int),
    .apdone_blk(regslice_reverse_input_3_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_4_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_4_TDATA),
    .vld_in(input_4_TVALID),
    .ack_in(regslice_reverse_input_4_data_V_U_ack_in),
    .data_out(input_4_TDATA_int),
    .vld_out(input_4_TVALID_int),
    .ack_out(input_4_TREADY_int),
    .apdone_blk(regslice_reverse_input_4_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_5_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_5_TDATA),
    .vld_in(input_5_TVALID),
    .ack_in(regslice_reverse_input_5_data_V_U_ack_in),
    .data_out(input_5_TDATA_int),
    .vld_out(input_5_TVALID_int),
    .ack_out(input_5_TREADY_int),
    .apdone_blk(regslice_reverse_input_5_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_6_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_6_TDATA),
    .vld_in(input_6_TVALID),
    .ack_in(regslice_reverse_input_6_data_V_U_ack_in),
    .data_out(input_6_TDATA_int),
    .vld_out(input_6_TVALID_int),
    .ack_out(input_6_TREADY_int),
    .apdone_blk(regslice_reverse_input_6_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_7_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_7_TDATA),
    .vld_in(input_7_TVALID),
    .ack_in(regslice_reverse_input_7_data_V_U_ack_in),
    .data_out(input_7_TDATA_int),
    .vld_out(input_7_TVALID_int),
    .ack_out(input_7_TREADY_int),
    .apdone_blk(regslice_reverse_input_7_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_8_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_8_TDATA),
    .vld_in(input_8_TVALID),
    .ack_in(regslice_reverse_input_8_data_V_U_ack_in),
    .data_out(input_8_TDATA_int),
    .vld_out(input_8_TVALID_int),
    .ack_out(input_8_TREADY_int),
    .apdone_blk(regslice_reverse_input_8_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_9_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_9_TDATA),
    .vld_in(input_9_TVALID),
    .ack_in(regslice_reverse_input_9_data_V_U_ack_in),
    .data_out(input_9_TDATA_int),
    .vld_out(input_9_TVALID_int),
    .ack_out(input_9_TREADY_int),
    .apdone_blk(regslice_reverse_input_9_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_10_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_10_TDATA),
    .vld_in(input_10_TVALID),
    .ack_in(regslice_reverse_input_10_data_V_U_ack_in),
    .data_out(input_10_TDATA_int),
    .vld_out(input_10_TVALID_int),
    .ack_out(input_10_TREADY_int),
    .apdone_blk(regslice_reverse_input_10_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_11_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_11_TDATA),
    .vld_in(input_11_TVALID),
    .ack_in(regslice_reverse_input_11_data_V_U_ack_in),
    .data_out(input_11_TDATA_int),
    .vld_out(input_11_TVALID_int),
    .ack_out(input_11_TREADY_int),
    .apdone_blk(regslice_reverse_input_11_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_12_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_12_TDATA),
    .vld_in(input_12_TVALID),
    .ack_in(regslice_reverse_input_12_data_V_U_ack_in),
    .data_out(input_12_TDATA_int),
    .vld_out(input_12_TVALID_int),
    .ack_out(input_12_TREADY_int),
    .apdone_blk(regslice_reverse_input_12_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_13_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_13_TDATA),
    .vld_in(input_13_TVALID),
    .ack_in(regslice_reverse_input_13_data_V_U_ack_in),
    .data_out(input_13_TDATA_int),
    .vld_out(input_13_TVALID_int),
    .ack_out(input_13_TREADY_int),
    .apdone_blk(regslice_reverse_input_13_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_14_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_14_TDATA),
    .vld_in(input_14_TVALID),
    .ack_in(regslice_reverse_input_14_data_V_U_ack_in),
    .data_out(input_14_TDATA_int),
    .vld_out(input_14_TVALID_int),
    .ack_out(input_14_TREADY_int),
    .apdone_blk(regslice_reverse_input_14_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_15_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_15_TDATA),
    .vld_in(input_15_TVALID),
    .ack_in(regslice_reverse_input_15_data_V_U_ack_in),
    .data_out(input_15_TDATA_int),
    .vld_out(input_15_TVALID_int),
    .ack_out(input_15_TREADY_int),
    .apdone_blk(regslice_reverse_input_15_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_0_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_0_TLAST),
    .vld_in(input_0_TVALID),
    .ack_in(regslice_reverse_input_0_last_V_U_ack_in),
    .data_out(input_0_TLAST_int),
    .vld_out(regslice_reverse_input_0_last_V_U_vld_out),
    .ack_out(input_0_TREADY_int),
    .apdone_blk(regslice_reverse_input_0_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_1_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_1_TLAST),
    .vld_in(input_1_TVALID),
    .ack_in(regslice_reverse_input_1_last_V_U_ack_in),
    .data_out(input_1_TLAST_int),
    .vld_out(regslice_reverse_input_1_last_V_U_vld_out),
    .ack_out(input_1_TREADY_int),
    .apdone_blk(regslice_reverse_input_1_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_2_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_2_TLAST),
    .vld_in(input_2_TVALID),
    .ack_in(regslice_reverse_input_2_last_V_U_ack_in),
    .data_out(input_2_TLAST_int),
    .vld_out(regslice_reverse_input_2_last_V_U_vld_out),
    .ack_out(input_2_TREADY_int),
    .apdone_blk(regslice_reverse_input_2_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_3_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_3_TLAST),
    .vld_in(input_3_TVALID),
    .ack_in(regslice_reverse_input_3_last_V_U_ack_in),
    .data_out(input_3_TLAST_int),
    .vld_out(regslice_reverse_input_3_last_V_U_vld_out),
    .ack_out(input_3_TREADY_int),
    .apdone_blk(regslice_reverse_input_3_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_4_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_4_TLAST),
    .vld_in(input_4_TVALID),
    .ack_in(regslice_reverse_input_4_last_V_U_ack_in),
    .data_out(input_4_TLAST_int),
    .vld_out(regslice_reverse_input_4_last_V_U_vld_out),
    .ack_out(input_4_TREADY_int),
    .apdone_blk(regslice_reverse_input_4_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_5_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_5_TLAST),
    .vld_in(input_5_TVALID),
    .ack_in(regslice_reverse_input_5_last_V_U_ack_in),
    .data_out(input_5_TLAST_int),
    .vld_out(regslice_reverse_input_5_last_V_U_vld_out),
    .ack_out(input_5_TREADY_int),
    .apdone_blk(regslice_reverse_input_5_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_6_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_6_TLAST),
    .vld_in(input_6_TVALID),
    .ack_in(regslice_reverse_input_6_last_V_U_ack_in),
    .data_out(input_6_TLAST_int),
    .vld_out(regslice_reverse_input_6_last_V_U_vld_out),
    .ack_out(input_6_TREADY_int),
    .apdone_blk(regslice_reverse_input_6_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_7_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_7_TLAST),
    .vld_in(input_7_TVALID),
    .ack_in(regslice_reverse_input_7_last_V_U_ack_in),
    .data_out(input_7_TLAST_int),
    .vld_out(regslice_reverse_input_7_last_V_U_vld_out),
    .ack_out(input_7_TREADY_int),
    .apdone_blk(regslice_reverse_input_7_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_8_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_8_TLAST),
    .vld_in(input_8_TVALID),
    .ack_in(regslice_reverse_input_8_last_V_U_ack_in),
    .data_out(input_8_TLAST_int),
    .vld_out(regslice_reverse_input_8_last_V_U_vld_out),
    .ack_out(input_8_TREADY_int),
    .apdone_blk(regslice_reverse_input_8_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_9_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_9_TLAST),
    .vld_in(input_9_TVALID),
    .ack_in(regslice_reverse_input_9_last_V_U_ack_in),
    .data_out(input_9_TLAST_int),
    .vld_out(regslice_reverse_input_9_last_V_U_vld_out),
    .ack_out(input_9_TREADY_int),
    .apdone_blk(regslice_reverse_input_9_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_10_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_10_TLAST),
    .vld_in(input_10_TVALID),
    .ack_in(regslice_reverse_input_10_last_V_U_ack_in),
    .data_out(input_10_TLAST_int),
    .vld_out(regslice_reverse_input_10_last_V_U_vld_out),
    .ack_out(input_10_TREADY_int),
    .apdone_blk(regslice_reverse_input_10_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_11_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_11_TLAST),
    .vld_in(input_11_TVALID),
    .ack_in(regslice_reverse_input_11_last_V_U_ack_in),
    .data_out(input_11_TLAST_int),
    .vld_out(regslice_reverse_input_11_last_V_U_vld_out),
    .ack_out(input_11_TREADY_int),
    .apdone_blk(regslice_reverse_input_11_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_12_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_12_TLAST),
    .vld_in(input_12_TVALID),
    .ack_in(regslice_reverse_input_12_last_V_U_ack_in),
    .data_out(input_12_TLAST_int),
    .vld_out(regslice_reverse_input_12_last_V_U_vld_out),
    .ack_out(input_12_TREADY_int),
    .apdone_blk(regslice_reverse_input_12_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_13_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_13_TLAST),
    .vld_in(input_13_TVALID),
    .ack_in(regslice_reverse_input_13_last_V_U_ack_in),
    .data_out(input_13_TLAST_int),
    .vld_out(regslice_reverse_input_13_last_V_U_vld_out),
    .ack_out(input_13_TREADY_int),
    .apdone_blk(regslice_reverse_input_13_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_14_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_14_TLAST),
    .vld_in(input_14_TVALID),
    .ack_in(regslice_reverse_input_14_last_V_U_ack_in),
    .data_out(input_14_TLAST_int),
    .vld_out(regslice_reverse_input_14_last_V_U_vld_out),
    .ack_out(input_14_TREADY_int),
    .apdone_blk(regslice_reverse_input_14_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_15_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_15_TLAST),
    .vld_in(input_15_TVALID),
    .ack_in(regslice_reverse_input_15_last_V_U_ack_in),
    .data_out(input_15_TLAST_int),
    .vld_out(regslice_reverse_input_15_last_V_U_vld_out),
    .ack_out(input_15_TREADY_int),
    .apdone_blk(regslice_reverse_input_15_last_V_U_apdone_blk)
);

regslice_forward #(
    .DataWidth( 512 ))
regslice_forward_output_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int),
    .vld_in(output_r_TVALID_int),
    .ack_in(output_r_TREADY_int),
    .data_out(output_r_TDATA),
    .vld_out(regslice_forward_output_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_data_V_U_apdone_blk)
);

regslice_forward #(
    .DataWidth( 1 ))
regslice_forward_output_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln66_reg_922_pp0_iter4_reg),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_forward_output_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_forward_output_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        A_data_V_load_reg_969 <= A_data_V_q1;
        B_data_V_0_load_reg_974 <= B_data_V_0_q1;
        B_data_V_1_load_reg_979 <= B_data_V_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        B_data_V_0_load_reg_974_pp0_iter4_reg <= B_data_V_0_load_reg_974;
        and_ln49_1_reg_989 <= and_ln49_1_fu_767_p2;
        bwrite_load_reg_880_pp0_iter2_reg <= bwrite_load_reg_880_pp0_iter1_reg;
        bwrite_load_reg_880_pp0_iter3_reg <= bwrite_load_reg_880_pp0_iter2_reg;
        icmp_ln887_reg_943_pp0_iter2_reg <= icmp_ln887_reg_943;
        icmp_ln887_reg_943_pp0_iter3_reg <= icmp_ln887_reg_943_pp0_iter2_reg;
        or_ln49_reg_994 <= or_ln49_fu_772_p2;
        or_ln66_reg_922_pp0_iter2_reg <= or_ln66_reg_922_pp0_iter1_reg;
        or_ln66_reg_922_pp0_iter3_reg <= or_ln66_reg_922_pp0_iter2_reg;
        or_ln66_reg_922_pp0_iter4_reg <= or_ln66_reg_922_pp0_iter3_reg;
        primed_load_reg_932_pp0_iter2_reg <= primed_load_reg_932;
        primed_load_reg_932_pp0_iter3_reg <= primed_load_reg_932_pp0_iter2_reg;
        select_ln49_1_reg_999 <= select_ln49_1_fu_778_p3;
        tmp_4_reg_907_pp0_iter2_reg <= tmp_4_reg_907_pp0_iter1_reg;
        tmp_4_reg_907_pp0_iter3_reg <= tmp_4_reg_907_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        C_data_V_load_reg_984 <= C_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_1_reg_918 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bwrite <= xor_ln68_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bwrite_load_reg_880 <= ap_sig_allocacmp_bwrite_load;
        bwrite_load_reg_880_pp0_iter1_reg <= bwrite_load_reg_880;
        icmp_ln879_1_reg_918 <= icmp_ln879_1_fu_614_p2;
        icmp_ln887_reg_943 <= icmp_ln887_fu_677_p2;
        icmp_ln891_reg_927 <= icmp_ln891_fu_626_p2;
        input_0_data_V_tmp_reg_796 <= input_0_TDATA_int;
        input_10_data_V_tmp_reg_846 <= input_10_TDATA_int;
        input_11_data_V_tmp_reg_851 <= input_11_TDATA_int;
        input_12_data_V_tmp_reg_856 <= input_12_TDATA_int;
        input_13_data_V_tmp_reg_861 <= input_13_TDATA_int;
        input_14_data_V_tmp_reg_866 <= input_14_TDATA_int;
        input_15_data_V_tmp_reg_871 <= input_15_TDATA_int;
        input_1_data_V_tmp_reg_801 <= input_1_TDATA_int;
        input_2_data_V_tmp_reg_806 <= input_2_TDATA_int;
        input_3_data_V_tmp_reg_811 <= input_3_TDATA_int;
        input_4_data_V_tmp_reg_816 <= input_4_TDATA_int;
        input_5_data_V_tmp_reg_821 <= input_5_TDATA_int;
        input_6_data_V_tmp_reg_826 <= input_6_TDATA_int;
        input_7_data_V_tmp_reg_831 <= input_7_TDATA_int;
        input_8_data_V_tmp_reg_836 <= input_8_TDATA_int;
        input_9_data_V_tmp_reg_841 <= input_9_TDATA_int;
        or_ln66_reg_922 <= or_ln66_fu_620_p2;
        or_ln66_reg_922_pp0_iter1_reg <= or_ln66_reg_922;
        primed_load_reg_932 <= primed;
        ret_V_3_reg_949 <= ret_V_3_fu_682_p2;
        ret_V_4_reg_913 <= ret_V_4_fu_602_p2;
        t_V_reg_899 <= ap_sig_allocacmp_t_V;
        tmp_4_reg_907 <= ap_sig_allocacmp_t_V[32'd8];
        tmp_4_reg_907_pp0_iter1_reg <= tmp_4_reg_907;
        trunc_ln791_reg_876 <= trunc_ln791_fu_460_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cycle_V <= add_ln700_1_fu_632_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((primed_load_load_fu_669_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cycleout_V <= add_ln700_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        primed <= or_ln70_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_572_p3 == 1'd1) & (trunc_ln791_fu_460_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ret_V_2_reg_894 <= ret_V_2_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln791_fu_460_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_890 <= cycle_V[32'd8];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_data_V_ce0 = 1'b1;
    end else begin
        A_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        A_data_V_ce1 = 1'b1;
    end else begin
        A_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln791_fu_460_p1 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_data_V_we0 = 1'b1;
    end else begin
        A_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_data_V_0_ce0 = 1'b1;
    end else begin
        B_data_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        B_data_V_0_ce1 = 1'b1;
    end else begin
        B_data_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_510_p3 == 1'd0) & (bwrite_load_load_fu_464_p1 == 1'd0) & (trunc_ln791_fu_460_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_data_V_0_we0 = 1'b1;
    end else begin
        B_data_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_data_V_1_ce0 = 1'b1;
    end else begin
        B_data_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        B_data_V_1_ce1 = 1'b1;
    end else begin
        B_data_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_510_p3 == 1'd0) & (bwrite_load_load_fu_464_p1 == 1'd1) & (trunc_ln791_fu_460_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_data_V_1_we0 = 1'b1;
    end else begin
        B_data_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_data_V_ce0 = 1'b1;
    end else begin
        C_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        C_data_V_ce1 = 1'b1;
    end else begin
        C_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_890 == 1'd1) & (trunc_ln791_reg_876 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_data_V_we0 = 1'b1;
    end else begin
        C_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((icmp_ln879_1_reg_918 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_bwrite_load = xor_ln68_fu_696_p2;
    end else begin
        ap_sig_allocacmp_bwrite_load = bwrite;
    end
end

always @ (*) begin
    if (((primed_load_load_fu_669_p1 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_t_V = add_ln700_fu_707_p2;
    end else begin
        ap_sig_allocacmp_t_V = cycleout_V;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_0_TDATA_blk_n = input_0_TVALID_int;
    end else begin
        input_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_0_TVALID == 1'b1) & (regslice_reverse_input_0_data_V_U_ack_in == 1'b1))) begin
        input_0_TREADY = 1'b1;
    end else begin
        input_0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_TREADY_int = 1'b1;
    end else begin
        input_0_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_10_TDATA_blk_n = input_10_TVALID_int;
    end else begin
        input_10_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_10_data_V_U_ack_in == 1'b1) & (input_10_TVALID == 1'b1))) begin
        input_10_TREADY = 1'b1;
    end else begin
        input_10_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_10_TREADY_int = 1'b1;
    end else begin
        input_10_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_11_TDATA_blk_n = input_11_TVALID_int;
    end else begin
        input_11_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_11_data_V_U_ack_in == 1'b1) & (input_11_TVALID == 1'b1))) begin
        input_11_TREADY = 1'b1;
    end else begin
        input_11_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_11_TREADY_int = 1'b1;
    end else begin
        input_11_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_12_TDATA_blk_n = input_12_TVALID_int;
    end else begin
        input_12_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_12_TVALID == 1'b1) & (regslice_reverse_input_12_data_V_U_ack_in == 1'b1))) begin
        input_12_TREADY = 1'b1;
    end else begin
        input_12_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_12_TREADY_int = 1'b1;
    end else begin
        input_12_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_13_TDATA_blk_n = input_13_TVALID_int;
    end else begin
        input_13_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_13_TVALID == 1'b1) & (regslice_reverse_input_13_data_V_U_ack_in == 1'b1))) begin
        input_13_TREADY = 1'b1;
    end else begin
        input_13_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_13_TREADY_int = 1'b1;
    end else begin
        input_13_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_14_TDATA_blk_n = input_14_TVALID_int;
    end else begin
        input_14_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_14_TVALID == 1'b1) & (regslice_reverse_input_14_data_V_U_ack_in == 1'b1))) begin
        input_14_TREADY = 1'b1;
    end else begin
        input_14_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_14_TREADY_int = 1'b1;
    end else begin
        input_14_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_15_TDATA_blk_n = input_15_TVALID_int;
    end else begin
        input_15_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_15_TVALID == 1'b1) & (regslice_reverse_input_15_data_V_U_ack_in == 1'b1))) begin
        input_15_TREADY = 1'b1;
    end else begin
        input_15_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_15_TREADY_int = 1'b1;
    end else begin
        input_15_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_1_TDATA_blk_n = input_1_TVALID_int;
    end else begin
        input_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_1_data_V_U_ack_in == 1'b1) & (input_1_TVALID == 1'b1))) begin
        input_1_TREADY = 1'b1;
    end else begin
        input_1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_TREADY_int = 1'b1;
    end else begin
        input_1_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_2_TDATA_blk_n = input_2_TVALID_int;
    end else begin
        input_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_2_data_V_U_ack_in == 1'b1) & (input_2_TVALID == 1'b1))) begin
        input_2_TREADY = 1'b1;
    end else begin
        input_2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_TREADY_int = 1'b1;
    end else begin
        input_2_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_3_TDATA_blk_n = input_3_TVALID_int;
    end else begin
        input_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_3_data_V_U_ack_in == 1'b1) & (input_3_TVALID == 1'b1))) begin
        input_3_TREADY = 1'b1;
    end else begin
        input_3_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_TREADY_int = 1'b1;
    end else begin
        input_3_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_4_TDATA_blk_n = input_4_TVALID_int;
    end else begin
        input_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_4_data_V_U_ack_in == 1'b1) & (input_4_TVALID == 1'b1))) begin
        input_4_TREADY = 1'b1;
    end else begin
        input_4_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_4_TREADY_int = 1'b1;
    end else begin
        input_4_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_5_TDATA_blk_n = input_5_TVALID_int;
    end else begin
        input_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_5_data_V_U_ack_in == 1'b1) & (input_5_TVALID == 1'b1))) begin
        input_5_TREADY = 1'b1;
    end else begin
        input_5_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_5_TREADY_int = 1'b1;
    end else begin
        input_5_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_6_TDATA_blk_n = input_6_TVALID_int;
    end else begin
        input_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_6_data_V_U_ack_in == 1'b1) & (input_6_TVALID == 1'b1))) begin
        input_6_TREADY = 1'b1;
    end else begin
        input_6_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_6_TREADY_int = 1'b1;
    end else begin
        input_6_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_7_TDATA_blk_n = input_7_TVALID_int;
    end else begin
        input_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_7_data_V_U_ack_in == 1'b1) & (input_7_TVALID == 1'b1))) begin
        input_7_TREADY = 1'b1;
    end else begin
        input_7_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_7_TREADY_int = 1'b1;
    end else begin
        input_7_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_8_TDATA_blk_n = input_8_TVALID_int;
    end else begin
        input_8_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_8_data_V_U_ack_in == 1'b1) & (input_8_TVALID == 1'b1))) begin
        input_8_TREADY = 1'b1;
    end else begin
        input_8_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_8_TREADY_int = 1'b1;
    end else begin
        input_8_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_9_TDATA_blk_n = input_9_TVALID_int;
    end else begin
        input_9_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_9_data_V_U_ack_in == 1'b1) & (input_9_TVALID == 1'b1))) begin
        input_9_TREADY = 1'b1;
    end else begin
        input_9_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_9_TREADY_int = 1'b1;
    end else begin
        input_9_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_r_TVALID_int = 1'b1;
    end else begin
        output_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_data_V_address0 = zext_ln544_fu_468_p1;

assign A_data_V_address1 = zext_ln544_2_fu_673_p1;

assign A_data_V_d0 = {{{{{{{{{{{{{{{{input_15_TDATA_int}, {input_14_TDATA_int}}, {input_13_TDATA_int}}, {input_12_TDATA_int}}, {input_11_TDATA_int}}, {input_10_TDATA_int}}, {input_9_TDATA_int}}, {input_8_TDATA_int}}, {input_7_TDATA_int}}, {input_6_TDATA_int}}, {input_5_TDATA_int}}, {input_4_TDATA_int}}, {input_3_TDATA_int}}, {input_2_TDATA_int}}, {input_1_TDATA_int}}, {input_0_TDATA_int}};

assign B_data_V_0_address0 = zext_ln544_1_fu_528_p1;

assign B_data_V_0_address1 = zext_ln544_5_fu_690_p1;

assign B_data_V_1_address0 = zext_ln544_1_fu_528_p1;

assign B_data_V_1_address1 = zext_ln544_5_fu_690_p1;

assign C_data_V_address0 = zext_ln544_3_fu_644_p1;

assign C_data_V_address1 = zext_ln544_4_fu_732_p1;

assign C_data_V_d0 = {{{{{{{{{{{{{{{{input_15_data_V_tmp_reg_871}, {input_14_data_V_tmp_reg_866}}, {input_13_data_V_tmp_reg_861}}, {input_12_data_V_tmp_reg_856}}, {input_11_data_V_tmp_reg_851}}, {input_10_data_V_tmp_reg_846}}, {input_9_data_V_tmp_reg_841}}, {input_8_data_V_tmp_reg_836}}, {input_7_data_V_tmp_reg_831}}, {input_6_data_V_tmp_reg_826}}, {input_5_data_V_tmp_reg_821}}, {input_4_data_V_tmp_reg_816}}, {input_3_data_V_tmp_reg_811}}, {input_2_data_V_tmp_reg_806}}, {input_1_data_V_tmp_reg_801}}, {input_0_data_V_tmp_reg_796}};

assign add_ln700_1_fu_632_p2 = (cycle_V + 9'd1);

assign add_ln700_fu_707_p2 = (t_V_reg_899 + 9'd1);

assign and_ln49_1_fu_767_p2 = (bwrite_load_reg_880_pp0_iter3_reg & and_ln49_fu_761_p2);

assign and_ln49_fu_761_p2 = (xor_ln887_1_fu_756_p2 & and_ln887_1_fu_747_p2);

assign and_ln887_1_fu_747_p2 = (tmp_4_reg_907_pp0_iter3_reg & primed_load_reg_932_pp0_iter3_reg);

assign and_ln887_2_fu_751_p2 = (icmp_ln887_reg_943_pp0_iter3_reg & and_ln887_1_fu_747_p2);

assign and_ln887_fu_742_p2 = (xor_ln887_fu_737_p2 & primed_load_reg_932_pp0_iter3_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((regslice_forward_output_data_V_U_apdone_blk == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b1 == 1'b1) & ((input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0) | (input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0) | (input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((output_r_TREADY_int == 1'b0) | (regslice_forward_output_data_V_U_apdone_blk == 1'b1))) | ((output_r_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == 1'b1) & ((input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0) | (input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0) | (input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((output_r_TREADY_int == 1'b0) | (regslice_forward_output_data_V_U_apdone_blk == 1'b1))) | ((output_r_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == 1'b1) & ((input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0) | (input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0) | (input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0) | (input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0) | (input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = (regslice_forward_output_data_V_U_apdone_blk == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bwrite_load_load_fu_464_p1 = ap_sig_allocacmp_bwrite_load;

assign grp_fu_382_p4 = {{cycle_V[8:1]}};

assign icmp_ln879_1_fu_614_p2 = ((cycle_V == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_608_p2 = ((cycle_V == 9'd255) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_677_p2 = ((t_V_reg_899 < 9'd384) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_626_p2 = ((cycle_V > 9'd254) ? 1'b1 : 1'b0);

assign or_ln49_fu_772_p2 = (and_ln887_2_fu_751_p2 | and_ln49_1_fu_767_p2);

assign or_ln66_fu_620_p2 = (icmp_ln879_fu_608_p2 | icmp_ln879_1_fu_614_p2);

assign or_ln70_fu_718_p2 = (primed | icmp_ln891_reg_927);

assign output_r_TDATA_int = ((or_ln49_reg_994[0:0] === 1'b1) ? select_ln49_fu_784_p3 : select_ln49_1_reg_999);

assign output_r_TVALID = regslice_forward_output_data_V_U_vld_out;

assign primed_load_load_fu_669_p1 = primed;

assign ret_V_1_fu_518_p4 = {{cycle_V[7:1]}};

assign ret_V_2_fu_580_p2 = (grp_fu_382_p4 ^ 8'd128);

assign ret_V_3_fu_682_p2 = (t_V_reg_899 ^ 9'd256);

assign ret_V_4_fu_602_p2 = ($signed(zext_ln215_fu_598_p1) + $signed(10'd640));

assign select_ln49_1_fu_778_p3 = ((and_ln887_fu_742_p2[0:0] === 1'b1) ? A_data_V_load_reg_969 : B_data_V_1_load_reg_979);

assign select_ln49_fu_784_p3 = ((and_ln49_1_reg_989[0:0] === 1'b1) ? B_data_V_0_load_reg_974_pp0_iter4_reg : C_data_V_load_reg_984);

assign sext_ln1354_1_fu_687_p1 = $signed(ret_V_4_reg_913);

assign sext_ln1354_fu_729_p1 = $signed(ret_V_3_reg_949);

assign tmp_2_fu_572_p3 = cycle_V[32'd8];

assign tmp_3_fu_534_p17 = {{{{{{{{{{{{{{{{input_15_TDATA_int}, {input_14_TDATA_int}}, {input_13_TDATA_int}}, {input_12_TDATA_int}}, {input_11_TDATA_int}}, {input_10_TDATA_int}}, {input_9_TDATA_int}}, {input_8_TDATA_int}}, {input_7_TDATA_int}}, {input_6_TDATA_int}}, {input_5_TDATA_int}}, {input_4_TDATA_int}}, {input_3_TDATA_int}}, {input_2_TDATA_int}}, {input_1_TDATA_int}}, {input_0_TDATA_int}};

assign tmp_fu_510_p3 = cycle_V[32'd8];

assign trunc_ln791_fu_460_p1 = cycle_V[0:0];

assign xor_ln68_fu_696_p2 = (bwrite_load_reg_880 ^ 1'd1);

assign xor_ln887_1_fu_756_p2 = (icmp_ln887_reg_943_pp0_iter3_reg ^ 1'd1);

assign xor_ln887_fu_737_p2 = (tmp_4_reg_907_pp0_iter3_reg ^ 1'd1);

assign zext_ln215_fu_598_p1 = ap_sig_allocacmp_t_V;

assign zext_ln544_1_fu_528_p1 = ret_V_1_fu_518_p4;

assign zext_ln544_2_fu_673_p1 = t_V_reg_899;

assign zext_ln544_3_fu_644_p1 = ret_V_2_reg_894;

assign zext_ln544_4_fu_732_p1 = $unsigned(sext_ln1354_fu_729_p1);

assign zext_ln544_5_fu_690_p1 = $unsigned(sext_ln1354_1_fu_687_p1);

assign zext_ln544_fu_468_p1 = grp_fu_382_p4;

endmodule //fir_to_fft
