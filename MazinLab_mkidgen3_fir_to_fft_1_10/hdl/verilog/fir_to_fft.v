// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_to_fft,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.563000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=2858,HLS_SYN_LUT=1062,HLS_VERSION=2019_2_1}" *)

module fir_to_fft (
        ap_clk,
        ap_rst_n,
        input_0_TDATA,
        input_0_TVALID,
        input_0_TREADY,
        input_1_TDATA,
        input_1_TVALID,
        input_1_TREADY,
        input_2_TDATA,
        input_2_TVALID,
        input_2_TREADY,
        input_3_TDATA,
        input_3_TVALID,
        input_3_TREADY,
        input_4_TDATA,
        input_4_TVALID,
        input_4_TREADY,
        input_5_TDATA,
        input_5_TVALID,
        input_5_TREADY,
        input_6_TDATA,
        input_6_TVALID,
        input_6_TREADY,
        input_7_TDATA,
        input_7_TVALID,
        input_7_TREADY,
        input_8_TDATA,
        input_8_TVALID,
        input_8_TREADY,
        input_9_TDATA,
        input_9_TVALID,
        input_9_TREADY,
        input_10_TDATA,
        input_10_TVALID,
        input_10_TREADY,
        input_11_TDATA,
        input_11_TVALID,
        input_11_TREADY,
        input_12_TDATA,
        input_12_TVALID,
        input_12_TREADY,
        input_13_TDATA,
        input_13_TVALID,
        input_13_TREADY,
        input_14_TDATA,
        input_14_TVALID,
        input_14_TREADY,
        input_15_TDATA,
        input_15_TVALID,
        input_15_TREADY,
        input_0_TLAST,
        input_1_TLAST,
        input_2_TLAST,
        input_3_TLAST,
        input_4_TLAST,
        input_5_TLAST,
        input_6_TLAST,
        input_7_TLAST,
        input_8_TLAST,
        input_9_TLAST,
        input_10_TLAST,
        input_11_TLAST,
        input_12_TLAST,
        input_13_TLAST,
        input_14_TLAST,
        input_15_TLAST,
        output_0_TDATA,
        output_0_TVALID,
        output_0_TREADY,
        output_1_TDATA,
        output_1_TVALID,
        output_1_TREADY,
        output_2_TDATA,
        output_2_TVALID,
        output_2_TREADY,
        output_3_TDATA,
        output_3_TVALID,
        output_3_TREADY,
        output_4_TDATA,
        output_4_TVALID,
        output_4_TREADY,
        output_5_TDATA,
        output_5_TVALID,
        output_5_TREADY,
        output_6_TDATA,
        output_6_TVALID,
        output_6_TREADY,
        output_7_TDATA,
        output_7_TVALID,
        output_7_TREADY,
        output_8_TDATA,
        output_8_TVALID,
        output_8_TREADY,
        output_9_TDATA,
        output_9_TVALID,
        output_9_TREADY,
        output_10_TDATA,
        output_10_TVALID,
        output_10_TREADY,
        output_11_TDATA,
        output_11_TVALID,
        output_11_TREADY,
        output_12_TDATA,
        output_12_TVALID,
        output_12_TREADY,
        output_13_TDATA,
        output_13_TVALID,
        output_13_TREADY,
        output_14_TDATA,
        output_14_TVALID,
        output_14_TREADY,
        output_15_TDATA,
        output_15_TVALID,
        output_15_TREADY,
        output_0_TLAST,
        output_1_TLAST,
        output_2_TLAST,
        output_3_TLAST,
        output_4_TLAST,
        output_5_TLAST,
        output_6_TLAST,
        output_7_TLAST,
        output_8_TLAST,
        output_9_TLAST,
        output_10_TLAST,
        output_11_TLAST,
        output_12_TLAST,
        output_13_TLAST,
        output_14_TLAST,
        output_15_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_0_TDATA;
input   input_0_TVALID;
output   input_0_TREADY;
input  [31:0] input_1_TDATA;
input   input_1_TVALID;
output   input_1_TREADY;
input  [31:0] input_2_TDATA;
input   input_2_TVALID;
output   input_2_TREADY;
input  [31:0] input_3_TDATA;
input   input_3_TVALID;
output   input_3_TREADY;
input  [31:0] input_4_TDATA;
input   input_4_TVALID;
output   input_4_TREADY;
input  [31:0] input_5_TDATA;
input   input_5_TVALID;
output   input_5_TREADY;
input  [31:0] input_6_TDATA;
input   input_6_TVALID;
output   input_6_TREADY;
input  [31:0] input_7_TDATA;
input   input_7_TVALID;
output   input_7_TREADY;
input  [31:0] input_8_TDATA;
input   input_8_TVALID;
output   input_8_TREADY;
input  [31:0] input_9_TDATA;
input   input_9_TVALID;
output   input_9_TREADY;
input  [31:0] input_10_TDATA;
input   input_10_TVALID;
output   input_10_TREADY;
input  [31:0] input_11_TDATA;
input   input_11_TVALID;
output   input_11_TREADY;
input  [31:0] input_12_TDATA;
input   input_12_TVALID;
output   input_12_TREADY;
input  [31:0] input_13_TDATA;
input   input_13_TVALID;
output   input_13_TREADY;
input  [31:0] input_14_TDATA;
input   input_14_TVALID;
output   input_14_TREADY;
input  [31:0] input_15_TDATA;
input   input_15_TVALID;
output   input_15_TREADY;
input  [0:0] input_0_TLAST;
input  [0:0] input_1_TLAST;
input  [0:0] input_2_TLAST;
input  [0:0] input_3_TLAST;
input  [0:0] input_4_TLAST;
input  [0:0] input_5_TLAST;
input  [0:0] input_6_TLAST;
input  [0:0] input_7_TLAST;
input  [0:0] input_8_TLAST;
input  [0:0] input_9_TLAST;
input  [0:0] input_10_TLAST;
input  [0:0] input_11_TLAST;
input  [0:0] input_12_TLAST;
input  [0:0] input_13_TLAST;
input  [0:0] input_14_TLAST;
input  [0:0] input_15_TLAST;
output  [31:0] output_0_TDATA;
output   output_0_TVALID;
input   output_0_TREADY;
output  [31:0] output_1_TDATA;
output   output_1_TVALID;
input   output_1_TREADY;
output  [31:0] output_2_TDATA;
output   output_2_TVALID;
input   output_2_TREADY;
output  [31:0] output_3_TDATA;
output   output_3_TVALID;
input   output_3_TREADY;
output  [31:0] output_4_TDATA;
output   output_4_TVALID;
input   output_4_TREADY;
output  [31:0] output_5_TDATA;
output   output_5_TVALID;
input   output_5_TREADY;
output  [31:0] output_6_TDATA;
output   output_6_TVALID;
input   output_6_TREADY;
output  [31:0] output_7_TDATA;
output   output_7_TVALID;
input   output_7_TREADY;
output  [31:0] output_8_TDATA;
output   output_8_TVALID;
input   output_8_TREADY;
output  [31:0] output_9_TDATA;
output   output_9_TVALID;
input   output_9_TREADY;
output  [31:0] output_10_TDATA;
output   output_10_TVALID;
input   output_10_TREADY;
output  [31:0] output_11_TDATA;
output   output_11_TVALID;
input   output_11_TREADY;
output  [31:0] output_12_TDATA;
output   output_12_TVALID;
input   output_12_TREADY;
output  [31:0] output_13_TDATA;
output   output_13_TVALID;
input   output_13_TREADY;
output  [31:0] output_14_TDATA;
output   output_14_TVALID;
input   output_14_TREADY;
output  [31:0] output_15_TDATA;
output   output_15_TVALID;
input   output_15_TREADY;
output  [0:0] output_0_TLAST;
output  [0:0] output_1_TLAST;
output  [0:0] output_2_TLAST;
output  [0:0] output_3_TLAST;
output  [0:0] output_4_TLAST;
output  [0:0] output_5_TLAST;
output  [0:0] output_6_TLAST;
output  [0:0] output_7_TLAST;
output  [0:0] output_8_TLAST;
output  [0:0] output_9_TLAST;
output  [0:0] output_10_TLAST;
output  [0:0] output_11_TLAST;
output  [0:0] output_12_TLAST;
output  [0:0] output_13_TLAST;
output  [0:0] output_14_TLAST;
output  [0:0] output_15_TLAST;

reg input_0_TREADY;
reg input_1_TREADY;
reg input_2_TREADY;
reg input_3_TREADY;
reg input_4_TREADY;
reg input_5_TREADY;
reg input_6_TREADY;
reg input_7_TREADY;
reg input_8_TREADY;
reg input_9_TREADY;
reg input_10_TREADY;
reg input_11_TREADY;
reg input_12_TREADY;
reg input_13_TREADY;
reg input_14_TREADY;
reg input_15_TREADY;

 reg    ap_rst_n_inv;
reg   [8:0] cycle_V;
reg   [0:0] bwrite;
reg   [8:0] cycleout_V;
wire   [8:0] buffer_data_V_0_address0;
reg    buffer_data_V_0_ce0;
reg    buffer_data_V_0_we0;
wire   [8:0] buffer_data_V_0_address1;
reg    buffer_data_V_0_ce1;
wire   [511:0] buffer_data_V_0_q1;
wire   [8:0] buffer_data_V_1_address0;
reg    buffer_data_V_1_ce0;
reg    buffer_data_V_1_we0;
wire   [8:0] buffer_data_V_1_address1;
reg    buffer_data_V_1_ce1;
wire   [511:0] buffer_data_V_1_q1;
reg   [0:0] primed;
reg    input_0_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    input_1_TDATA_blk_n;
reg    input_2_TDATA_blk_n;
reg    input_3_TDATA_blk_n;
reg    input_4_TDATA_blk_n;
reg    input_5_TDATA_blk_n;
reg    input_6_TDATA_blk_n;
reg    input_7_TDATA_blk_n;
reg    input_8_TDATA_blk_n;
reg    input_9_TDATA_blk_n;
reg    input_10_TDATA_blk_n;
reg    input_11_TDATA_blk_n;
reg    input_12_TDATA_blk_n;
reg    input_13_TDATA_blk_n;
reg    input_14_TDATA_blk_n;
reg    input_15_TDATA_blk_n;
reg    output_0_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    output_1_TDATA_blk_n;
reg    output_2_TDATA_blk_n;
reg    output_3_TDATA_blk_n;
reg    output_4_TDATA_blk_n;
reg    output_5_TDATA_blk_n;
reg    output_6_TDATA_blk_n;
reg    output_7_TDATA_blk_n;
reg    output_8_TDATA_blk_n;
reg    output_9_TDATA_blk_n;
reg    output_10_TDATA_blk_n;
reg    output_11_TDATA_blk_n;
reg    output_12_TDATA_blk_n;
reg    output_13_TDATA_blk_n;
reg    output_14_TDATA_blk_n;
reg    output_15_TDATA_blk_n;
reg   [31:0] input_0_data_V_tmp_reg_1029;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state6_io;
wire    regslice_both_output_0_data_V_U_apdone_blk;
wire    regslice_both_output_1_data_V_U_apdone_blk;
wire    regslice_both_output_2_data_V_U_apdone_blk;
wire    regslice_both_output_3_data_V_U_apdone_blk;
wire    regslice_both_output_4_data_V_U_apdone_blk;
wire    regslice_both_output_5_data_V_U_apdone_blk;
wire    regslice_both_output_6_data_V_U_apdone_blk;
wire    regslice_both_output_7_data_V_U_apdone_blk;
wire    regslice_both_output_8_data_V_U_apdone_blk;
wire    regslice_both_output_9_data_V_U_apdone_blk;
wire    regslice_both_output_10_data_V_U_apdone_blk;
wire    regslice_both_output_11_data_V_U_apdone_blk;
wire    regslice_both_output_12_data_V_U_apdone_blk;
wire    regslice_both_output_13_data_V_U_apdone_blk;
wire    regslice_both_output_14_data_V_U_apdone_blk;
wire    regslice_both_output_15_data_V_U_apdone_blk;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] input_1_data_V_tmp_reg_1034;
reg   [31:0] input_2_data_V_tmp_reg_1039;
reg   [31:0] input_3_data_V_tmp_reg_1044;
reg   [31:0] input_4_data_V_tmp_reg_1049;
reg   [31:0] input_5_data_V_tmp_reg_1054;
reg   [31:0] input_6_data_V_tmp_reg_1059;
reg   [31:0] input_7_data_V_tmp_reg_1064;
reg   [31:0] input_8_data_V_tmp_reg_1069;
reg   [31:0] input_9_data_V_tmp_reg_1074;
reg   [31:0] input_10_data_V_tmp_reg_1079;
reg   [31:0] input_11_data_V_tmp_reg_1084;
reg   [31:0] input_12_data_V_tmp_reg_1089;
reg   [31:0] input_13_data_V_tmp_reg_1094;
reg   [31:0] input_14_data_V_tmp_reg_1099;
reg   [31:0] input_15_data_V_tmp_reg_1104;
wire   [10:0] ndx_fu_738_p2;
reg   [10:0] ndx_reg_1109;
wire   [0:0] icmp_ln879_1_fu_750_p2;
reg   [0:0] icmp_ln879_1_reg_1114;
reg   [0:0] icmp_ln879_1_reg_1114_pp0_iter1_reg;
wire   [0:0] or_ln68_fu_756_p2;
reg   [0:0] or_ln68_reg_1118;
reg   [0:0] or_ln68_reg_1118_pp0_iter1_reg;
reg   [0:0] or_ln68_reg_1118_pp0_iter2_reg;
reg   [0:0] or_ln68_reg_1118_pp0_iter3_reg;
reg   [0:0] or_ln68_reg_1118_pp0_iter4_reg;
reg   [0:0] primed_load_reg_1138;
reg   [0:0] primed_load_reg_1138_pp0_iter1_reg;
wire   [0:0] bwrite_load_load_fu_795_p1;
reg   [0:0] bwrite_load_reg_1142;
reg   [0:0] bwrite_load_reg_1142_pp0_iter2_reg;
reg   [0:0] bwrite_load_reg_1142_pp0_iter3_reg;
reg   [0:0] bwrite_load_reg_1142_pp0_iter4_reg;
reg   [511:0] buffer_data_V_0_load_reg_1158;
reg    ap_enable_reg_pp0_iter4;
reg   [511:0] buffer_data_V_1_load_reg_1163;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire  signed [63:0] sext_ln63_fu_790_p1;
wire   [63:0] zext_ln544_fu_825_p1;
wire   [8:0] add_ln700_1_fu_778_p2;
wire   [0:0] xor_ln64_fu_831_p2;
reg   [0:0] ap_sig_allocacmp_bwrite_load;
wire   [8:0] add_ln700_fu_842_p2;
wire   [0:0] or_ln73_fu_766_p2;
reg    ap_block_pp0_stage0_01001;
wire   [511:0] tmp_fu_799_p17;
wire   [0:0] tmp_1_fu_666_p3;
wire   [7:0] and_ln_fu_674_p3;
wire   [8:0] zext_ln62_fu_682_p1;
wire   [8:0] xor_ln62_fu_690_p2;
wire   [9:0] zext_ln62_2_fu_696_p1;
wire   [9:0] zext_ln62_1_fu_686_p1;
wire   [0:0] trunc_ln1371_fu_662_p1;
wire   [9:0] sub_ln62_fu_700_p2;
wire   [9:0] select_ln62_fu_706_p3;
wire   [9:0] and_ln62_fu_714_p2;
wire   [7:0] tmp_2_fu_724_p4;
wire  signed [10:0] sext_ln1467_fu_720_p1;
wire   [10:0] zext_ln62_3_fu_734_p1;
wire   [0:0] icmp_ln879_fu_744_p2;
wire   [511:0] select_ln63_fu_854_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_input_0_data_V_U_apdone_blk;
wire   [31:0] input_0_TDATA_int;
wire    input_0_TVALID_int;
reg    input_0_TREADY_int;
wire    regslice_both_input_0_data_V_U_ack_in;
wire    regslice_both_input_1_data_V_U_apdone_blk;
wire   [31:0] input_1_TDATA_int;
wire    input_1_TVALID_int;
reg    input_1_TREADY_int;
wire    regslice_both_input_1_data_V_U_ack_in;
wire    regslice_both_input_2_data_V_U_apdone_blk;
wire   [31:0] input_2_TDATA_int;
wire    input_2_TVALID_int;
reg    input_2_TREADY_int;
wire    regslice_both_input_2_data_V_U_ack_in;
wire    regslice_both_input_3_data_V_U_apdone_blk;
wire   [31:0] input_3_TDATA_int;
wire    input_3_TVALID_int;
reg    input_3_TREADY_int;
wire    regslice_both_input_3_data_V_U_ack_in;
wire    regslice_both_input_4_data_V_U_apdone_blk;
wire   [31:0] input_4_TDATA_int;
wire    input_4_TVALID_int;
reg    input_4_TREADY_int;
wire    regslice_both_input_4_data_V_U_ack_in;
wire    regslice_both_input_5_data_V_U_apdone_blk;
wire   [31:0] input_5_TDATA_int;
wire    input_5_TVALID_int;
reg    input_5_TREADY_int;
wire    regslice_both_input_5_data_V_U_ack_in;
wire    regslice_both_input_6_data_V_U_apdone_blk;
wire   [31:0] input_6_TDATA_int;
wire    input_6_TVALID_int;
reg    input_6_TREADY_int;
wire    regslice_both_input_6_data_V_U_ack_in;
wire    regslice_both_input_7_data_V_U_apdone_blk;
wire   [31:0] input_7_TDATA_int;
wire    input_7_TVALID_int;
reg    input_7_TREADY_int;
wire    regslice_both_input_7_data_V_U_ack_in;
wire    regslice_both_input_8_data_V_U_apdone_blk;
wire   [31:0] input_8_TDATA_int;
wire    input_8_TVALID_int;
reg    input_8_TREADY_int;
wire    regslice_both_input_8_data_V_U_ack_in;
wire    regslice_both_input_9_data_V_U_apdone_blk;
wire   [31:0] input_9_TDATA_int;
wire    input_9_TVALID_int;
reg    input_9_TREADY_int;
wire    regslice_both_input_9_data_V_U_ack_in;
wire    regslice_both_input_10_data_V_U_apdone_blk;
wire   [31:0] input_10_TDATA_int;
wire    input_10_TVALID_int;
reg    input_10_TREADY_int;
wire    regslice_both_input_10_data_V_U_ack_in;
wire    regslice_both_input_11_data_V_U_apdone_blk;
wire   [31:0] input_11_TDATA_int;
wire    input_11_TVALID_int;
reg    input_11_TREADY_int;
wire    regslice_both_input_11_data_V_U_ack_in;
wire    regslice_both_input_12_data_V_U_apdone_blk;
wire   [31:0] input_12_TDATA_int;
wire    input_12_TVALID_int;
reg    input_12_TREADY_int;
wire    regslice_both_input_12_data_V_U_ack_in;
wire    regslice_both_input_13_data_V_U_apdone_blk;
wire   [31:0] input_13_TDATA_int;
wire    input_13_TVALID_int;
reg    input_13_TREADY_int;
wire    regslice_both_input_13_data_V_U_ack_in;
wire    regslice_both_input_14_data_V_U_apdone_blk;
wire   [31:0] input_14_TDATA_int;
wire    input_14_TVALID_int;
reg    input_14_TREADY_int;
wire    regslice_both_input_14_data_V_U_ack_in;
wire    regslice_both_input_15_data_V_U_apdone_blk;
wire   [31:0] input_15_TDATA_int;
wire    input_15_TVALID_int;
reg    input_15_TREADY_int;
wire    regslice_both_input_15_data_V_U_ack_in;
wire    regslice_both_input_0_last_V_U_apdone_blk;
wire   [0:0] input_0_TLAST_int;
wire    regslice_both_input_0_last_V_U_vld_out;
wire    regslice_both_input_0_last_V_U_ack_in;
wire    regslice_both_input_1_last_V_U_apdone_blk;
wire   [0:0] input_1_TLAST_int;
wire    regslice_both_input_1_last_V_U_vld_out;
wire    regslice_both_input_1_last_V_U_ack_in;
wire    regslice_both_input_2_last_V_U_apdone_blk;
wire   [0:0] input_2_TLAST_int;
wire    regslice_both_input_2_last_V_U_vld_out;
wire    regslice_both_input_2_last_V_U_ack_in;
wire    regslice_both_input_3_last_V_U_apdone_blk;
wire   [0:0] input_3_TLAST_int;
wire    regslice_both_input_3_last_V_U_vld_out;
wire    regslice_both_input_3_last_V_U_ack_in;
wire    regslice_both_input_4_last_V_U_apdone_blk;
wire   [0:0] input_4_TLAST_int;
wire    regslice_both_input_4_last_V_U_vld_out;
wire    regslice_both_input_4_last_V_U_ack_in;
wire    regslice_both_input_5_last_V_U_apdone_blk;
wire   [0:0] input_5_TLAST_int;
wire    regslice_both_input_5_last_V_U_vld_out;
wire    regslice_both_input_5_last_V_U_ack_in;
wire    regslice_both_input_6_last_V_U_apdone_blk;
wire   [0:0] input_6_TLAST_int;
wire    regslice_both_input_6_last_V_U_vld_out;
wire    regslice_both_input_6_last_V_U_ack_in;
wire    regslice_both_input_7_last_V_U_apdone_blk;
wire   [0:0] input_7_TLAST_int;
wire    regslice_both_input_7_last_V_U_vld_out;
wire    regslice_both_input_7_last_V_U_ack_in;
wire    regslice_both_input_8_last_V_U_apdone_blk;
wire   [0:0] input_8_TLAST_int;
wire    regslice_both_input_8_last_V_U_vld_out;
wire    regslice_both_input_8_last_V_U_ack_in;
wire    regslice_both_input_9_last_V_U_apdone_blk;
wire   [0:0] input_9_TLAST_int;
wire    regslice_both_input_9_last_V_U_vld_out;
wire    regslice_both_input_9_last_V_U_ack_in;
wire    regslice_both_input_10_last_V_U_apdone_blk;
wire   [0:0] input_10_TLAST_int;
wire    regslice_both_input_10_last_V_U_vld_out;
wire    regslice_both_input_10_last_V_U_ack_in;
wire    regslice_both_input_11_last_V_U_apdone_blk;
wire   [0:0] input_11_TLAST_int;
wire    regslice_both_input_11_last_V_U_vld_out;
wire    regslice_both_input_11_last_V_U_ack_in;
wire    regslice_both_input_12_last_V_U_apdone_blk;
wire   [0:0] input_12_TLAST_int;
wire    regslice_both_input_12_last_V_U_vld_out;
wire    regslice_both_input_12_last_V_U_ack_in;
wire    regslice_both_input_13_last_V_U_apdone_blk;
wire   [0:0] input_13_TLAST_int;
wire    regslice_both_input_13_last_V_U_vld_out;
wire    regslice_both_input_13_last_V_U_ack_in;
wire    regslice_both_input_14_last_V_U_apdone_blk;
wire   [0:0] input_14_TLAST_int;
wire    regslice_both_input_14_last_V_U_vld_out;
wire    regslice_both_input_14_last_V_U_ack_in;
wire    regslice_both_input_15_last_V_U_apdone_blk;
wire   [0:0] input_15_TLAST_int;
wire    regslice_both_input_15_last_V_U_vld_out;
wire    regslice_both_input_15_last_V_U_ack_in;
wire   [31:0] output_0_TDATA_int;
reg    output_0_TVALID_int;
wire    output_0_TREADY_int;
wire    regslice_both_output_0_data_V_U_vld_out;
wire   [31:0] output_1_TDATA_int;
reg    output_1_TVALID_int;
wire    output_1_TREADY_int;
wire    regslice_both_output_1_data_V_U_vld_out;
wire   [31:0] output_2_TDATA_int;
reg    output_2_TVALID_int;
wire    output_2_TREADY_int;
wire    regslice_both_output_2_data_V_U_vld_out;
wire   [31:0] output_3_TDATA_int;
reg    output_3_TVALID_int;
wire    output_3_TREADY_int;
wire    regslice_both_output_3_data_V_U_vld_out;
wire   [31:0] output_4_TDATA_int;
reg    output_4_TVALID_int;
wire    output_4_TREADY_int;
wire    regslice_both_output_4_data_V_U_vld_out;
wire   [31:0] output_5_TDATA_int;
reg    output_5_TVALID_int;
wire    output_5_TREADY_int;
wire    regslice_both_output_5_data_V_U_vld_out;
wire   [31:0] output_6_TDATA_int;
reg    output_6_TVALID_int;
wire    output_6_TREADY_int;
wire    regslice_both_output_6_data_V_U_vld_out;
wire   [31:0] output_7_TDATA_int;
reg    output_7_TVALID_int;
wire    output_7_TREADY_int;
wire    regslice_both_output_7_data_V_U_vld_out;
wire   [31:0] output_8_TDATA_int;
reg    output_8_TVALID_int;
wire    output_8_TREADY_int;
wire    regslice_both_output_8_data_V_U_vld_out;
wire   [31:0] output_9_TDATA_int;
reg    output_9_TVALID_int;
wire    output_9_TREADY_int;
wire    regslice_both_output_9_data_V_U_vld_out;
wire   [31:0] output_10_TDATA_int;
reg    output_10_TVALID_int;
wire    output_10_TREADY_int;
wire    regslice_both_output_10_data_V_U_vld_out;
wire   [31:0] output_11_TDATA_int;
reg    output_11_TVALID_int;
wire    output_11_TREADY_int;
wire    regslice_both_output_11_data_V_U_vld_out;
wire   [31:0] output_12_TDATA_int;
reg    output_12_TVALID_int;
wire    output_12_TREADY_int;
wire    regslice_both_output_12_data_V_U_vld_out;
wire   [31:0] output_13_TDATA_int;
reg    output_13_TVALID_int;
wire    output_13_TREADY_int;
wire    regslice_both_output_13_data_V_U_vld_out;
wire   [31:0] output_14_TDATA_int;
reg    output_14_TVALID_int;
wire    output_14_TREADY_int;
wire    regslice_both_output_14_data_V_U_vld_out;
wire   [31:0] output_15_TDATA_int;
reg    output_15_TVALID_int;
wire    output_15_TREADY_int;
wire    regslice_both_output_15_data_V_U_vld_out;
wire    regslice_both_output_0_last_V_U_apdone_blk;
wire    regslice_both_output_0_last_V_U_ack_in_dummy;
wire    regslice_both_output_0_last_V_U_vld_out;
wire    regslice_both_output_1_last_V_U_apdone_blk;
wire    regslice_both_output_1_last_V_U_ack_in_dummy;
wire    regslice_both_output_1_last_V_U_vld_out;
wire    regslice_both_output_2_last_V_U_apdone_blk;
wire    regslice_both_output_2_last_V_U_ack_in_dummy;
wire    regslice_both_output_2_last_V_U_vld_out;
wire    regslice_both_output_3_last_V_U_apdone_blk;
wire    regslice_both_output_3_last_V_U_ack_in_dummy;
wire    regslice_both_output_3_last_V_U_vld_out;
wire    regslice_both_output_4_last_V_U_apdone_blk;
wire    regslice_both_output_4_last_V_U_ack_in_dummy;
wire    regslice_both_output_4_last_V_U_vld_out;
wire    regslice_both_output_5_last_V_U_apdone_blk;
wire    regslice_both_output_5_last_V_U_ack_in_dummy;
wire    regslice_both_output_5_last_V_U_vld_out;
wire    regslice_both_output_6_last_V_U_apdone_blk;
wire    regslice_both_output_6_last_V_U_ack_in_dummy;
wire    regslice_both_output_6_last_V_U_vld_out;
wire    regslice_both_output_7_last_V_U_apdone_blk;
wire    regslice_both_output_7_last_V_U_ack_in_dummy;
wire    regslice_both_output_7_last_V_U_vld_out;
wire    regslice_both_output_8_last_V_U_apdone_blk;
wire    regslice_both_output_8_last_V_U_ack_in_dummy;
wire    regslice_both_output_8_last_V_U_vld_out;
wire    regslice_both_output_9_last_V_U_apdone_blk;
wire    regslice_both_output_9_last_V_U_ack_in_dummy;
wire    regslice_both_output_9_last_V_U_vld_out;
wire    regslice_both_output_10_last_V_U_apdone_blk;
wire    regslice_both_output_10_last_V_U_ack_in_dummy;
wire    regslice_both_output_10_last_V_U_vld_out;
wire    regslice_both_output_11_last_V_U_apdone_blk;
wire    regslice_both_output_11_last_V_U_ack_in_dummy;
wire    regslice_both_output_11_last_V_U_vld_out;
wire    regslice_both_output_12_last_V_U_apdone_blk;
wire    regslice_both_output_12_last_V_U_ack_in_dummy;
wire    regslice_both_output_12_last_V_U_vld_out;
wire    regslice_both_output_13_last_V_U_apdone_blk;
wire    regslice_both_output_13_last_V_U_ack_in_dummy;
wire    regslice_both_output_13_last_V_U_vld_out;
wire    regslice_both_output_14_last_V_U_apdone_blk;
wire    regslice_both_output_14_last_V_U_ack_in_dummy;
wire    regslice_both_output_14_last_V_U_vld_out;
wire    regslice_both_output_15_last_V_U_apdone_blk;
wire    regslice_both_output_15_last_V_U_ack_in_dummy;
wire    regslice_both_output_15_last_V_U_vld_out;

// power-on initialization
initial begin
#0 cycle_V = 9'd0;
#0 bwrite = 1'd0;
#0 cycleout_V = 9'd0;
#0 primed = 1'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

fir_to_fft_bufferbkb #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_data_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_data_V_0_address0),
    .ce0(buffer_data_V_0_ce0),
    .we0(buffer_data_V_0_we0),
    .d0(tmp_fu_799_p17),
    .address1(buffer_data_V_0_address1),
    .ce1(buffer_data_V_0_ce1),
    .q1(buffer_data_V_0_q1)
);

fir_to_fft_bufferbkb #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_data_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_data_V_1_address0),
    .ce0(buffer_data_V_1_ce0),
    .we0(buffer_data_V_1_we0),
    .d0(tmp_fu_799_p17),
    .address1(buffer_data_V_1_address1),
    .ce1(buffer_data_V_1_ce1),
    .q1(buffer_data_V_1_q1)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_0_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_0_TDATA),
    .vld_in(input_0_TVALID),
    .ack_in(regslice_both_input_0_data_V_U_ack_in),
    .data_out(input_0_TDATA_int),
    .vld_out(input_0_TVALID_int),
    .ack_out(input_0_TREADY_int),
    .apdone_blk(regslice_both_input_0_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_1_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_1_TDATA),
    .vld_in(input_1_TVALID),
    .ack_in(regslice_both_input_1_data_V_U_ack_in),
    .data_out(input_1_TDATA_int),
    .vld_out(input_1_TVALID_int),
    .ack_out(input_1_TREADY_int),
    .apdone_blk(regslice_both_input_1_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_2_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_2_TDATA),
    .vld_in(input_2_TVALID),
    .ack_in(regslice_both_input_2_data_V_U_ack_in),
    .data_out(input_2_TDATA_int),
    .vld_out(input_2_TVALID_int),
    .ack_out(input_2_TREADY_int),
    .apdone_blk(regslice_both_input_2_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_3_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_3_TDATA),
    .vld_in(input_3_TVALID),
    .ack_in(regslice_both_input_3_data_V_U_ack_in),
    .data_out(input_3_TDATA_int),
    .vld_out(input_3_TVALID_int),
    .ack_out(input_3_TREADY_int),
    .apdone_blk(regslice_both_input_3_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_4_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_4_TDATA),
    .vld_in(input_4_TVALID),
    .ack_in(regslice_both_input_4_data_V_U_ack_in),
    .data_out(input_4_TDATA_int),
    .vld_out(input_4_TVALID_int),
    .ack_out(input_4_TREADY_int),
    .apdone_blk(regslice_both_input_4_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_5_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_5_TDATA),
    .vld_in(input_5_TVALID),
    .ack_in(regslice_both_input_5_data_V_U_ack_in),
    .data_out(input_5_TDATA_int),
    .vld_out(input_5_TVALID_int),
    .ack_out(input_5_TREADY_int),
    .apdone_blk(regslice_both_input_5_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_6_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_6_TDATA),
    .vld_in(input_6_TVALID),
    .ack_in(regslice_both_input_6_data_V_U_ack_in),
    .data_out(input_6_TDATA_int),
    .vld_out(input_6_TVALID_int),
    .ack_out(input_6_TREADY_int),
    .apdone_blk(regslice_both_input_6_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_7_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_7_TDATA),
    .vld_in(input_7_TVALID),
    .ack_in(regslice_both_input_7_data_V_U_ack_in),
    .data_out(input_7_TDATA_int),
    .vld_out(input_7_TVALID_int),
    .ack_out(input_7_TREADY_int),
    .apdone_blk(regslice_both_input_7_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_8_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_8_TDATA),
    .vld_in(input_8_TVALID),
    .ack_in(regslice_both_input_8_data_V_U_ack_in),
    .data_out(input_8_TDATA_int),
    .vld_out(input_8_TVALID_int),
    .ack_out(input_8_TREADY_int),
    .apdone_blk(regslice_both_input_8_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_9_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_9_TDATA),
    .vld_in(input_9_TVALID),
    .ack_in(regslice_both_input_9_data_V_U_ack_in),
    .data_out(input_9_TDATA_int),
    .vld_out(input_9_TVALID_int),
    .ack_out(input_9_TREADY_int),
    .apdone_blk(regslice_both_input_9_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_10_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_10_TDATA),
    .vld_in(input_10_TVALID),
    .ack_in(regslice_both_input_10_data_V_U_ack_in),
    .data_out(input_10_TDATA_int),
    .vld_out(input_10_TVALID_int),
    .ack_out(input_10_TREADY_int),
    .apdone_blk(regslice_both_input_10_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_11_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_11_TDATA),
    .vld_in(input_11_TVALID),
    .ack_in(regslice_both_input_11_data_V_U_ack_in),
    .data_out(input_11_TDATA_int),
    .vld_out(input_11_TVALID_int),
    .ack_out(input_11_TREADY_int),
    .apdone_blk(regslice_both_input_11_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_12_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_12_TDATA),
    .vld_in(input_12_TVALID),
    .ack_in(regslice_both_input_12_data_V_U_ack_in),
    .data_out(input_12_TDATA_int),
    .vld_out(input_12_TVALID_int),
    .ack_out(input_12_TREADY_int),
    .apdone_blk(regslice_both_input_12_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_13_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_13_TDATA),
    .vld_in(input_13_TVALID),
    .ack_in(regslice_both_input_13_data_V_U_ack_in),
    .data_out(input_13_TDATA_int),
    .vld_out(input_13_TVALID_int),
    .ack_out(input_13_TREADY_int),
    .apdone_blk(regslice_both_input_13_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_14_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_14_TDATA),
    .vld_in(input_14_TVALID),
    .ack_in(regslice_both_input_14_data_V_U_ack_in),
    .data_out(input_14_TDATA_int),
    .vld_out(input_14_TVALID_int),
    .ack_out(input_14_TREADY_int),
    .apdone_blk(regslice_both_input_14_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_15_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_15_TDATA),
    .vld_in(input_15_TVALID),
    .ack_in(regslice_both_input_15_data_V_U_ack_in),
    .data_out(input_15_TDATA_int),
    .vld_out(input_15_TVALID_int),
    .ack_out(input_15_TREADY_int),
    .apdone_blk(regslice_both_input_15_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_0_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_0_TLAST),
    .vld_in(input_0_TVALID),
    .ack_in(regslice_both_input_0_last_V_U_ack_in),
    .data_out(input_0_TLAST_int),
    .vld_out(regslice_both_input_0_last_V_U_vld_out),
    .ack_out(input_0_TREADY_int),
    .apdone_blk(regslice_both_input_0_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_1_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_1_TLAST),
    .vld_in(input_1_TVALID),
    .ack_in(regslice_both_input_1_last_V_U_ack_in),
    .data_out(input_1_TLAST_int),
    .vld_out(regslice_both_input_1_last_V_U_vld_out),
    .ack_out(input_1_TREADY_int),
    .apdone_blk(regslice_both_input_1_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_2_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_2_TLAST),
    .vld_in(input_2_TVALID),
    .ack_in(regslice_both_input_2_last_V_U_ack_in),
    .data_out(input_2_TLAST_int),
    .vld_out(regslice_both_input_2_last_V_U_vld_out),
    .ack_out(input_2_TREADY_int),
    .apdone_blk(regslice_both_input_2_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_3_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_3_TLAST),
    .vld_in(input_3_TVALID),
    .ack_in(regslice_both_input_3_last_V_U_ack_in),
    .data_out(input_3_TLAST_int),
    .vld_out(regslice_both_input_3_last_V_U_vld_out),
    .ack_out(input_3_TREADY_int),
    .apdone_blk(regslice_both_input_3_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_4_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_4_TLAST),
    .vld_in(input_4_TVALID),
    .ack_in(regslice_both_input_4_last_V_U_ack_in),
    .data_out(input_4_TLAST_int),
    .vld_out(regslice_both_input_4_last_V_U_vld_out),
    .ack_out(input_4_TREADY_int),
    .apdone_blk(regslice_both_input_4_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_5_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_5_TLAST),
    .vld_in(input_5_TVALID),
    .ack_in(regslice_both_input_5_last_V_U_ack_in),
    .data_out(input_5_TLAST_int),
    .vld_out(regslice_both_input_5_last_V_U_vld_out),
    .ack_out(input_5_TREADY_int),
    .apdone_blk(regslice_both_input_5_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_6_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_6_TLAST),
    .vld_in(input_6_TVALID),
    .ack_in(regslice_both_input_6_last_V_U_ack_in),
    .data_out(input_6_TLAST_int),
    .vld_out(regslice_both_input_6_last_V_U_vld_out),
    .ack_out(input_6_TREADY_int),
    .apdone_blk(regslice_both_input_6_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_7_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_7_TLAST),
    .vld_in(input_7_TVALID),
    .ack_in(regslice_both_input_7_last_V_U_ack_in),
    .data_out(input_7_TLAST_int),
    .vld_out(regslice_both_input_7_last_V_U_vld_out),
    .ack_out(input_7_TREADY_int),
    .apdone_blk(regslice_both_input_7_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_8_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_8_TLAST),
    .vld_in(input_8_TVALID),
    .ack_in(regslice_both_input_8_last_V_U_ack_in),
    .data_out(input_8_TLAST_int),
    .vld_out(regslice_both_input_8_last_V_U_vld_out),
    .ack_out(input_8_TREADY_int),
    .apdone_blk(regslice_both_input_8_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_9_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_9_TLAST),
    .vld_in(input_9_TVALID),
    .ack_in(regslice_both_input_9_last_V_U_ack_in),
    .data_out(input_9_TLAST_int),
    .vld_out(regslice_both_input_9_last_V_U_vld_out),
    .ack_out(input_9_TREADY_int),
    .apdone_blk(regslice_both_input_9_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_10_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_10_TLAST),
    .vld_in(input_10_TVALID),
    .ack_in(regslice_both_input_10_last_V_U_ack_in),
    .data_out(input_10_TLAST_int),
    .vld_out(regslice_both_input_10_last_V_U_vld_out),
    .ack_out(input_10_TREADY_int),
    .apdone_blk(regslice_both_input_10_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_11_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_11_TLAST),
    .vld_in(input_11_TVALID),
    .ack_in(regslice_both_input_11_last_V_U_ack_in),
    .data_out(input_11_TLAST_int),
    .vld_out(regslice_both_input_11_last_V_U_vld_out),
    .ack_out(input_11_TREADY_int),
    .apdone_blk(regslice_both_input_11_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_12_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_12_TLAST),
    .vld_in(input_12_TVALID),
    .ack_in(regslice_both_input_12_last_V_U_ack_in),
    .data_out(input_12_TLAST_int),
    .vld_out(regslice_both_input_12_last_V_U_vld_out),
    .ack_out(input_12_TREADY_int),
    .apdone_blk(regslice_both_input_12_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_13_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_13_TLAST),
    .vld_in(input_13_TVALID),
    .ack_in(regslice_both_input_13_last_V_U_ack_in),
    .data_out(input_13_TLAST_int),
    .vld_out(regslice_both_input_13_last_V_U_vld_out),
    .ack_out(input_13_TREADY_int),
    .apdone_blk(regslice_both_input_13_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_14_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_14_TLAST),
    .vld_in(input_14_TVALID),
    .ack_in(regslice_both_input_14_last_V_U_ack_in),
    .data_out(input_14_TLAST_int),
    .vld_out(regslice_both_input_14_last_V_U_vld_out),
    .ack_out(input_14_TREADY_int),
    .apdone_blk(regslice_both_input_14_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_15_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_15_TLAST),
    .vld_in(input_15_TVALID),
    .ack_in(regslice_both_input_15_last_V_U_ack_in),
    .data_out(input_15_TLAST_int),
    .vld_out(regslice_both_input_15_last_V_U_vld_out),
    .ack_out(input_15_TREADY_int),
    .apdone_blk(regslice_both_input_15_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_0_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_0_TDATA_int),
    .vld_in(output_0_TVALID_int),
    .ack_in(output_0_TREADY_int),
    .data_out(output_0_TDATA),
    .vld_out(regslice_both_output_0_data_V_U_vld_out),
    .ack_out(output_0_TREADY),
    .apdone_blk(regslice_both_output_0_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_1_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_1_TDATA_int),
    .vld_in(output_1_TVALID_int),
    .ack_in(output_1_TREADY_int),
    .data_out(output_1_TDATA),
    .vld_out(regslice_both_output_1_data_V_U_vld_out),
    .ack_out(output_1_TREADY),
    .apdone_blk(regslice_both_output_1_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_2_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_2_TDATA_int),
    .vld_in(output_2_TVALID_int),
    .ack_in(output_2_TREADY_int),
    .data_out(output_2_TDATA),
    .vld_out(regslice_both_output_2_data_V_U_vld_out),
    .ack_out(output_2_TREADY),
    .apdone_blk(regslice_both_output_2_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_3_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_3_TDATA_int),
    .vld_in(output_3_TVALID_int),
    .ack_in(output_3_TREADY_int),
    .data_out(output_3_TDATA),
    .vld_out(regslice_both_output_3_data_V_U_vld_out),
    .ack_out(output_3_TREADY),
    .apdone_blk(regslice_both_output_3_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_4_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_4_TDATA_int),
    .vld_in(output_4_TVALID_int),
    .ack_in(output_4_TREADY_int),
    .data_out(output_4_TDATA),
    .vld_out(regslice_both_output_4_data_V_U_vld_out),
    .ack_out(output_4_TREADY),
    .apdone_blk(regslice_both_output_4_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_5_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_5_TDATA_int),
    .vld_in(output_5_TVALID_int),
    .ack_in(output_5_TREADY_int),
    .data_out(output_5_TDATA),
    .vld_out(regslice_both_output_5_data_V_U_vld_out),
    .ack_out(output_5_TREADY),
    .apdone_blk(regslice_both_output_5_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_6_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_6_TDATA_int),
    .vld_in(output_6_TVALID_int),
    .ack_in(output_6_TREADY_int),
    .data_out(output_6_TDATA),
    .vld_out(regslice_both_output_6_data_V_U_vld_out),
    .ack_out(output_6_TREADY),
    .apdone_blk(regslice_both_output_6_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_7_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_7_TDATA_int),
    .vld_in(output_7_TVALID_int),
    .ack_in(output_7_TREADY_int),
    .data_out(output_7_TDATA),
    .vld_out(regslice_both_output_7_data_V_U_vld_out),
    .ack_out(output_7_TREADY),
    .apdone_blk(regslice_both_output_7_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_8_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_8_TDATA_int),
    .vld_in(output_8_TVALID_int),
    .ack_in(output_8_TREADY_int),
    .data_out(output_8_TDATA),
    .vld_out(regslice_both_output_8_data_V_U_vld_out),
    .ack_out(output_8_TREADY),
    .apdone_blk(regslice_both_output_8_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_9_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_9_TDATA_int),
    .vld_in(output_9_TVALID_int),
    .ack_in(output_9_TREADY_int),
    .data_out(output_9_TDATA),
    .vld_out(regslice_both_output_9_data_V_U_vld_out),
    .ack_out(output_9_TREADY),
    .apdone_blk(regslice_both_output_9_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_10_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_10_TDATA_int),
    .vld_in(output_10_TVALID_int),
    .ack_in(output_10_TREADY_int),
    .data_out(output_10_TDATA),
    .vld_out(regslice_both_output_10_data_V_U_vld_out),
    .ack_out(output_10_TREADY),
    .apdone_blk(regslice_both_output_10_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_11_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_11_TDATA_int),
    .vld_in(output_11_TVALID_int),
    .ack_in(output_11_TREADY_int),
    .data_out(output_11_TDATA),
    .vld_out(regslice_both_output_11_data_V_U_vld_out),
    .ack_out(output_11_TREADY),
    .apdone_blk(regslice_both_output_11_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_12_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_12_TDATA_int),
    .vld_in(output_12_TVALID_int),
    .ack_in(output_12_TREADY_int),
    .data_out(output_12_TDATA),
    .vld_out(regslice_both_output_12_data_V_U_vld_out),
    .ack_out(output_12_TREADY),
    .apdone_blk(regslice_both_output_12_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_13_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_13_TDATA_int),
    .vld_in(output_13_TVALID_int),
    .ack_in(output_13_TREADY_int),
    .data_out(output_13_TDATA),
    .vld_out(regslice_both_output_13_data_V_U_vld_out),
    .ack_out(output_13_TREADY),
    .apdone_blk(regslice_both_output_13_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_14_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_14_TDATA_int),
    .vld_in(output_14_TVALID_int),
    .ack_in(output_14_TREADY_int),
    .data_out(output_14_TDATA),
    .vld_out(regslice_both_output_14_data_V_U_vld_out),
    .ack_out(output_14_TREADY),
    .apdone_blk(regslice_both_output_14_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_15_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_15_TDATA_int),
    .vld_in(output_15_TVALID_int),
    .ack_in(output_15_TREADY_int),
    .data_out(output_15_TDATA),
    .vld_out(regslice_both_output_15_data_V_U_vld_out),
    .ack_out(output_15_TREADY),
    .apdone_blk(regslice_both_output_15_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_0_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_0_TVALID_int),
    .ack_in(regslice_both_output_0_last_V_U_ack_in_dummy),
    .data_out(output_0_TLAST),
    .vld_out(regslice_both_output_0_last_V_U_vld_out),
    .ack_out(output_0_TREADY),
    .apdone_blk(regslice_both_output_0_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_1_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_1_TVALID_int),
    .ack_in(regslice_both_output_1_last_V_U_ack_in_dummy),
    .data_out(output_1_TLAST),
    .vld_out(regslice_both_output_1_last_V_U_vld_out),
    .ack_out(output_1_TREADY),
    .apdone_blk(regslice_both_output_1_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_2_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_2_TVALID_int),
    .ack_in(regslice_both_output_2_last_V_U_ack_in_dummy),
    .data_out(output_2_TLAST),
    .vld_out(regslice_both_output_2_last_V_U_vld_out),
    .ack_out(output_2_TREADY),
    .apdone_blk(regslice_both_output_2_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_3_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_3_TVALID_int),
    .ack_in(regslice_both_output_3_last_V_U_ack_in_dummy),
    .data_out(output_3_TLAST),
    .vld_out(regslice_both_output_3_last_V_U_vld_out),
    .ack_out(output_3_TREADY),
    .apdone_blk(regslice_both_output_3_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_4_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_4_TVALID_int),
    .ack_in(regslice_both_output_4_last_V_U_ack_in_dummy),
    .data_out(output_4_TLAST),
    .vld_out(regslice_both_output_4_last_V_U_vld_out),
    .ack_out(output_4_TREADY),
    .apdone_blk(regslice_both_output_4_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_5_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_5_TVALID_int),
    .ack_in(regslice_both_output_5_last_V_U_ack_in_dummy),
    .data_out(output_5_TLAST),
    .vld_out(regslice_both_output_5_last_V_U_vld_out),
    .ack_out(output_5_TREADY),
    .apdone_blk(regslice_both_output_5_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_6_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_6_TVALID_int),
    .ack_in(regslice_both_output_6_last_V_U_ack_in_dummy),
    .data_out(output_6_TLAST),
    .vld_out(regslice_both_output_6_last_V_U_vld_out),
    .ack_out(output_6_TREADY),
    .apdone_blk(regslice_both_output_6_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_7_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_7_TVALID_int),
    .ack_in(regslice_both_output_7_last_V_U_ack_in_dummy),
    .data_out(output_7_TLAST),
    .vld_out(regslice_both_output_7_last_V_U_vld_out),
    .ack_out(output_7_TREADY),
    .apdone_blk(regslice_both_output_7_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_8_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_8_TVALID_int),
    .ack_in(regslice_both_output_8_last_V_U_ack_in_dummy),
    .data_out(output_8_TLAST),
    .vld_out(regslice_both_output_8_last_V_U_vld_out),
    .ack_out(output_8_TREADY),
    .apdone_blk(regslice_both_output_8_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_9_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_9_TVALID_int),
    .ack_in(regslice_both_output_9_last_V_U_ack_in_dummy),
    .data_out(output_9_TLAST),
    .vld_out(regslice_both_output_9_last_V_U_vld_out),
    .ack_out(output_9_TREADY),
    .apdone_blk(regslice_both_output_9_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_10_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_10_TVALID_int),
    .ack_in(regslice_both_output_10_last_V_U_ack_in_dummy),
    .data_out(output_10_TLAST),
    .vld_out(regslice_both_output_10_last_V_U_vld_out),
    .ack_out(output_10_TREADY),
    .apdone_blk(regslice_both_output_10_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_11_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_11_TVALID_int),
    .ack_in(regslice_both_output_11_last_V_U_ack_in_dummy),
    .data_out(output_11_TLAST),
    .vld_out(regslice_both_output_11_last_V_U_vld_out),
    .ack_out(output_11_TREADY),
    .apdone_blk(regslice_both_output_11_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_12_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_12_TVALID_int),
    .ack_in(regslice_both_output_12_last_V_U_ack_in_dummy),
    .data_out(output_12_TLAST),
    .vld_out(regslice_both_output_12_last_V_U_vld_out),
    .ack_out(output_12_TREADY),
    .apdone_blk(regslice_both_output_12_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_13_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_13_TVALID_int),
    .ack_in(regslice_both_output_13_last_V_U_ack_in_dummy),
    .data_out(output_13_TLAST),
    .vld_out(regslice_both_output_13_last_V_U_vld_out),
    .ack_out(output_13_TREADY),
    .apdone_blk(regslice_both_output_13_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_14_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_14_TVALID_int),
    .ack_in(regslice_both_output_14_last_V_U_ack_in_dummy),
    .data_out(output_14_TLAST),
    .vld_out(regslice_both_output_14_last_V_U_vld_out),
    .ack_out(output_14_TREADY),
    .apdone_blk(regslice_both_output_14_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_15_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln68_reg_1118_pp0_iter4_reg),
    .vld_in(output_15_TVALID_int),
    .ack_in(regslice_both_output_15_last_V_U_ack_in_dummy),
    .data_out(output_15_TLAST),
    .vld_out(regslice_both_output_15_last_V_U_vld_out),
    .ack_out(output_15_TREADY),
    .apdone_blk(regslice_both_output_15_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((bwrite_load_reg_1142_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        buffer_data_V_0_load_reg_1158 <= buffer_data_V_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (bwrite_load_reg_1142_pp0_iter3_reg == 1'd0))) begin
        buffer_data_V_1_load_reg_1163 <= buffer_data_V_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_1_reg_1114_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bwrite <= xor_ln64_fu_831_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bwrite_load_reg_1142 <= ap_sig_allocacmp_bwrite_load;
        icmp_ln879_1_reg_1114 <= icmp_ln879_1_fu_750_p2;
        icmp_ln879_1_reg_1114_pp0_iter1_reg <= icmp_ln879_1_reg_1114;
        input_0_data_V_tmp_reg_1029 <= input_0_TDATA_int;
        input_10_data_V_tmp_reg_1079 <= input_10_TDATA_int;
        input_11_data_V_tmp_reg_1084 <= input_11_TDATA_int;
        input_12_data_V_tmp_reg_1089 <= input_12_TDATA_int;
        input_13_data_V_tmp_reg_1094 <= input_13_TDATA_int;
        input_14_data_V_tmp_reg_1099 <= input_14_TDATA_int;
        input_15_data_V_tmp_reg_1104 <= input_15_TDATA_int;
        input_1_data_V_tmp_reg_1034 <= input_1_TDATA_int;
        input_2_data_V_tmp_reg_1039 <= input_2_TDATA_int;
        input_3_data_V_tmp_reg_1044 <= input_3_TDATA_int;
        input_4_data_V_tmp_reg_1049 <= input_4_TDATA_int;
        input_5_data_V_tmp_reg_1054 <= input_5_TDATA_int;
        input_6_data_V_tmp_reg_1059 <= input_6_TDATA_int;
        input_7_data_V_tmp_reg_1064 <= input_7_TDATA_int;
        input_8_data_V_tmp_reg_1069 <= input_8_TDATA_int;
        input_9_data_V_tmp_reg_1074 <= input_9_TDATA_int;
        ndx_reg_1109 <= ndx_fu_738_p2;
        or_ln68_reg_1118 <= or_ln68_fu_756_p2;
        or_ln68_reg_1118_pp0_iter1_reg <= or_ln68_reg_1118;
        primed_load_reg_1138 <= primed;
        primed_load_reg_1138_pp0_iter1_reg <= primed_load_reg_1138;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        bwrite_load_reg_1142_pp0_iter2_reg <= bwrite_load_reg_1142;
        bwrite_load_reg_1142_pp0_iter3_reg <= bwrite_load_reg_1142_pp0_iter2_reg;
        bwrite_load_reg_1142_pp0_iter4_reg <= bwrite_load_reg_1142_pp0_iter3_reg;
        or_ln68_reg_1118_pp0_iter2_reg <= or_ln68_reg_1118_pp0_iter1_reg;
        or_ln68_reg_1118_pp0_iter3_reg <= or_ln68_reg_1118_pp0_iter2_reg;
        or_ln68_reg_1118_pp0_iter4_reg <= or_ln68_reg_1118_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cycle_V <= add_ln700_1_fu_778_p2;
        primed <= or_ln73_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((primed_load_reg_1138_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cycleout_V <= add_ln700_fu_842_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((icmp_ln879_1_reg_1114_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_bwrite_load = xor_ln64_fu_831_p2;
    end else begin
        ap_sig_allocacmp_bwrite_load = bwrite;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_data_V_0_ce0 = 1'b1;
    end else begin
        buffer_data_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        buffer_data_V_0_ce1 = 1'b1;
    end else begin
        buffer_data_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (bwrite_load_load_fu_795_p1 == 1'd0))) begin
        buffer_data_V_0_we0 = 1'b1;
    end else begin
        buffer_data_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_data_V_1_ce0 = 1'b1;
    end else begin
        buffer_data_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        buffer_data_V_1_ce1 = 1'b1;
    end else begin
        buffer_data_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((bwrite_load_load_fu_795_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_data_V_1_we0 = 1'b1;
    end else begin
        buffer_data_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_0_TDATA_blk_n = input_0_TVALID_int;
    end else begin
        input_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_input_0_data_V_U_ack_in == 1'b1) & (input_0_TVALID == 1'b1))) begin
        input_0_TREADY = 1'b1;
    end else begin
        input_0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_TREADY_int = 1'b1;
    end else begin
        input_0_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_10_TDATA_blk_n = input_10_TVALID_int;
    end else begin
        input_10_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_10_TVALID == 1'b1) & (regslice_both_input_10_data_V_U_ack_in == 1'b1))) begin
        input_10_TREADY = 1'b1;
    end else begin
        input_10_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_10_TREADY_int = 1'b1;
    end else begin
        input_10_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_11_TDATA_blk_n = input_11_TVALID_int;
    end else begin
        input_11_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_11_TVALID == 1'b1) & (regslice_both_input_11_data_V_U_ack_in == 1'b1))) begin
        input_11_TREADY = 1'b1;
    end else begin
        input_11_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_11_TREADY_int = 1'b1;
    end else begin
        input_11_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_12_TDATA_blk_n = input_12_TVALID_int;
    end else begin
        input_12_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_12_TVALID == 1'b1) & (regslice_both_input_12_data_V_U_ack_in == 1'b1))) begin
        input_12_TREADY = 1'b1;
    end else begin
        input_12_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_12_TREADY_int = 1'b1;
    end else begin
        input_12_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_13_TDATA_blk_n = input_13_TVALID_int;
    end else begin
        input_13_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_13_TVALID == 1'b1) & (regslice_both_input_13_data_V_U_ack_in == 1'b1))) begin
        input_13_TREADY = 1'b1;
    end else begin
        input_13_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_13_TREADY_int = 1'b1;
    end else begin
        input_13_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_14_TDATA_blk_n = input_14_TVALID_int;
    end else begin
        input_14_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_14_TVALID == 1'b1) & (regslice_both_input_14_data_V_U_ack_in == 1'b1))) begin
        input_14_TREADY = 1'b1;
    end else begin
        input_14_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_14_TREADY_int = 1'b1;
    end else begin
        input_14_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_15_TDATA_blk_n = input_15_TVALID_int;
    end else begin
        input_15_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_15_TVALID == 1'b1) & (regslice_both_input_15_data_V_U_ack_in == 1'b1))) begin
        input_15_TREADY = 1'b1;
    end else begin
        input_15_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_15_TREADY_int = 1'b1;
    end else begin
        input_15_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_1_TDATA_blk_n = input_1_TVALID_int;
    end else begin
        input_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_input_1_data_V_U_ack_in == 1'b1) & (input_1_TVALID == 1'b1))) begin
        input_1_TREADY = 1'b1;
    end else begin
        input_1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_1_TREADY_int = 1'b1;
    end else begin
        input_1_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_2_TDATA_blk_n = input_2_TVALID_int;
    end else begin
        input_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_input_2_data_V_U_ack_in == 1'b1) & (input_2_TVALID == 1'b1))) begin
        input_2_TREADY = 1'b1;
    end else begin
        input_2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_2_TREADY_int = 1'b1;
    end else begin
        input_2_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_3_TDATA_blk_n = input_3_TVALID_int;
    end else begin
        input_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_input_3_data_V_U_ack_in == 1'b1) & (input_3_TVALID == 1'b1))) begin
        input_3_TREADY = 1'b1;
    end else begin
        input_3_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_3_TREADY_int = 1'b1;
    end else begin
        input_3_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_4_TDATA_blk_n = input_4_TVALID_int;
    end else begin
        input_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_input_4_data_V_U_ack_in == 1'b1) & (input_4_TVALID == 1'b1))) begin
        input_4_TREADY = 1'b1;
    end else begin
        input_4_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_4_TREADY_int = 1'b1;
    end else begin
        input_4_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_5_TDATA_blk_n = input_5_TVALID_int;
    end else begin
        input_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_5_TVALID == 1'b1) & (regslice_both_input_5_data_V_U_ack_in == 1'b1))) begin
        input_5_TREADY = 1'b1;
    end else begin
        input_5_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_5_TREADY_int = 1'b1;
    end else begin
        input_5_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_6_TDATA_blk_n = input_6_TVALID_int;
    end else begin
        input_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_6_TVALID == 1'b1) & (regslice_both_input_6_data_V_U_ack_in == 1'b1))) begin
        input_6_TREADY = 1'b1;
    end else begin
        input_6_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_6_TREADY_int = 1'b1;
    end else begin
        input_6_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_7_TDATA_blk_n = input_7_TVALID_int;
    end else begin
        input_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_7_TVALID == 1'b1) & (regslice_both_input_7_data_V_U_ack_in == 1'b1))) begin
        input_7_TREADY = 1'b1;
    end else begin
        input_7_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_7_TREADY_int = 1'b1;
    end else begin
        input_7_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_8_TDATA_blk_n = input_8_TVALID_int;
    end else begin
        input_8_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_8_TVALID == 1'b1) & (regslice_both_input_8_data_V_U_ack_in == 1'b1))) begin
        input_8_TREADY = 1'b1;
    end else begin
        input_8_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_8_TREADY_int = 1'b1;
    end else begin
        input_8_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_9_TDATA_blk_n = input_9_TVALID_int;
    end else begin
        input_9_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_9_TVALID == 1'b1) & (regslice_both_input_9_data_V_U_ack_in == 1'b1))) begin
        input_9_TREADY = 1'b1;
    end else begin
        input_9_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_9_TREADY_int = 1'b1;
    end else begin
        input_9_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_0_TDATA_blk_n = output_0_TREADY_int;
    end else begin
        output_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_0_TVALID_int = 1'b1;
    end else begin
        output_0_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_10_TDATA_blk_n = output_10_TREADY_int;
    end else begin
        output_10_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_10_TVALID_int = 1'b1;
    end else begin
        output_10_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_11_TDATA_blk_n = output_11_TREADY_int;
    end else begin
        output_11_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_11_TVALID_int = 1'b1;
    end else begin
        output_11_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_12_TDATA_blk_n = output_12_TREADY_int;
    end else begin
        output_12_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_12_TVALID_int = 1'b1;
    end else begin
        output_12_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_13_TDATA_blk_n = output_13_TREADY_int;
    end else begin
        output_13_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_13_TVALID_int = 1'b1;
    end else begin
        output_13_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_14_TDATA_blk_n = output_14_TREADY_int;
    end else begin
        output_14_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_14_TVALID_int = 1'b1;
    end else begin
        output_14_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_15_TDATA_blk_n = output_15_TREADY_int;
    end else begin
        output_15_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_15_TVALID_int = 1'b1;
    end else begin
        output_15_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_1_TDATA_blk_n = output_1_TREADY_int;
    end else begin
        output_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_1_TVALID_int = 1'b1;
    end else begin
        output_1_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_2_TDATA_blk_n = output_2_TREADY_int;
    end else begin
        output_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_2_TVALID_int = 1'b1;
    end else begin
        output_2_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_3_TDATA_blk_n = output_3_TREADY_int;
    end else begin
        output_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_3_TVALID_int = 1'b1;
    end else begin
        output_3_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_4_TDATA_blk_n = output_4_TREADY_int;
    end else begin
        output_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_4_TVALID_int = 1'b1;
    end else begin
        output_4_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_5_TDATA_blk_n = output_5_TREADY_int;
    end else begin
        output_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_5_TVALID_int = 1'b1;
    end else begin
        output_5_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_6_TDATA_blk_n = output_6_TREADY_int;
    end else begin
        output_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_6_TVALID_int = 1'b1;
    end else begin
        output_6_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_7_TDATA_blk_n = output_7_TREADY_int;
    end else begin
        output_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_7_TVALID_int = 1'b1;
    end else begin
        output_7_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_8_TDATA_blk_n = output_8_TREADY_int;
    end else begin
        output_8_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_8_TVALID_int = 1'b1;
    end else begin
        output_8_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_9_TDATA_blk_n = output_9_TREADY_int;
    end else begin
        output_9_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_9_TVALID_int = 1'b1;
    end else begin
        output_9_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_1_fu_778_p2 = (cycle_V + 9'd1);

assign add_ln700_fu_842_p2 = (cycleout_V + 9'd1);

assign and_ln62_fu_714_p2 = (sub_ln62_fu_700_p2 & select_ln62_fu_706_p3);

assign and_ln_fu_674_p3 = {{tmp_1_fu_666_p3}, {7'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((regslice_both_output_15_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_14_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_13_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_12_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_11_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_10_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_9_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_8_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_7_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_6_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_5_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_4_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_3_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_2_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_1_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_0_data_V_U_apdone_blk == 1'b1))) | ((1'b1 == 1'b1) & ((input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0) | (input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0) | (input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((regslice_both_output_15_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_14_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_13_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_12_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_11_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_10_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_9_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_8_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_7_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_6_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_5_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_4_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_3_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_2_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_1_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_0_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state7_io))) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_io)) | ((1'b1 == 1'b1) & ((input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0) | (input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0) | (input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((regslice_both_output_15_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_14_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_13_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_12_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_11_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_10_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_9_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_8_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_7_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_6_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_5_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_4_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_3_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_2_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_1_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_0_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state7_io))) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_io)) | ((1'b1 == 1'b1) & ((input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0) | (input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0) | (input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0) | (input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0) | (input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((output_15_TREADY_int == 1'b0) | (output_14_TREADY_int == 1'b0) | (output_13_TREADY_int == 1'b0) | (output_12_TREADY_int == 1'b0) | (output_11_TREADY_int == 1'b0) | (output_10_TREADY_int == 1'b0) | (output_9_TREADY_int == 1'b0) | (output_8_TREADY_int == 1'b0) | (output_7_TREADY_int == 1'b0) | (output_6_TREADY_int == 1'b0) | (output_5_TREADY_int == 1'b0) | (output_4_TREADY_int == 1'b0) | (output_3_TREADY_int == 1'b0) | (output_2_TREADY_int == 1'b0) | (output_1_TREADY_int == 1'b0) | (output_0_TREADY_int == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((output_15_TREADY_int == 1'b0) | (output_14_TREADY_int == 1'b0) | (output_13_TREADY_int == 1'b0) | (output_12_TREADY_int == 1'b0) | (output_11_TREADY_int == 1'b0) | (output_10_TREADY_int == 1'b0) | (output_9_TREADY_int == 1'b0) | (output_8_TREADY_int == 1'b0) | (output_7_TREADY_int == 1'b0) | (output_6_TREADY_int == 1'b0) | (output_5_TREADY_int == 1'b0) | (output_4_TREADY_int == 1'b0) | (output_3_TREADY_int == 1'b0) | (output_2_TREADY_int == 1'b0) | (output_1_TREADY_int == 1'b0) | (output_0_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = ((regslice_both_output_15_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_14_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_13_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_12_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_11_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_10_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_9_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_8_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_7_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_6_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_5_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_4_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_3_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_2_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_1_data_V_U_apdone_blk == 1'b1) | (regslice_both_output_0_data_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign buffer_data_V_0_address0 = sext_ln63_fu_790_p1;

assign buffer_data_V_0_address1 = zext_ln544_fu_825_p1;

assign buffer_data_V_1_address0 = sext_ln63_fu_790_p1;

assign buffer_data_V_1_address1 = zext_ln544_fu_825_p1;

assign bwrite_load_load_fu_795_p1 = ap_sig_allocacmp_bwrite_load;

assign icmp_ln879_1_fu_750_p2 = ((cycle_V == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_744_p2 = ((cycle_V == 9'd255) ? 1'b1 : 1'b0);

assign ndx_fu_738_p2 = ($signed(sext_ln1467_fu_720_p1) + $signed(zext_ln62_3_fu_734_p1));

assign or_ln68_fu_756_p2 = (icmp_ln879_fu_744_p2 | icmp_ln879_1_fu_750_p2);

assign or_ln73_fu_766_p2 = (primed | icmp_ln879_1_fu_750_p2);

assign output_0_TDATA_int = select_ln63_fu_854_p3[31:0];

assign output_0_TVALID = regslice_both_output_0_data_V_U_vld_out;

assign output_10_TDATA_int = {{select_ln63_fu_854_p3[351:320]}};

assign output_10_TVALID = regslice_both_output_10_data_V_U_vld_out;

assign output_11_TDATA_int = {{select_ln63_fu_854_p3[383:352]}};

assign output_11_TVALID = regslice_both_output_11_data_V_U_vld_out;

assign output_12_TDATA_int = {{select_ln63_fu_854_p3[415:384]}};

assign output_12_TVALID = regslice_both_output_12_data_V_U_vld_out;

assign output_13_TDATA_int = {{select_ln63_fu_854_p3[447:416]}};

assign output_13_TVALID = regslice_both_output_13_data_V_U_vld_out;

assign output_14_TDATA_int = {{select_ln63_fu_854_p3[479:448]}};

assign output_14_TVALID = regslice_both_output_14_data_V_U_vld_out;

assign output_15_TDATA_int = {{select_ln63_fu_854_p3[511:480]}};

assign output_15_TVALID = regslice_both_output_15_data_V_U_vld_out;

assign output_1_TDATA_int = {{select_ln63_fu_854_p3[63:32]}};

assign output_1_TVALID = regslice_both_output_1_data_V_U_vld_out;

assign output_2_TDATA_int = {{select_ln63_fu_854_p3[95:64]}};

assign output_2_TVALID = regslice_both_output_2_data_V_U_vld_out;

assign output_3_TDATA_int = {{select_ln63_fu_854_p3[127:96]}};

assign output_3_TVALID = regslice_both_output_3_data_V_U_vld_out;

assign output_4_TDATA_int = {{select_ln63_fu_854_p3[159:128]}};

assign output_4_TVALID = regslice_both_output_4_data_V_U_vld_out;

assign output_5_TDATA_int = {{select_ln63_fu_854_p3[191:160]}};

assign output_5_TVALID = regslice_both_output_5_data_V_U_vld_out;

assign output_6_TDATA_int = {{select_ln63_fu_854_p3[223:192]}};

assign output_6_TVALID = regslice_both_output_6_data_V_U_vld_out;

assign output_7_TDATA_int = {{select_ln63_fu_854_p3[255:224]}};

assign output_7_TVALID = regslice_both_output_7_data_V_U_vld_out;

assign output_8_TDATA_int = {{select_ln63_fu_854_p3[287:256]}};

assign output_8_TVALID = regslice_both_output_8_data_V_U_vld_out;

assign output_9_TDATA_int = {{select_ln63_fu_854_p3[319:288]}};

assign output_9_TVALID = regslice_both_output_9_data_V_U_vld_out;

assign select_ln62_fu_706_p3 = ((trunc_ln1371_fu_662_p1[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign select_ln63_fu_854_p3 = ((bwrite_load_reg_1142_pp0_iter4_reg[0:0] === 1'b1) ? buffer_data_V_0_load_reg_1158 : buffer_data_V_1_load_reg_1163);

assign sext_ln1467_fu_720_p1 = $signed(and_ln62_fu_714_p2);

assign sext_ln63_fu_790_p1 = $signed(ndx_reg_1109);

assign sub_ln62_fu_700_p2 = (zext_ln62_2_fu_696_p1 - zext_ln62_1_fu_686_p1);

assign tmp_1_fu_666_p3 = cycle_V[32'd8];

assign tmp_2_fu_724_p4 = {{cycle_V[8:1]}};

assign tmp_fu_799_p17 = {{{{{{{{{{{{{{{{input_15_data_V_tmp_reg_1104}, {input_14_data_V_tmp_reg_1099}}, {input_13_data_V_tmp_reg_1094}}, {input_12_data_V_tmp_reg_1089}}, {input_11_data_V_tmp_reg_1084}}, {input_10_data_V_tmp_reg_1079}}, {input_9_data_V_tmp_reg_1074}}, {input_8_data_V_tmp_reg_1069}}, {input_7_data_V_tmp_reg_1064}}, {input_6_data_V_tmp_reg_1059}}, {input_5_data_V_tmp_reg_1054}}, {input_4_data_V_tmp_reg_1049}}, {input_3_data_V_tmp_reg_1044}}, {input_2_data_V_tmp_reg_1039}}, {input_1_data_V_tmp_reg_1034}}, {input_0_data_V_tmp_reg_1029}};

assign trunc_ln1371_fu_662_p1 = cycle_V[0:0];

assign xor_ln62_fu_690_p2 = (zext_ln62_fu_682_p1 ^ 9'd384);

assign xor_ln64_fu_831_p2 = (bwrite_load_reg_1142 ^ 1'd1);

assign zext_ln544_fu_825_p1 = cycleout_V;

assign zext_ln62_1_fu_686_p1 = and_ln_fu_674_p3;

assign zext_ln62_2_fu_696_p1 = xor_ln62_fu_690_p2;

assign zext_ln62_3_fu_734_p1 = tmp_2_fu_724_p4;

assign zext_ln62_fu_682_p1 = and_ln_fu_674_p3;

endmodule //fir_to_fft
