-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sort_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_data_TVALID : IN STD_LOGIC;
    A_V_i_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_V_i_full_n : IN STD_LOGIC;
    A_V_i_write : OUT STD_LOGIC;
    A_V_q_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_V_q_full_n : IN STD_LOGIC;
    A_V_q_write : OUT STD_LOGIC;
    B_V_i_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_V_i_full_n : IN STD_LOGIC;
    B_V_i_write : OUT STD_LOGIC;
    B_V_q_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_V_q_full_n : IN STD_LOGIC;
    B_V_q_write : OUT STD_LOGIC;
    C_V_i_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_V_i_full_n : IN STD_LOGIC;
    C_V_i_write : OUT STD_LOGIC;
    C_V_q_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    C_V_q_full_n : IN STD_LOGIC;
    C_V_q_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    input_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_data_TREADY : OUT STD_LOGIC );
end;


architecture behav of sort_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal icmp_ln12_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op32 : STD_LOGIC;
    signal odd_cycle_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal io_acc_block_signal_op34 : STD_LOGIC;
    signal tmp_1_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op34_write_state3 : BOOLEAN;
    signal io_acc_block_signal_op36 : STD_LOGIC;
    signal ap_predicate_op36_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_data_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal A_V_i_blk_n : STD_LOGIC;
    signal A_V_q_blk_n : STD_LOGIC;
    signal B_V_i_blk_n : STD_LOGIC;
    signal B_V_q_blk_n : STD_LOGIC;
    signal C_V_i_blk_n : STD_LOGIC;
    signal C_V_q_blk_n : STD_LOGIC;
    signal val_assign1_reg_198 : STD_LOGIC_VECTOR (8 downto 0);
    signal in_i_fu_212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_i_reg_252 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_q_reg_259 : STD_LOGIC_VECTOR (15 downto 0);
    signal odd_cycle_fu_226_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal cycle_fu_230_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal cycle_reg_270 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln12_reg_279 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_val_assign1_phi_fu_202_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_reverse_input_data_U_apdone_blk : STD_LOGIC;
    signal input_data_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_TVALID_int : STD_LOGIC;
    signal input_data_TREADY_int : STD_LOGIC;
    signal regslice_reverse_input_data_U_ack_in : STD_LOGIC;
    signal ap_condition_126 : BOOLEAN;

    component regslice_reverse IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_reverse_input_data_U : component regslice_reverse
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => input_data_TDATA,
        vld_in => input_data_TVALID,
        ack_in => regslice_reverse_input_data_U_ack_in,
        data_out => input_data_TDATA_int,
        vld_out => input_data_TVALID_int,
        ack_out => input_data_TREADY_int,
        apdone_blk => regslice_reverse_input_data_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln12_reg_279 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    val_assign1_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_reg_279 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                val_assign1_reg_198 <= cycle_reg_270;
            elsif ((((icmp_ln12_reg_279 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                val_assign1_reg_198 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cycle_reg_270 <= cycle_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln12_reg_279 <= icmp_ln12_fu_244_p2;
                in_i_reg_252 <= in_i_fu_212_p1;
                in_q_reg_259 <= input_data_TDATA_int(31 downto 16);
                odd_cycle_reg_266 <= odd_cycle_fu_226_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((odd_cycle_fu_226_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_275 <= ap_phi_mux_val_assign1_phi_fu_202_p6(8 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    A_V_i_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, A_V_i_full_n, odd_cycle_reg_266, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((odd_cycle_reg_266 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            A_V_i_blk_n <= A_V_i_full_n;
        else 
            A_V_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    A_V_i_din <= in_i_reg_252;

    A_V_i_write_assign_proc : process(ap_CS_fsm_pp0_stage0, odd_cycle_reg_266, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((odd_cycle_reg_266 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_i_write <= ap_const_logic_1;
        else 
            A_V_i_write <= ap_const_logic_0;
        end if; 
    end process;


    A_V_q_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, A_V_q_full_n, odd_cycle_reg_266, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((odd_cycle_reg_266 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            A_V_q_blk_n <= A_V_q_full_n;
        else 
            A_V_q_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    A_V_q_din <= in_q_reg_259;

    A_V_q_write_assign_proc : process(ap_CS_fsm_pp0_stage0, odd_cycle_reg_266, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((odd_cycle_reg_266 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_V_q_write <= ap_const_logic_1;
        else 
            A_V_q_write <= ap_const_logic_0;
        end if; 
    end process;


    B_V_i_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, B_V_i_full_n, ap_predicate_op34_write_state3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_V_i_blk_n <= B_V_i_full_n;
        else 
            B_V_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_V_i_din <= in_i_reg_252;

    B_V_i_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op34_write_state3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_V_i_write <= ap_const_logic_1;
        else 
            B_V_i_write <= ap_const_logic_0;
        end if; 
    end process;


    B_V_q_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, B_V_q_full_n, ap_predicate_op34_write_state3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_V_q_blk_n <= B_V_q_full_n;
        else 
            B_V_q_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_V_q_din <= in_q_reg_259;

    B_V_q_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op34_write_state3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_V_q_write <= ap_const_logic_1;
        else 
            B_V_q_write <= ap_const_logic_0;
        end if; 
    end process;


    C_V_i_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, C_V_i_full_n, ap_predicate_op36_write_state3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op36_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            C_V_i_blk_n <= C_V_i_full_n;
        else 
            C_V_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_V_i_din <= in_i_reg_252;

    C_V_i_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op36_write_state3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op36_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            C_V_i_write <= ap_const_logic_1;
        else 
            C_V_i_write <= ap_const_logic_0;
        end if; 
    end process;


    C_V_q_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, C_V_q_full_n, ap_predicate_op36_write_state3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op36_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            C_V_q_blk_n <= C_V_q_full_n;
        else 
            C_V_q_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_V_q_din <= in_q_reg_259;

    C_V_q_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op36_write_state3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op36_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            C_V_q_write <= ap_const_logic_1;
        else 
            C_V_q_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(real_start, ap_done_reg, io_acc_block_signal_op32, odd_cycle_reg_266, io_acc_block_signal_op34, ap_predicate_op34_write_state3, io_acc_block_signal_op36, ap_predicate_op36_write_state3, ap_enable_reg_pp0_iter1, input_data_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_write_state3 = ap_const_boolean_1)) or ((io_acc_block_signal_op34 = ap_const_logic_0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1)) or ((odd_cycle_reg_266 = ap_const_lv1_0) and (io_acc_block_signal_op32 = ap_const_logic_0)))) or ((input_data_TVALID_int = ap_const_logic_0) and (real_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(real_start, ap_done_reg, io_acc_block_signal_op32, odd_cycle_reg_266, io_acc_block_signal_op34, ap_predicate_op34_write_state3, io_acc_block_signal_op36, ap_predicate_op36_write_state3, ap_enable_reg_pp0_iter1, input_data_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_write_state3 = ap_const_boolean_1)) or ((io_acc_block_signal_op34 = ap_const_logic_0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1)) or ((odd_cycle_reg_266 = ap_const_lv1_0) and (io_acc_block_signal_op32 = ap_const_logic_0)))) or ((input_data_TVALID_int = ap_const_logic_0) and (real_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(real_start, ap_done_reg, io_acc_block_signal_op32, odd_cycle_reg_266, io_acc_block_signal_op34, ap_predicate_op34_write_state3, io_acc_block_signal_op36, ap_predicate_op36_write_state3, ap_enable_reg_pp0_iter1, input_data_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_write_state3 = ap_const_boolean_1)) or ((io_acc_block_signal_op34 = ap_const_logic_0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1)) or ((odd_cycle_reg_266 = ap_const_lv1_0) and (io_acc_block_signal_op32 = ap_const_logic_0)))) or ((input_data_TVALID_int = ap_const_logic_0) and (real_start = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(input_data_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (input_data_TVALID_int = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(io_acc_block_signal_op32, odd_cycle_reg_266, io_acc_block_signal_op34, ap_predicate_op34_write_state3, io_acc_block_signal_op36, ap_predicate_op36_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_write_state3 = ap_const_boolean_1)) or ((io_acc_block_signal_op34 = ap_const_logic_0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1)) or ((odd_cycle_reg_266 = ap_const_lv1_0) and (io_acc_block_signal_op32 = ap_const_logic_0)));
    end process;


    ap_condition_126_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_126 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln12_reg_279)
    begin
        if (((icmp_ln12_reg_279 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_val_assign1_phi_fu_202_p6_assign_proc : process(val_assign1_reg_198, cycle_reg_270, icmp_ln12_reg_279, ap_condition_126)
    begin
        if ((ap_const_boolean_1 = ap_condition_126)) then
            if ((icmp_ln12_reg_279 = ap_const_lv1_1)) then 
                ap_phi_mux_val_assign1_phi_fu_202_p6 <= ap_const_lv9_0;
            elsif ((icmp_ln12_reg_279 = ap_const_lv1_0)) then 
                ap_phi_mux_val_assign1_phi_fu_202_p6 <= cycle_reg_270;
            else 
                ap_phi_mux_val_assign1_phi_fu_202_p6 <= val_assign1_reg_198;
            end if;
        else 
            ap_phi_mux_val_assign1_phi_fu_202_p6 <= val_assign1_reg_198;
        end if; 
    end process;


    ap_predicate_op34_write_state3_assign_proc : process(odd_cycle_reg_266, tmp_1_reg_275)
    begin
                ap_predicate_op34_write_state3 <= ((tmp_1_reg_275 = ap_const_lv1_0) and (odd_cycle_reg_266 = ap_const_lv1_1));
    end process;


    ap_predicate_op36_write_state3_assign_proc : process(odd_cycle_reg_266, tmp_1_reg_275)
    begin
                ap_predicate_op36_write_state3 <= ((tmp_1_reg_275 = ap_const_lv1_1) and (odd_cycle_reg_266 = ap_const_lv1_1));
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    cycle_fu_230_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(ap_phi_mux_val_assign1_phi_fu_202_p6));
    icmp_ln12_fu_244_p2 <= "1" when (ap_phi_mux_val_assign1_phi_fu_202_p6 = ap_const_lv9_1FF) else "0";
    in_i_fu_212_p1 <= input_data_TDATA_int(16 - 1 downto 0);

    input_data_TDATA_blk_n_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, input_data_TVALID_int)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_data_TDATA_blk_n <= input_data_TVALID_int;
        else 
            input_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_data_TREADY_assign_proc : process(input_data_TVALID, regslice_reverse_input_data_U_ack_in)
    begin
        if (((input_data_TVALID = ap_const_logic_1) and (regslice_reverse_input_data_U_ack_in = ap_const_logic_1))) then 
            input_data_TREADY <= ap_const_logic_1;
        else 
            input_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_data_TREADY_int_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_data_TREADY_int <= ap_const_logic_1;
        else 
            input_data_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(real_start, icmp_ln12_fu_244_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln12_fu_244_p2 = ap_const_lv1_1) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op32 <= (A_V_q_full_n and A_V_i_full_n);
    io_acc_block_signal_op34 <= (B_V_q_full_n and B_V_i_full_n);
    io_acc_block_signal_op36 <= (C_V_q_full_n and C_V_i_full_n);
    odd_cycle_fu_226_p1 <= ap_phi_mux_val_assign1_phi_fu_202_p6(1 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
