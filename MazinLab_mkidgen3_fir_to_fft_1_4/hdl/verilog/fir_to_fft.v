// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_to_fft,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.563000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=2736,HLS_SYN_LUT=850,HLS_VERSION=2019_2_1}" *)

module fir_to_fft (
        ap_clk,
        ap_rst_n,
        input_0_TDATA,
        input_0_TVALID,
        input_0_TREADY,
        input_1_TDATA,
        input_1_TVALID,
        input_1_TREADY,
        input_2_TDATA,
        input_2_TVALID,
        input_2_TREADY,
        input_3_TDATA,
        input_3_TVALID,
        input_3_TREADY,
        input_4_TDATA,
        input_4_TVALID,
        input_4_TREADY,
        input_5_TDATA,
        input_5_TVALID,
        input_5_TREADY,
        input_6_TDATA,
        input_6_TVALID,
        input_6_TREADY,
        input_7_TDATA,
        input_7_TVALID,
        input_7_TREADY,
        input_8_TDATA,
        input_8_TVALID,
        input_8_TREADY,
        input_9_TDATA,
        input_9_TVALID,
        input_9_TREADY,
        input_10_TDATA,
        input_10_TVALID,
        input_10_TREADY,
        input_11_TDATA,
        input_11_TVALID,
        input_11_TREADY,
        input_12_TDATA,
        input_12_TVALID,
        input_12_TREADY,
        input_13_TDATA,
        input_13_TVALID,
        input_13_TREADY,
        input_14_TDATA,
        input_14_TVALID,
        input_14_TREADY,
        input_15_TDATA,
        input_15_TVALID,
        input_15_TREADY,
        input_0_TLAST,
        input_1_TLAST,
        input_2_TLAST,
        input_3_TLAST,
        input_4_TLAST,
        input_5_TLAST,
        input_6_TLAST,
        input_7_TLAST,
        input_8_TLAST,
        input_9_TLAST,
        input_10_TLAST,
        input_11_TLAST,
        input_12_TLAST,
        input_13_TLAST,
        input_14_TLAST,
        input_15_TLAST,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_0_TDATA;
input   input_0_TVALID;
output   input_0_TREADY;
input  [31:0] input_1_TDATA;
input   input_1_TVALID;
output   input_1_TREADY;
input  [31:0] input_2_TDATA;
input   input_2_TVALID;
output   input_2_TREADY;
input  [31:0] input_3_TDATA;
input   input_3_TVALID;
output   input_3_TREADY;
input  [31:0] input_4_TDATA;
input   input_4_TVALID;
output   input_4_TREADY;
input  [31:0] input_5_TDATA;
input   input_5_TVALID;
output   input_5_TREADY;
input  [31:0] input_6_TDATA;
input   input_6_TVALID;
output   input_6_TREADY;
input  [31:0] input_7_TDATA;
input   input_7_TVALID;
output   input_7_TREADY;
input  [31:0] input_8_TDATA;
input   input_8_TVALID;
output   input_8_TREADY;
input  [31:0] input_9_TDATA;
input   input_9_TVALID;
output   input_9_TREADY;
input  [31:0] input_10_TDATA;
input   input_10_TVALID;
output   input_10_TREADY;
input  [31:0] input_11_TDATA;
input   input_11_TVALID;
output   input_11_TREADY;
input  [31:0] input_12_TDATA;
input   input_12_TVALID;
output   input_12_TREADY;
input  [31:0] input_13_TDATA;
input   input_13_TVALID;
output   input_13_TREADY;
input  [31:0] input_14_TDATA;
input   input_14_TVALID;
output   input_14_TREADY;
input  [31:0] input_15_TDATA;
input   input_15_TVALID;
output   input_15_TREADY;
input  [0:0] input_0_TLAST;
input  [0:0] input_1_TLAST;
input  [0:0] input_2_TLAST;
input  [0:0] input_3_TLAST;
input  [0:0] input_4_TLAST;
input  [0:0] input_5_TLAST;
input  [0:0] input_6_TLAST;
input  [0:0] input_7_TLAST;
input  [0:0] input_8_TLAST;
input  [0:0] input_9_TLAST;
input  [0:0] input_10_TLAST;
input  [0:0] input_11_TLAST;
input  [0:0] input_12_TLAST;
input  [0:0] input_13_TLAST;
input  [0:0] input_14_TLAST;
input  [0:0] input_15_TLAST;
output  [511:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [0:0] output_r_TLAST;

reg input_0_TREADY;
reg input_1_TREADY;
reg input_2_TREADY;
reg input_3_TREADY;
reg input_4_TREADY;
reg input_5_TREADY;
reg input_6_TREADY;
reg input_7_TREADY;
reg input_8_TREADY;
reg input_9_TREADY;
reg input_10_TREADY;
reg input_11_TREADY;
reg input_12_TREADY;
reg input_13_TREADY;
reg input_14_TREADY;
reg input_15_TREADY;

 reg    ap_rst_n_inv;
reg   [8:0] cycle_V;
reg   [0:0] bwrite;
wire   [8:0] buffer_data_V_0_address0;
reg    buffer_data_V_0_ce0;
reg    buffer_data_V_0_we0;
wire   [8:0] buffer_data_V_0_address1;
reg    buffer_data_V_0_ce1;
wire   [511:0] buffer_data_V_0_q1;
wire   [8:0] buffer_data_V_1_address0;
reg    buffer_data_V_1_ce0;
reg    buffer_data_V_1_we0;
wire   [8:0] buffer_data_V_1_address1;
reg    buffer_data_V_1_ce1;
wire   [511:0] buffer_data_V_1_q1;
reg    input_0_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    input_1_TDATA_blk_n;
reg    input_2_TDATA_blk_n;
reg    input_3_TDATA_blk_n;
reg    input_4_TDATA_blk_n;
reg    input_5_TDATA_blk_n;
reg    input_6_TDATA_blk_n;
reg    input_7_TDATA_blk_n;
reg    input_8_TDATA_blk_n;
reg    input_9_TDATA_blk_n;
reg    input_10_TDATA_blk_n;
reg    input_11_TDATA_blk_n;
reg    input_12_TDATA_blk_n;
reg    input_13_TDATA_blk_n;
reg    input_14_TDATA_blk_n;
reg    input_15_TDATA_blk_n;
reg    output_r_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [31:0] input_0_data_V_tmp_reg_550;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    regslice_forward_output_data_V_U_apdone_blk;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] input_1_data_V_tmp_reg_555;
reg   [31:0] input_2_data_V_tmp_reg_560;
reg   [31:0] input_3_data_V_tmp_reg_565;
reg   [31:0] input_4_data_V_tmp_reg_570;
reg   [31:0] input_5_data_V_tmp_reg_575;
reg   [31:0] input_6_data_V_tmp_reg_580;
reg   [31:0] input_7_data_V_tmp_reg_585;
reg   [31:0] input_8_data_V_tmp_reg_590;
reg   [31:0] input_9_data_V_tmp_reg_595;
reg   [31:0] input_10_data_V_tmp_reg_600;
reg   [31:0] input_11_data_V_tmp_reg_605;
reg   [31:0] input_12_data_V_tmp_reg_610;
reg   [31:0] input_13_data_V_tmp_reg_615;
reg   [31:0] input_14_data_V_tmp_reg_620;
reg   [31:0] input_15_data_V_tmp_reg_625;
reg   [8:0] p_Val2_s_reg_630;
reg   [8:0] p_Val2_s_reg_630_pp0_iter1_reg;
wire   [10:0] ndx_fu_464_p2;
reg   [10:0] ndx_reg_638;
wire   [0:0] bwrite_load_load_fu_475_p1;
reg   [0:0] bwrite_load_reg_643;
reg   [0:0] bwrite_load_reg_643_pp0_iter2_reg;
reg   [0:0] bwrite_load_reg_643_pp0_iter3_reg;
reg   [0:0] bwrite_load_reg_643_pp0_iter4_reg;
wire   [0:0] icmp_ln879_1_fu_527_p2;
wire   [0:0] or_ln75_fu_532_p2;
reg   [0:0] or_ln75_reg_663;
reg   [0:0] or_ln75_reg_663_pp0_iter3_reg;
reg   [0:0] or_ln75_reg_663_pp0_iter4_reg;
reg   [511:0] buffer_data_V_0_load_reg_668;
reg    ap_enable_reg_pp0_iter4;
reg   [511:0] buffer_data_V_1_load_reg_673;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire  signed [63:0] sext_ln67_fu_470_p1;
wire   [63:0] zext_ln544_fu_512_p1;
wire   [8:0] add_ln700_fu_501_p2;
reg   [8:0] ap_sig_allocacmp_p_Val2_s;
wire   [0:0] xor_ln68_fu_517_p2;
reg   [0:0] ap_sig_allocacmp_bwrite_load;
reg    ap_block_pp0_stage0_01001;
wire   [511:0] tmp_1_fu_479_p17;
wire   [0:0] tmp_fu_392_p3;
wire   [7:0] and_ln_fu_400_p3;
wire   [8:0] zext_ln65_fu_408_p1;
wire   [8:0] xor_ln65_fu_416_p2;
wire   [9:0] zext_ln65_2_fu_422_p1;
wire   [9:0] zext_ln65_1_fu_412_p1;
wire   [0:0] trunc_ln1371_fu_388_p1;
wire   [9:0] sub_ln65_fu_426_p2;
wire   [9:0] select_ln65_fu_432_p3;
wire   [9:0] and_ln65_fu_440_p2;
wire   [7:0] tmp_2_fu_450_p4;
wire  signed [10:0] sext_ln1467_fu_446_p1;
wire   [10:0] zext_ln65_3_fu_460_p1;
wire   [0:0] icmp_ln879_fu_522_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_reverse_input_0_data_V_U_apdone_blk;
wire   [31:0] input_0_TDATA_int;
wire    input_0_TVALID_int;
reg    input_0_TREADY_int;
wire    regslice_reverse_input_0_data_V_U_ack_in;
wire    regslice_reverse_input_1_data_V_U_apdone_blk;
wire   [31:0] input_1_TDATA_int;
wire    input_1_TVALID_int;
reg    input_1_TREADY_int;
wire    regslice_reverse_input_1_data_V_U_ack_in;
wire    regslice_reverse_input_2_data_V_U_apdone_blk;
wire   [31:0] input_2_TDATA_int;
wire    input_2_TVALID_int;
reg    input_2_TREADY_int;
wire    regslice_reverse_input_2_data_V_U_ack_in;
wire    regslice_reverse_input_3_data_V_U_apdone_blk;
wire   [31:0] input_3_TDATA_int;
wire    input_3_TVALID_int;
reg    input_3_TREADY_int;
wire    regslice_reverse_input_3_data_V_U_ack_in;
wire    regslice_reverse_input_4_data_V_U_apdone_blk;
wire   [31:0] input_4_TDATA_int;
wire    input_4_TVALID_int;
reg    input_4_TREADY_int;
wire    regslice_reverse_input_4_data_V_U_ack_in;
wire    regslice_reverse_input_5_data_V_U_apdone_blk;
wire   [31:0] input_5_TDATA_int;
wire    input_5_TVALID_int;
reg    input_5_TREADY_int;
wire    regslice_reverse_input_5_data_V_U_ack_in;
wire    regslice_reverse_input_6_data_V_U_apdone_blk;
wire   [31:0] input_6_TDATA_int;
wire    input_6_TVALID_int;
reg    input_6_TREADY_int;
wire    regslice_reverse_input_6_data_V_U_ack_in;
wire    regslice_reverse_input_7_data_V_U_apdone_blk;
wire   [31:0] input_7_TDATA_int;
wire    input_7_TVALID_int;
reg    input_7_TREADY_int;
wire    regslice_reverse_input_7_data_V_U_ack_in;
wire    regslice_reverse_input_8_data_V_U_apdone_blk;
wire   [31:0] input_8_TDATA_int;
wire    input_8_TVALID_int;
reg    input_8_TREADY_int;
wire    regslice_reverse_input_8_data_V_U_ack_in;
wire    regslice_reverse_input_9_data_V_U_apdone_blk;
wire   [31:0] input_9_TDATA_int;
wire    input_9_TVALID_int;
reg    input_9_TREADY_int;
wire    regslice_reverse_input_9_data_V_U_ack_in;
wire    regslice_reverse_input_10_data_V_U_apdone_blk;
wire   [31:0] input_10_TDATA_int;
wire    input_10_TVALID_int;
reg    input_10_TREADY_int;
wire    regslice_reverse_input_10_data_V_U_ack_in;
wire    regslice_reverse_input_11_data_V_U_apdone_blk;
wire   [31:0] input_11_TDATA_int;
wire    input_11_TVALID_int;
reg    input_11_TREADY_int;
wire    regslice_reverse_input_11_data_V_U_ack_in;
wire    regslice_reverse_input_12_data_V_U_apdone_blk;
wire   [31:0] input_12_TDATA_int;
wire    input_12_TVALID_int;
reg    input_12_TREADY_int;
wire    regslice_reverse_input_12_data_V_U_ack_in;
wire    regslice_reverse_input_13_data_V_U_apdone_blk;
wire   [31:0] input_13_TDATA_int;
wire    input_13_TVALID_int;
reg    input_13_TREADY_int;
wire    regslice_reverse_input_13_data_V_U_ack_in;
wire    regslice_reverse_input_14_data_V_U_apdone_blk;
wire   [31:0] input_14_TDATA_int;
wire    input_14_TVALID_int;
reg    input_14_TREADY_int;
wire    regslice_reverse_input_14_data_V_U_ack_in;
wire    regslice_reverse_input_15_data_V_U_apdone_blk;
wire   [31:0] input_15_TDATA_int;
wire    input_15_TVALID_int;
reg    input_15_TREADY_int;
wire    regslice_reverse_input_15_data_V_U_ack_in;
wire    regslice_reverse_input_0_last_V_U_apdone_blk;
wire   [0:0] input_0_TLAST_int;
wire    regslice_reverse_input_0_last_V_U_vld_out;
wire    regslice_reverse_input_0_last_V_U_ack_in;
wire    regslice_reverse_input_1_last_V_U_apdone_blk;
wire   [0:0] input_1_TLAST_int;
wire    regslice_reverse_input_1_last_V_U_vld_out;
wire    regslice_reverse_input_1_last_V_U_ack_in;
wire    regslice_reverse_input_2_last_V_U_apdone_blk;
wire   [0:0] input_2_TLAST_int;
wire    regslice_reverse_input_2_last_V_U_vld_out;
wire    regslice_reverse_input_2_last_V_U_ack_in;
wire    regslice_reverse_input_3_last_V_U_apdone_blk;
wire   [0:0] input_3_TLAST_int;
wire    regslice_reverse_input_3_last_V_U_vld_out;
wire    regslice_reverse_input_3_last_V_U_ack_in;
wire    regslice_reverse_input_4_last_V_U_apdone_blk;
wire   [0:0] input_4_TLAST_int;
wire    regslice_reverse_input_4_last_V_U_vld_out;
wire    regslice_reverse_input_4_last_V_U_ack_in;
wire    regslice_reverse_input_5_last_V_U_apdone_blk;
wire   [0:0] input_5_TLAST_int;
wire    regslice_reverse_input_5_last_V_U_vld_out;
wire    regslice_reverse_input_5_last_V_U_ack_in;
wire    regslice_reverse_input_6_last_V_U_apdone_blk;
wire   [0:0] input_6_TLAST_int;
wire    regslice_reverse_input_6_last_V_U_vld_out;
wire    regslice_reverse_input_6_last_V_U_ack_in;
wire    regslice_reverse_input_7_last_V_U_apdone_blk;
wire   [0:0] input_7_TLAST_int;
wire    regslice_reverse_input_7_last_V_U_vld_out;
wire    regslice_reverse_input_7_last_V_U_ack_in;
wire    regslice_reverse_input_8_last_V_U_apdone_blk;
wire   [0:0] input_8_TLAST_int;
wire    regslice_reverse_input_8_last_V_U_vld_out;
wire    regslice_reverse_input_8_last_V_U_ack_in;
wire    regslice_reverse_input_9_last_V_U_apdone_blk;
wire   [0:0] input_9_TLAST_int;
wire    regslice_reverse_input_9_last_V_U_vld_out;
wire    regslice_reverse_input_9_last_V_U_ack_in;
wire    regslice_reverse_input_10_last_V_U_apdone_blk;
wire   [0:0] input_10_TLAST_int;
wire    regslice_reverse_input_10_last_V_U_vld_out;
wire    regslice_reverse_input_10_last_V_U_ack_in;
wire    regslice_reverse_input_11_last_V_U_apdone_blk;
wire   [0:0] input_11_TLAST_int;
wire    regslice_reverse_input_11_last_V_U_vld_out;
wire    regslice_reverse_input_11_last_V_U_ack_in;
wire    regslice_reverse_input_12_last_V_U_apdone_blk;
wire   [0:0] input_12_TLAST_int;
wire    regslice_reverse_input_12_last_V_U_vld_out;
wire    regslice_reverse_input_12_last_V_U_ack_in;
wire    regslice_reverse_input_13_last_V_U_apdone_blk;
wire   [0:0] input_13_TLAST_int;
wire    regslice_reverse_input_13_last_V_U_vld_out;
wire    regslice_reverse_input_13_last_V_U_ack_in;
wire    regslice_reverse_input_14_last_V_U_apdone_blk;
wire   [0:0] input_14_TLAST_int;
wire    regslice_reverse_input_14_last_V_U_vld_out;
wire    regslice_reverse_input_14_last_V_U_ack_in;
wire    regslice_reverse_input_15_last_V_U_apdone_blk;
wire   [0:0] input_15_TLAST_int;
wire    regslice_reverse_input_15_last_V_U_vld_out;
wire    regslice_reverse_input_15_last_V_U_ack_in;
wire   [511:0] output_r_TDATA_int;
reg    output_r_TVALID_int;
wire    output_r_TREADY_int;
wire    regslice_forward_output_data_V_U_vld_out;
wire    regslice_forward_output_last_V_U_apdone_blk;
wire    regslice_forward_output_last_V_U_ack_in_dummy;
wire    regslice_forward_output_last_V_U_vld_out;

// power-on initialization
initial begin
#0 cycle_V = 9'd0;
#0 bwrite = 1'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

fir_to_fft_bufferbkb #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_data_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_data_V_0_address0),
    .ce0(buffer_data_V_0_ce0),
    .we0(buffer_data_V_0_we0),
    .d0(tmp_1_fu_479_p17),
    .address1(buffer_data_V_0_address1),
    .ce1(buffer_data_V_0_ce1),
    .q1(buffer_data_V_0_q1)
);

fir_to_fft_bufferbkb #(
    .DataWidth( 512 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
buffer_data_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_data_V_1_address0),
    .ce0(buffer_data_V_1_ce0),
    .we0(buffer_data_V_1_we0),
    .d0(tmp_1_fu_479_p17),
    .address1(buffer_data_V_1_address1),
    .ce1(buffer_data_V_1_ce1),
    .q1(buffer_data_V_1_q1)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_0_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_0_TDATA),
    .vld_in(input_0_TVALID),
    .ack_in(regslice_reverse_input_0_data_V_U_ack_in),
    .data_out(input_0_TDATA_int),
    .vld_out(input_0_TVALID_int),
    .ack_out(input_0_TREADY_int),
    .apdone_blk(regslice_reverse_input_0_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_1_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_1_TDATA),
    .vld_in(input_1_TVALID),
    .ack_in(regslice_reverse_input_1_data_V_U_ack_in),
    .data_out(input_1_TDATA_int),
    .vld_out(input_1_TVALID_int),
    .ack_out(input_1_TREADY_int),
    .apdone_blk(regslice_reverse_input_1_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_2_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_2_TDATA),
    .vld_in(input_2_TVALID),
    .ack_in(regslice_reverse_input_2_data_V_U_ack_in),
    .data_out(input_2_TDATA_int),
    .vld_out(input_2_TVALID_int),
    .ack_out(input_2_TREADY_int),
    .apdone_blk(regslice_reverse_input_2_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_3_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_3_TDATA),
    .vld_in(input_3_TVALID),
    .ack_in(regslice_reverse_input_3_data_V_U_ack_in),
    .data_out(input_3_TDATA_int),
    .vld_out(input_3_TVALID_int),
    .ack_out(input_3_TREADY_int),
    .apdone_blk(regslice_reverse_input_3_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_4_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_4_TDATA),
    .vld_in(input_4_TVALID),
    .ack_in(regslice_reverse_input_4_data_V_U_ack_in),
    .data_out(input_4_TDATA_int),
    .vld_out(input_4_TVALID_int),
    .ack_out(input_4_TREADY_int),
    .apdone_blk(regslice_reverse_input_4_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_5_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_5_TDATA),
    .vld_in(input_5_TVALID),
    .ack_in(regslice_reverse_input_5_data_V_U_ack_in),
    .data_out(input_5_TDATA_int),
    .vld_out(input_5_TVALID_int),
    .ack_out(input_5_TREADY_int),
    .apdone_blk(regslice_reverse_input_5_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_6_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_6_TDATA),
    .vld_in(input_6_TVALID),
    .ack_in(regslice_reverse_input_6_data_V_U_ack_in),
    .data_out(input_6_TDATA_int),
    .vld_out(input_6_TVALID_int),
    .ack_out(input_6_TREADY_int),
    .apdone_blk(regslice_reverse_input_6_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_7_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_7_TDATA),
    .vld_in(input_7_TVALID),
    .ack_in(regslice_reverse_input_7_data_V_U_ack_in),
    .data_out(input_7_TDATA_int),
    .vld_out(input_7_TVALID_int),
    .ack_out(input_7_TREADY_int),
    .apdone_blk(regslice_reverse_input_7_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_8_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_8_TDATA),
    .vld_in(input_8_TVALID),
    .ack_in(regslice_reverse_input_8_data_V_U_ack_in),
    .data_out(input_8_TDATA_int),
    .vld_out(input_8_TVALID_int),
    .ack_out(input_8_TREADY_int),
    .apdone_blk(regslice_reverse_input_8_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_9_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_9_TDATA),
    .vld_in(input_9_TVALID),
    .ack_in(regslice_reverse_input_9_data_V_U_ack_in),
    .data_out(input_9_TDATA_int),
    .vld_out(input_9_TVALID_int),
    .ack_out(input_9_TREADY_int),
    .apdone_blk(regslice_reverse_input_9_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_10_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_10_TDATA),
    .vld_in(input_10_TVALID),
    .ack_in(regslice_reverse_input_10_data_V_U_ack_in),
    .data_out(input_10_TDATA_int),
    .vld_out(input_10_TVALID_int),
    .ack_out(input_10_TREADY_int),
    .apdone_blk(regslice_reverse_input_10_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_11_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_11_TDATA),
    .vld_in(input_11_TVALID),
    .ack_in(regslice_reverse_input_11_data_V_U_ack_in),
    .data_out(input_11_TDATA_int),
    .vld_out(input_11_TVALID_int),
    .ack_out(input_11_TREADY_int),
    .apdone_blk(regslice_reverse_input_11_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_12_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_12_TDATA),
    .vld_in(input_12_TVALID),
    .ack_in(regslice_reverse_input_12_data_V_U_ack_in),
    .data_out(input_12_TDATA_int),
    .vld_out(input_12_TVALID_int),
    .ack_out(input_12_TREADY_int),
    .apdone_blk(regslice_reverse_input_12_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_13_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_13_TDATA),
    .vld_in(input_13_TVALID),
    .ack_in(regslice_reverse_input_13_data_V_U_ack_in),
    .data_out(input_13_TDATA_int),
    .vld_out(input_13_TVALID_int),
    .ack_out(input_13_TREADY_int),
    .apdone_blk(regslice_reverse_input_13_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_14_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_14_TDATA),
    .vld_in(input_14_TVALID),
    .ack_in(regslice_reverse_input_14_data_V_U_ack_in),
    .data_out(input_14_TDATA_int),
    .vld_out(input_14_TVALID_int),
    .ack_out(input_14_TREADY_int),
    .apdone_blk(regslice_reverse_input_14_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 32 ))
regslice_reverse_input_15_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_15_TDATA),
    .vld_in(input_15_TVALID),
    .ack_in(regslice_reverse_input_15_data_V_U_ack_in),
    .data_out(input_15_TDATA_int),
    .vld_out(input_15_TVALID_int),
    .ack_out(input_15_TREADY_int),
    .apdone_blk(regslice_reverse_input_15_data_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_0_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_0_TLAST),
    .vld_in(input_0_TVALID),
    .ack_in(regslice_reverse_input_0_last_V_U_ack_in),
    .data_out(input_0_TLAST_int),
    .vld_out(regslice_reverse_input_0_last_V_U_vld_out),
    .ack_out(input_0_TREADY_int),
    .apdone_blk(regslice_reverse_input_0_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_1_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_1_TLAST),
    .vld_in(input_1_TVALID),
    .ack_in(regslice_reverse_input_1_last_V_U_ack_in),
    .data_out(input_1_TLAST_int),
    .vld_out(regslice_reverse_input_1_last_V_U_vld_out),
    .ack_out(input_1_TREADY_int),
    .apdone_blk(regslice_reverse_input_1_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_2_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_2_TLAST),
    .vld_in(input_2_TVALID),
    .ack_in(regslice_reverse_input_2_last_V_U_ack_in),
    .data_out(input_2_TLAST_int),
    .vld_out(regslice_reverse_input_2_last_V_U_vld_out),
    .ack_out(input_2_TREADY_int),
    .apdone_blk(regslice_reverse_input_2_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_3_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_3_TLAST),
    .vld_in(input_3_TVALID),
    .ack_in(regslice_reverse_input_3_last_V_U_ack_in),
    .data_out(input_3_TLAST_int),
    .vld_out(regslice_reverse_input_3_last_V_U_vld_out),
    .ack_out(input_3_TREADY_int),
    .apdone_blk(regslice_reverse_input_3_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_4_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_4_TLAST),
    .vld_in(input_4_TVALID),
    .ack_in(regslice_reverse_input_4_last_V_U_ack_in),
    .data_out(input_4_TLAST_int),
    .vld_out(regslice_reverse_input_4_last_V_U_vld_out),
    .ack_out(input_4_TREADY_int),
    .apdone_blk(regslice_reverse_input_4_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_5_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_5_TLAST),
    .vld_in(input_5_TVALID),
    .ack_in(regslice_reverse_input_5_last_V_U_ack_in),
    .data_out(input_5_TLAST_int),
    .vld_out(regslice_reverse_input_5_last_V_U_vld_out),
    .ack_out(input_5_TREADY_int),
    .apdone_blk(regslice_reverse_input_5_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_6_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_6_TLAST),
    .vld_in(input_6_TVALID),
    .ack_in(regslice_reverse_input_6_last_V_U_ack_in),
    .data_out(input_6_TLAST_int),
    .vld_out(regslice_reverse_input_6_last_V_U_vld_out),
    .ack_out(input_6_TREADY_int),
    .apdone_blk(regslice_reverse_input_6_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_7_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_7_TLAST),
    .vld_in(input_7_TVALID),
    .ack_in(regslice_reverse_input_7_last_V_U_ack_in),
    .data_out(input_7_TLAST_int),
    .vld_out(regslice_reverse_input_7_last_V_U_vld_out),
    .ack_out(input_7_TREADY_int),
    .apdone_blk(regslice_reverse_input_7_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_8_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_8_TLAST),
    .vld_in(input_8_TVALID),
    .ack_in(regslice_reverse_input_8_last_V_U_ack_in),
    .data_out(input_8_TLAST_int),
    .vld_out(regslice_reverse_input_8_last_V_U_vld_out),
    .ack_out(input_8_TREADY_int),
    .apdone_blk(regslice_reverse_input_8_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_9_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_9_TLAST),
    .vld_in(input_9_TVALID),
    .ack_in(regslice_reverse_input_9_last_V_U_ack_in),
    .data_out(input_9_TLAST_int),
    .vld_out(regslice_reverse_input_9_last_V_U_vld_out),
    .ack_out(input_9_TREADY_int),
    .apdone_blk(regslice_reverse_input_9_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_10_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_10_TLAST),
    .vld_in(input_10_TVALID),
    .ack_in(regslice_reverse_input_10_last_V_U_ack_in),
    .data_out(input_10_TLAST_int),
    .vld_out(regslice_reverse_input_10_last_V_U_vld_out),
    .ack_out(input_10_TREADY_int),
    .apdone_blk(regslice_reverse_input_10_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_11_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_11_TLAST),
    .vld_in(input_11_TVALID),
    .ack_in(regslice_reverse_input_11_last_V_U_ack_in),
    .data_out(input_11_TLAST_int),
    .vld_out(regslice_reverse_input_11_last_V_U_vld_out),
    .ack_out(input_11_TREADY_int),
    .apdone_blk(regslice_reverse_input_11_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_12_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_12_TLAST),
    .vld_in(input_12_TVALID),
    .ack_in(regslice_reverse_input_12_last_V_U_ack_in),
    .data_out(input_12_TLAST_int),
    .vld_out(regslice_reverse_input_12_last_V_U_vld_out),
    .ack_out(input_12_TREADY_int),
    .apdone_blk(regslice_reverse_input_12_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_13_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_13_TLAST),
    .vld_in(input_13_TVALID),
    .ack_in(regslice_reverse_input_13_last_V_U_ack_in),
    .data_out(input_13_TLAST_int),
    .vld_out(regslice_reverse_input_13_last_V_U_vld_out),
    .ack_out(input_13_TREADY_int),
    .apdone_blk(regslice_reverse_input_13_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_14_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_14_TLAST),
    .vld_in(input_14_TVALID),
    .ack_in(regslice_reverse_input_14_last_V_U_ack_in),
    .data_out(input_14_TLAST_int),
    .vld_out(regslice_reverse_input_14_last_V_U_vld_out),
    .ack_out(input_14_TREADY_int),
    .apdone_blk(regslice_reverse_input_14_last_V_U_apdone_blk)
);

regslice_reverse #(
    .DataWidth( 1 ))
regslice_reverse_input_15_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_15_TLAST),
    .vld_in(input_15_TVALID),
    .ack_in(regslice_reverse_input_15_last_V_U_ack_in),
    .data_out(input_15_TLAST_int),
    .vld_out(regslice_reverse_input_15_last_V_U_vld_out),
    .ack_out(input_15_TREADY_int),
    .apdone_blk(regslice_reverse_input_15_last_V_U_apdone_blk)
);

regslice_forward #(
    .DataWidth( 512 ))
regslice_forward_output_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int),
    .vld_in(output_r_TVALID_int),
    .ack_in(output_r_TREADY_int),
    .data_out(output_r_TDATA),
    .vld_out(regslice_forward_output_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_data_V_U_apdone_blk)
);

regslice_forward #(
    .DataWidth( 1 ))
regslice_forward_output_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(or_ln75_reg_663_pp0_iter4_reg),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_forward_output_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_forward_output_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((bwrite_load_reg_643_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_data_V_0_load_reg_668 <= buffer_data_V_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((bwrite_load_reg_643_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_data_V_1_load_reg_673 <= buffer_data_V_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln879_1_fu_527_p2 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bwrite <= xor_ln68_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bwrite_load_reg_643 <= ap_sig_allocacmp_bwrite_load;
        input_0_data_V_tmp_reg_550 <= input_0_TDATA_int;
        input_10_data_V_tmp_reg_600 <= input_10_TDATA_int;
        input_11_data_V_tmp_reg_605 <= input_11_TDATA_int;
        input_12_data_V_tmp_reg_610 <= input_12_TDATA_int;
        input_13_data_V_tmp_reg_615 <= input_13_TDATA_int;
        input_14_data_V_tmp_reg_620 <= input_14_TDATA_int;
        input_15_data_V_tmp_reg_625 <= input_15_TDATA_int;
        input_1_data_V_tmp_reg_555 <= input_1_TDATA_int;
        input_2_data_V_tmp_reg_560 <= input_2_TDATA_int;
        input_3_data_V_tmp_reg_565 <= input_3_TDATA_int;
        input_4_data_V_tmp_reg_570 <= input_4_TDATA_int;
        input_5_data_V_tmp_reg_575 <= input_5_TDATA_int;
        input_6_data_V_tmp_reg_580 <= input_6_TDATA_int;
        input_7_data_V_tmp_reg_585 <= input_7_TDATA_int;
        input_8_data_V_tmp_reg_590 <= input_8_TDATA_int;
        input_9_data_V_tmp_reg_595 <= input_9_TDATA_int;
        ndx_reg_638 <= ndx_fu_464_p2;
        p_Val2_s_reg_630 <= ap_sig_allocacmp_p_Val2_s;
        p_Val2_s_reg_630_pp0_iter1_reg <= p_Val2_s_reg_630;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        bwrite_load_reg_643_pp0_iter2_reg <= bwrite_load_reg_643;
        bwrite_load_reg_643_pp0_iter3_reg <= bwrite_load_reg_643_pp0_iter2_reg;
        bwrite_load_reg_643_pp0_iter4_reg <= bwrite_load_reg_643_pp0_iter3_reg;
        or_ln75_reg_663 <= or_ln75_fu_532_p2;
        or_ln75_reg_663_pp0_iter3_reg <= or_ln75_reg_663;
        or_ln75_reg_663_pp0_iter4_reg <= or_ln75_reg_663_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cycle_V <= add_ln700_fu_501_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((icmp_ln879_1_fu_527_p2 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_bwrite_load = xor_ln68_fu_517_p2;
    end else begin
        ap_sig_allocacmp_bwrite_load = bwrite;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_p_Val2_s = add_ln700_fu_501_p2;
    end else begin
        ap_sig_allocacmp_p_Val2_s = cycle_V;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_data_V_0_ce0 = 1'b1;
    end else begin
        buffer_data_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        buffer_data_V_0_ce1 = 1'b1;
    end else begin
        buffer_data_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((bwrite_load_load_fu_475_p1 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_data_V_0_we0 = 1'b1;
    end else begin
        buffer_data_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_data_V_1_ce0 = 1'b1;
    end else begin
        buffer_data_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        buffer_data_V_1_ce1 = 1'b1;
    end else begin
        buffer_data_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((bwrite_load_load_fu_475_p1 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_data_V_1_we0 = 1'b1;
    end else begin
        buffer_data_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_0_TDATA_blk_n = input_0_TVALID_int;
    end else begin
        input_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_0_TVALID == 1'b1) & (regslice_reverse_input_0_data_V_U_ack_in == 1'b1))) begin
        input_0_TREADY = 1'b1;
    end else begin
        input_0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_0_TREADY_int = 1'b1;
    end else begin
        input_0_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_10_TDATA_blk_n = input_10_TVALID_int;
    end else begin
        input_10_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_10_data_V_U_ack_in == 1'b1) & (input_10_TVALID == 1'b1))) begin
        input_10_TREADY = 1'b1;
    end else begin
        input_10_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_10_TREADY_int = 1'b1;
    end else begin
        input_10_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_11_TDATA_blk_n = input_11_TVALID_int;
    end else begin
        input_11_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_11_data_V_U_ack_in == 1'b1) & (input_11_TVALID == 1'b1))) begin
        input_11_TREADY = 1'b1;
    end else begin
        input_11_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_11_TREADY_int = 1'b1;
    end else begin
        input_11_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_12_TDATA_blk_n = input_12_TVALID_int;
    end else begin
        input_12_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_12_data_V_U_ack_in == 1'b1) & (input_12_TVALID == 1'b1))) begin
        input_12_TREADY = 1'b1;
    end else begin
        input_12_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_12_TREADY_int = 1'b1;
    end else begin
        input_12_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_13_TDATA_blk_n = input_13_TVALID_int;
    end else begin
        input_13_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_13_data_V_U_ack_in == 1'b1) & (input_13_TVALID == 1'b1))) begin
        input_13_TREADY = 1'b1;
    end else begin
        input_13_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_13_TREADY_int = 1'b1;
    end else begin
        input_13_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_14_TDATA_blk_n = input_14_TVALID_int;
    end else begin
        input_14_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_14_data_V_U_ack_in == 1'b1) & (input_14_TVALID == 1'b1))) begin
        input_14_TREADY = 1'b1;
    end else begin
        input_14_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_14_TREADY_int = 1'b1;
    end else begin
        input_14_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_15_TDATA_blk_n = input_15_TVALID_int;
    end else begin
        input_15_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_15_data_V_U_ack_in == 1'b1) & (input_15_TVALID == 1'b1))) begin
        input_15_TREADY = 1'b1;
    end else begin
        input_15_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_15_TREADY_int = 1'b1;
    end else begin
        input_15_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_1_TDATA_blk_n = input_1_TVALID_int;
    end else begin
        input_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_1_data_V_U_ack_in == 1'b1) & (input_1_TVALID == 1'b1))) begin
        input_1_TREADY = 1'b1;
    end else begin
        input_1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_1_TREADY_int = 1'b1;
    end else begin
        input_1_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_2_TDATA_blk_n = input_2_TVALID_int;
    end else begin
        input_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_2_data_V_U_ack_in == 1'b1) & (input_2_TVALID == 1'b1))) begin
        input_2_TREADY = 1'b1;
    end else begin
        input_2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_2_TREADY_int = 1'b1;
    end else begin
        input_2_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_3_TDATA_blk_n = input_3_TVALID_int;
    end else begin
        input_3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_3_data_V_U_ack_in == 1'b1) & (input_3_TVALID == 1'b1))) begin
        input_3_TREADY = 1'b1;
    end else begin
        input_3_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_3_TREADY_int = 1'b1;
    end else begin
        input_3_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_4_TDATA_blk_n = input_4_TVALID_int;
    end else begin
        input_4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_4_data_V_U_ack_in == 1'b1) & (input_4_TVALID == 1'b1))) begin
        input_4_TREADY = 1'b1;
    end else begin
        input_4_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_4_TREADY_int = 1'b1;
    end else begin
        input_4_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_5_TDATA_blk_n = input_5_TVALID_int;
    end else begin
        input_5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_5_data_V_U_ack_in == 1'b1) & (input_5_TVALID == 1'b1))) begin
        input_5_TREADY = 1'b1;
    end else begin
        input_5_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_5_TREADY_int = 1'b1;
    end else begin
        input_5_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_6_TDATA_blk_n = input_6_TVALID_int;
    end else begin
        input_6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_6_data_V_U_ack_in == 1'b1) & (input_6_TVALID == 1'b1))) begin
        input_6_TREADY = 1'b1;
    end else begin
        input_6_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_6_TREADY_int = 1'b1;
    end else begin
        input_6_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_7_TDATA_blk_n = input_7_TVALID_int;
    end else begin
        input_7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_7_data_V_U_ack_in == 1'b1) & (input_7_TVALID == 1'b1))) begin
        input_7_TREADY = 1'b1;
    end else begin
        input_7_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_7_TREADY_int = 1'b1;
    end else begin
        input_7_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_8_TDATA_blk_n = input_8_TVALID_int;
    end else begin
        input_8_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_8_data_V_U_ack_in == 1'b1) & (input_8_TVALID == 1'b1))) begin
        input_8_TREADY = 1'b1;
    end else begin
        input_8_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_8_TREADY_int = 1'b1;
    end else begin
        input_8_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_9_TDATA_blk_n = input_9_TVALID_int;
    end else begin
        input_9_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_reverse_input_9_data_V_U_ack_in == 1'b1) & (input_9_TVALID == 1'b1))) begin
        input_9_TREADY = 1'b1;
    end else begin
        input_9_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_9_TREADY_int = 1'b1;
    end else begin
        input_9_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_r_TVALID_int = 1'b1;
    end else begin
        output_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_501_p2 = (p_Val2_s_reg_630 + 9'd1);

assign and_ln65_fu_440_p2 = (sub_ln65_fu_426_p2 & select_ln65_fu_432_p3);

assign and_ln_fu_400_p3 = {{tmp_fu_392_p3}, {7'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((regslice_forward_output_data_V_U_apdone_blk == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b1 == 1'b1) & ((input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0) | (input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0) | (input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((output_r_TREADY_int == 1'b0) | (regslice_forward_output_data_V_U_apdone_blk == 1'b1))) | ((output_r_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == 1'b1) & ((input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0) | (input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0) | (input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((output_r_TREADY_int == 1'b0) | (regslice_forward_output_data_V_U_apdone_blk == 1'b1))) | ((output_r_TREADY_int == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == 1'b1) & ((input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0) | (input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0) | (input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((input_15_TVALID_int == 1'b0) | (input_14_TVALID_int == 1'b0) | (input_13_TVALID_int == 1'b0) | (input_12_TVALID_int == 1'b0) | (input_11_TVALID_int == 1'b0) | (input_10_TVALID_int == 1'b0) | (input_9_TVALID_int == 1'b0) | (input_8_TVALID_int == 1'b0) | (input_7_TVALID_int == 1'b0) | (input_6_TVALID_int == 1'b0) | (input_5_TVALID_int == 1'b0) | (input_4_TVALID_int == 1'b0) | (input_3_TVALID_int == 1'b0) | (input_2_TVALID_int == 1'b0) | (input_1_TVALID_int == 1'b0) | (input_0_TVALID_int == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = (regslice_forward_output_data_V_U_apdone_blk == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign buffer_data_V_0_address0 = sext_ln67_fu_470_p1;

assign buffer_data_V_0_address1 = zext_ln544_fu_512_p1;

assign buffer_data_V_1_address0 = sext_ln67_fu_470_p1;

assign buffer_data_V_1_address1 = zext_ln544_fu_512_p1;

assign bwrite_load_load_fu_475_p1 = ap_sig_allocacmp_bwrite_load;

assign icmp_ln879_1_fu_527_p2 = ((p_Val2_s_reg_630_pp0_iter1_reg == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_522_p2 = ((p_Val2_s_reg_630_pp0_iter1_reg == 9'd255) ? 1'b1 : 1'b0);

assign ndx_fu_464_p2 = ($signed(sext_ln1467_fu_446_p1) + $signed(zext_ln65_3_fu_460_p1));

assign or_ln75_fu_532_p2 = (icmp_ln879_fu_522_p2 | icmp_ln879_1_fu_527_p2);

assign output_r_TDATA_int = ((bwrite_load_reg_643_pp0_iter4_reg[0:0] === 1'b1) ? buffer_data_V_0_load_reg_668 : buffer_data_V_1_load_reg_673);

assign output_r_TVALID = regslice_forward_output_data_V_U_vld_out;

assign select_ln65_fu_432_p3 = ((trunc_ln1371_fu_388_p1[0:0] === 1'b1) ? 10'd1023 : 10'd0);

assign sext_ln1467_fu_446_p1 = $signed(and_ln65_fu_440_p2);

assign sext_ln67_fu_470_p1 = $signed(ndx_reg_638);

assign sub_ln65_fu_426_p2 = (zext_ln65_2_fu_422_p1 - zext_ln65_1_fu_412_p1);

assign tmp_1_fu_479_p17 = {{{{{{{{{{{{{{{{input_15_data_V_tmp_reg_625}, {input_14_data_V_tmp_reg_620}}, {input_13_data_V_tmp_reg_615}}, {input_12_data_V_tmp_reg_610}}, {input_11_data_V_tmp_reg_605}}, {input_10_data_V_tmp_reg_600}}, {input_9_data_V_tmp_reg_595}}, {input_8_data_V_tmp_reg_590}}, {input_7_data_V_tmp_reg_585}}, {input_6_data_V_tmp_reg_580}}, {input_5_data_V_tmp_reg_575}}, {input_4_data_V_tmp_reg_570}}, {input_3_data_V_tmp_reg_565}}, {input_2_data_V_tmp_reg_560}}, {input_1_data_V_tmp_reg_555}}, {input_0_data_V_tmp_reg_550}};

assign tmp_2_fu_450_p4 = {{ap_sig_allocacmp_p_Val2_s[8:1]}};

assign tmp_fu_392_p3 = ap_sig_allocacmp_p_Val2_s[32'd8];

assign trunc_ln1371_fu_388_p1 = ap_sig_allocacmp_p_Val2_s[0:0];

assign xor_ln65_fu_416_p2 = (zext_ln65_fu_408_p1 ^ 9'd384);

assign xor_ln68_fu_517_p2 = (bwrite_load_reg_643 ^ 1'd1);

assign zext_ln544_fu_512_p1 = p_Val2_s_reg_630_pp0_iter1_reg;

assign zext_ln65_1_fu_412_p1 = and_ln_fu_400_p3;

assign zext_ln65_2_fu_422_p1 = xor_ln65_fu_416_p2;

assign zext_ln65_3_fu_460_p1 = tmp_2_fu_450_p4;

assign zext_ln65_fu_408_p1 = and_ln_fu_400_p3;

endmodule //fir_to_fft
