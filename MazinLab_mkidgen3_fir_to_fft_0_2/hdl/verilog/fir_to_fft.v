// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_to_fft,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.351750,HLS_SYN_LAT=514,HLS_SYN_TPT=512,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=419,HLS_SYN_LUT=975,HLS_VERSION=2019_2_1}" *)

module fir_to_fft (
        input_data_TDATA,
        output_data_TDATA,
        ap_clk,
        ap_rst_n,
        input_data_TVALID,
        input_data_TREADY,
        output_data_TVALID,
        output_data_TREADY
);


input  [31:0] input_data_TDATA;
output  [31:0] output_data_TDATA;
input   ap_clk;
input   ap_rst_n;
input   input_data_TVALID;
output   input_data_TREADY;
output   output_data_TVALID;
input   output_data_TREADY;

 reg    ap_rst_n_inv;
wire    sort_input_U0_ap_start;
wire    sort_input_U0_ap_done;
wire    sort_input_U0_ap_continue;
wire    sort_input_U0_ap_idle;
wire    sort_input_U0_ap_ready;
wire   [15:0] sort_input_U0_A_V_i_din;
wire    sort_input_U0_A_V_i_write;
wire   [15:0] sort_input_U0_A_V_q_din;
wire    sort_input_U0_A_V_q_write;
wire   [15:0] sort_input_U0_B_V_i_din;
wire    sort_input_U0_B_V_i_write;
wire   [15:0] sort_input_U0_B_V_q_din;
wire    sort_input_U0_B_V_q_write;
wire   [15:0] sort_input_U0_C_V_i_din;
wire    sort_input_U0_C_V_i_write;
wire   [15:0] sort_input_U0_C_V_q_din;
wire    sort_input_U0_C_V_q_write;
wire    sort_input_U0_start_out;
wire    sort_input_U0_start_write;
wire    sort_input_U0_input_data_TREADY;
wire    play_output_U0_ap_start;
wire    play_output_U0_ap_done;
wire    play_output_U0_ap_continue;
wire    play_output_U0_ap_idle;
wire    play_output_U0_ap_ready;
wire    play_output_U0_A_V_i_read;
wire    play_output_U0_A_V_q_read;
wire    play_output_U0_C_V_i_read;
wire    play_output_U0_C_V_q_read;
wire    play_output_U0_B_V_i_read;
wire    play_output_U0_B_V_q_read;
wire   [31:0] play_output_U0_output_data_TDATA;
wire    play_output_U0_output_data_TVALID;
wire    ap_sync_continue;
wire    A_V_i_full_n;
wire   [15:0] A_V_i_dout;
wire    A_V_i_empty_n;
wire    A_V_q_full_n;
wire   [15:0] A_V_q_dout;
wire    A_V_q_empty_n;
wire    B_V_i_full_n;
wire   [15:0] B_V_i_dout;
wire    B_V_i_empty_n;
wire    B_V_q_full_n;
wire   [15:0] B_V_q_dout;
wire    B_V_q_empty_n;
wire    C_V_i_full_n;
wire   [15:0] C_V_i_dout;
wire    C_V_i_empty_n;
wire    C_V_q_full_n;
wire   [15:0] C_V_q_dout;
wire    C_V_q_empty_n;
wire   [0:0] start_for_play_output_U0_din;
wire    start_for_play_output_U0_full_n;
wire   [0:0] start_for_play_output_U0_dout;
wire    start_for_play_output_U0_empty_n;
wire    play_output_U0_start_full_n;
wire    play_output_U0_start_write;

sort_input sort_input_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(sort_input_U0_ap_start),
    .start_full_n(start_for_play_output_U0_full_n),
    .ap_done(sort_input_U0_ap_done),
    .ap_continue(sort_input_U0_ap_continue),
    .ap_idle(sort_input_U0_ap_idle),
    .ap_ready(sort_input_U0_ap_ready),
    .input_data_TVALID(input_data_TVALID),
    .A_V_i_din(sort_input_U0_A_V_i_din),
    .A_V_i_full_n(A_V_i_full_n),
    .A_V_i_write(sort_input_U0_A_V_i_write),
    .A_V_q_din(sort_input_U0_A_V_q_din),
    .A_V_q_full_n(A_V_q_full_n),
    .A_V_q_write(sort_input_U0_A_V_q_write),
    .B_V_i_din(sort_input_U0_B_V_i_din),
    .B_V_i_full_n(B_V_i_full_n),
    .B_V_i_write(sort_input_U0_B_V_i_write),
    .B_V_q_din(sort_input_U0_B_V_q_din),
    .B_V_q_full_n(B_V_q_full_n),
    .B_V_q_write(sort_input_U0_B_V_q_write),
    .C_V_i_din(sort_input_U0_C_V_i_din),
    .C_V_i_full_n(C_V_i_full_n),
    .C_V_i_write(sort_input_U0_C_V_i_write),
    .C_V_q_din(sort_input_U0_C_V_q_din),
    .C_V_q_full_n(C_V_q_full_n),
    .C_V_q_write(sort_input_U0_C_V_q_write),
    .start_out(sort_input_U0_start_out),
    .start_write(sort_input_U0_start_write),
    .input_data_TDATA(input_data_TDATA),
    .input_data_TREADY(sort_input_U0_input_data_TREADY)
);

play_output play_output_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(play_output_U0_ap_start),
    .ap_done(play_output_U0_ap_done),
    .ap_continue(play_output_U0_ap_continue),
    .ap_idle(play_output_U0_ap_idle),
    .ap_ready(play_output_U0_ap_ready),
    .A_V_i_dout(A_V_i_dout),
    .A_V_i_empty_n(A_V_i_empty_n),
    .A_V_i_read(play_output_U0_A_V_i_read),
    .A_V_q_dout(A_V_q_dout),
    .A_V_q_empty_n(A_V_q_empty_n),
    .A_V_q_read(play_output_U0_A_V_q_read),
    .C_V_i_dout(C_V_i_dout),
    .C_V_i_empty_n(C_V_i_empty_n),
    .C_V_i_read(play_output_U0_C_V_i_read),
    .C_V_q_dout(C_V_q_dout),
    .C_V_q_empty_n(C_V_q_empty_n),
    .C_V_q_read(play_output_U0_C_V_q_read),
    .B_V_i_dout(B_V_i_dout),
    .B_V_i_empty_n(B_V_i_empty_n),
    .B_V_i_read(play_output_U0_B_V_i_read),
    .B_V_q_dout(B_V_q_dout),
    .B_V_q_empty_n(B_V_q_empty_n),
    .B_V_q_read(play_output_U0_B_V_q_read),
    .output_data_TREADY(output_data_TREADY),
    .output_data_TDATA(play_output_U0_output_data_TDATA),
    .output_data_TVALID(play_output_U0_output_data_TVALID)
);

fifo_w16_d256_D A_V_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sort_input_U0_A_V_i_din),
    .if_full_n(A_V_i_full_n),
    .if_write(sort_input_U0_A_V_i_write),
    .if_dout(A_V_i_dout),
    .if_empty_n(A_V_i_empty_n),
    .if_read(play_output_U0_A_V_i_read)
);

fifo_w16_d256_D A_V_q_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sort_input_U0_A_V_q_din),
    .if_full_n(A_V_q_full_n),
    .if_write(sort_input_U0_A_V_q_write),
    .if_dout(A_V_q_dout),
    .if_empty_n(A_V_q_empty_n),
    .if_read(play_output_U0_A_V_q_read)
);

fifo_w16_d256_D B_V_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sort_input_U0_B_V_i_din),
    .if_full_n(B_V_i_full_n),
    .if_write(sort_input_U0_B_V_i_write),
    .if_dout(B_V_i_dout),
    .if_empty_n(B_V_i_empty_n),
    .if_read(play_output_U0_B_V_i_read)
);

fifo_w16_d256_D B_V_q_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sort_input_U0_B_V_q_din),
    .if_full_n(B_V_q_full_n),
    .if_write(sort_input_U0_B_V_q_write),
    .if_dout(B_V_q_dout),
    .if_empty_n(B_V_q_empty_n),
    .if_read(play_output_U0_B_V_q_read)
);

fifo_w16_d128_D C_V_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sort_input_U0_C_V_i_din),
    .if_full_n(C_V_i_full_n),
    .if_write(sort_input_U0_C_V_i_write),
    .if_dout(C_V_i_dout),
    .if_empty_n(C_V_i_empty_n),
    .if_read(play_output_U0_C_V_i_read)
);

fifo_w16_d128_D C_V_q_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sort_input_U0_C_V_q_din),
    .if_full_n(C_V_q_full_n),
    .if_write(sort_input_U0_C_V_q_write),
    .if_dout(C_V_q_dout),
    .if_empty_n(C_V_q_empty_n),
    .if_read(play_output_U0_C_V_q_read)
);

start_for_play_oubkb start_for_play_oubkb_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_play_output_U0_din),
    .if_full_n(start_for_play_output_U0_full_n),
    .if_write(sort_input_U0_start_write),
    .if_dout(start_for_play_output_U0_dout),
    .if_empty_n(start_for_play_output_U0_empty_n),
    .if_read(play_output_U0_ap_ready)
);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b0;

assign input_data_TREADY = sort_input_U0_input_data_TREADY;

assign output_data_TDATA = play_output_U0_output_data_TDATA;

assign output_data_TVALID = play_output_U0_output_data_TVALID;

assign play_output_U0_ap_continue = 1'b1;

assign play_output_U0_ap_start = start_for_play_output_U0_empty_n;

assign play_output_U0_start_full_n = 1'b1;

assign play_output_U0_start_write = 1'b0;

assign sort_input_U0_ap_continue = 1'b1;

assign sort_input_U0_ap_start = 1'b1;

assign start_for_play_output_U0_din = 1'b1;

endmodule //fir_to_fft
