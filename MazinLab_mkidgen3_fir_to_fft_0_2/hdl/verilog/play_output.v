// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module play_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        A_V_i_dout,
        A_V_i_empty_n,
        A_V_i_read,
        A_V_q_dout,
        A_V_q_empty_n,
        A_V_q_read,
        C_V_i_dout,
        C_V_i_empty_n,
        C_V_i_read,
        C_V_q_dout,
        C_V_q_empty_n,
        C_V_q_read,
        B_V_i_dout,
        B_V_i_empty_n,
        B_V_i_read,
        B_V_q_dout,
        B_V_q_empty_n,
        B_V_q_read,
        output_data_TREADY,
        output_data_TDATA,
        output_data_TVALID
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] A_V_i_dout;
input   A_V_i_empty_n;
output   A_V_i_read;
input  [15:0] A_V_q_dout;
input   A_V_q_empty_n;
output   A_V_q_read;
input  [15:0] C_V_i_dout;
input   C_V_i_empty_n;
output   C_V_i_read;
input  [15:0] C_V_q_dout;
input   C_V_q_empty_n;
output   C_V_q_read;
input  [15:0] B_V_i_dout;
input   B_V_i_empty_n;
output   B_V_i_read;
input  [15:0] B_V_q_dout;
input   B_V_q_empty_n;
output   B_V_q_read;
input   output_data_TREADY;
output  [31:0] output_data_TDATA;
output   output_data_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_V_i_read;
reg A_V_q_read;
reg C_V_i_read;
reg C_V_q_read;
reg B_V_i_read;
reg B_V_q_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln34_fu_249_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op34;
reg   [0:0] tmp_2_reg_296;
wire    io_acc_block_signal_op38;
reg   [0:0] icmp_ln45_reg_305;
reg    ap_predicate_op38_read_state4;
wire    io_acc_block_signal_op42;
reg    ap_predicate_op42_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
wire    regslice_forward_output_data_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    A_V_i_blk_n;
wire    ap_block_pp0_stage0;
reg    A_V_q_blk_n;
reg    B_V_i_blk_n;
reg    B_V_q_blk_n;
reg    C_V_i_blk_n;
reg    C_V_q_blk_n;
reg    output_data_TDATA_blk_n;
reg   [8:0] cycle_01_reg_193;
wire   [0:0] tmp_2_fu_229_p3;
wire   [8:0] cycle_fu_237_p2;
reg   [8:0] cycle_reg_300;
wire   [0:0] icmp_ln45_fu_243_p2;
reg   [0:0] icmp_ln34_reg_309;
reg   [0:0] icmp_ln34_reg_309_pp0_iter1_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg   [8:0] ap_phi_mux_cycle_01_phi_fu_197_p6;
reg   [15:0] ap_phi_mux_temp_1_1_phi_fu_210_p6;
wire   [15:0] ap_phi_reg_pp0_iter1_temp_1_1_reg_207;
reg   [15:0] ap_phi_mux_temp_0_1_phi_fu_221_p6;
wire   [15:0] ap_phi_reg_pp0_iter1_temp_0_1_reg_218;
reg    ap_block_pp0_stage0_01001;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] output_data_TDATA_int;
reg    output_data_TVALID_int;
wire    output_data_TREADY_int;
wire    regslice_forward_output_data_U_vld_out;
reg    ap_condition_117;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

regslice_forward #(
    .DataWidth( 32 ))
regslice_forward_output_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(output_data_TDATA_int),
    .vld_in(output_data_TVALID_int),
    .ack_in(output_data_TREADY_int),
    .data_out(output_data_TDATA),
    .vld_out(regslice_forward_output_data_U_vld_out),
    .ack_out(output_data_TREADY),
    .apdone_blk(regslice_forward_output_data_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln34_reg_309_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_reg_309 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cycle_01_reg_193 <= cycle_reg_300;
    end else if ((((icmp_ln34_reg_309 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        cycle_01_reg_193 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cycle_reg_300 <= cycle_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln34_reg_309 <= icmp_ln34_fu_249_p2;
        icmp_ln34_reg_309_pp0_iter1_reg <= icmp_ln34_reg_309;
        tmp_2_reg_296 <= ap_phi_mux_cycle_01_phi_fu_197_p6[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_229_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln45_reg_305 <= icmp_ln45_fu_243_p2;
    end
end

always @ (*) begin
    if (((tmp_2_reg_296 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        A_V_i_blk_n = A_V_i_empty_n;
    end else begin
        A_V_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_2_reg_296 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_V_i_read = 1'b1;
    end else begin
        A_V_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_296 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        A_V_q_blk_n = A_V_q_empty_n;
    end else begin
        A_V_q_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_2_reg_296 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_V_q_read = 1'b1;
    end else begin
        A_V_q_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op42_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_V_i_blk_n = B_V_i_empty_n;
    end else begin
        B_V_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op42_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_V_i_read = 1'b1;
    end else begin
        B_V_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op42_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_V_q_blk_n = B_V_q_empty_n;
    end else begin
        B_V_q_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op42_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_V_q_read = 1'b1;
    end else begin
        B_V_q_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        C_V_i_blk_n = C_V_i_empty_n;
    end else begin
        C_V_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        C_V_i_read = 1'b1;
    end else begin
        C_V_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        C_V_q_blk_n = C_V_q_empty_n;
    end else begin
        C_V_q_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        C_V_q_read = 1'b1;
    end else begin
        C_V_q_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_309_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_117)) begin
        if ((icmp_ln34_reg_309 == 1'd1)) begin
            ap_phi_mux_cycle_01_phi_fu_197_p6 = 9'd0;
        end else if ((icmp_ln34_reg_309 == 1'd0)) begin
            ap_phi_mux_cycle_01_phi_fu_197_p6 = cycle_reg_300;
        end else begin
            ap_phi_mux_cycle_01_phi_fu_197_p6 = cycle_01_reg_193;
        end
    end else begin
        ap_phi_mux_cycle_01_phi_fu_197_p6 = cycle_01_reg_193;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_305 == 1'd0) & (tmp_2_reg_296 == 1'd1))) begin
        ap_phi_mux_temp_0_1_phi_fu_221_p6 = C_V_i_dout;
    end else if (((icmp_ln45_reg_305 == 1'd1) & (tmp_2_reg_296 == 1'd1))) begin
        ap_phi_mux_temp_0_1_phi_fu_221_p6 = B_V_i_dout;
    end else if ((tmp_2_reg_296 == 1'd0)) begin
        ap_phi_mux_temp_0_1_phi_fu_221_p6 = A_V_i_dout;
    end else begin
        ap_phi_mux_temp_0_1_phi_fu_221_p6 = ap_phi_reg_pp0_iter1_temp_0_1_reg_218;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_305 == 1'd0) & (tmp_2_reg_296 == 1'd1))) begin
        ap_phi_mux_temp_1_1_phi_fu_210_p6 = C_V_q_dout;
    end else if (((icmp_ln45_reg_305 == 1'd1) & (tmp_2_reg_296 == 1'd1))) begin
        ap_phi_mux_temp_1_1_phi_fu_210_p6 = B_V_q_dout;
    end else if ((tmp_2_reg_296 == 1'd0)) begin
        ap_phi_mux_temp_1_1_phi_fu_210_p6 = A_V_q_dout;
    end else begin
        ap_phi_mux_temp_1_1_phi_fu_210_p6 = ap_phi_reg_pp0_iter1_temp_1_1_reg_207;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_249_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_data_TDATA_blk_n = output_data_TREADY_int;
    end else begin
        output_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_data_TVALID_int = 1'b1;
    end else begin
        output_data_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (regslice_forward_output_data_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op42 == 1'b0) & (ap_predicate_op42_read_state4 == 1'b1)) | ((io_acc_block_signal_op38 == 1'b0) & (ap_predicate_op38_read_state4 == 1'b1)) | ((tmp_2_reg_296 == 1'd0) & (io_acc_block_signal_op34 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((output_data_TREADY_int == 1'b0) | (regslice_forward_output_data_U_apdone_blk == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((output_data_TREADY_int == 1'b0) | ((io_acc_block_signal_op42 == 1'b0) & (ap_predicate_op42_read_state4 == 1'b1)) | ((io_acc_block_signal_op38 == 1'b0) & (ap_predicate_op38_read_state4 == 1'b1)) | ((tmp_2_reg_296 == 1'd0) & (io_acc_block_signal_op34 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((output_data_TREADY_int == 1'b0) | (regslice_forward_output_data_U_apdone_blk == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((output_data_TREADY_int == 1'b0) | ((io_acc_block_signal_op42 == 1'b0) & (ap_predicate_op42_read_state4 == 1'b1)) | ((io_acc_block_signal_op38 == 1'b0) & (ap_predicate_op38_read_state4 == 1'b1)) | ((tmp_2_reg_296 == 1'd0) & (io_acc_block_signal_op34 == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (regslice_forward_output_data_U_apdone_blk == 1'b1);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((io_acc_block_signal_op42 == 1'b0) & (ap_predicate_op42_read_state4 == 1'b1)) | ((io_acc_block_signal_op38 == 1'b0) & (ap_predicate_op38_read_state4 == 1'b1)) | ((tmp_2_reg_296 == 1'd0) & (io_acc_block_signal_op34 == 1'b0)));
end

always @ (*) begin
    ap_condition_117 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter1_temp_0_1_reg_218 = 'bx;

assign ap_phi_reg_pp0_iter1_temp_1_1_reg_207 = 'bx;

always @ (*) begin
    ap_predicate_op38_read_state4 = ((icmp_ln45_reg_305 == 1'd0) & (tmp_2_reg_296 == 1'd1));
end

always @ (*) begin
    ap_predicate_op42_read_state4 = ((icmp_ln45_reg_305 == 1'd1) & (tmp_2_reg_296 == 1'd1));
end

assign cycle_fu_237_p2 = (ap_phi_mux_cycle_01_phi_fu_197_p6 + 9'd1);

assign icmp_ln34_fu_249_p2 = ((ap_phi_mux_cycle_01_phi_fu_197_p6 == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_243_p2 = ((ap_phi_mux_cycle_01_phi_fu_197_p6 > 9'd383) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op34 = (A_V_q_empty_n & A_V_i_empty_n);

assign io_acc_block_signal_op38 = (C_V_q_empty_n & C_V_i_empty_n);

assign io_acc_block_signal_op42 = (B_V_q_empty_n & B_V_i_empty_n);

assign output_data_TDATA_int = {{ap_phi_mux_temp_1_1_phi_fu_210_p6}, {ap_phi_mux_temp_0_1_phi_fu_221_p6}};

assign output_data_TVALID = regslice_forward_output_data_U_vld_out;

assign tmp_2_fu_229_p3 = ap_phi_mux_cycle_01_phi_fu_197_p6[32'd8];

endmodule //play_output
