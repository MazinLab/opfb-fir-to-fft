-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_to_fft is
port (
    input_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    output_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_data_TVALID : IN STD_LOGIC;
    input_data_TREADY : OUT STD_LOGIC;
    output_data_TVALID : OUT STD_LOGIC;
    output_data_TREADY : IN STD_LOGIC );
end;


architecture behav of fir_to_fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_to_fft,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.351750,HLS_SYN_LAT=514,HLS_SYN_TPT=512,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=419,HLS_SYN_LUT=975,HLS_VERSION=2019_2_1}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal sort_input_U0_ap_start : STD_LOGIC;
    signal sort_input_U0_ap_done : STD_LOGIC;
    signal sort_input_U0_ap_continue : STD_LOGIC;
    signal sort_input_U0_ap_idle : STD_LOGIC;
    signal sort_input_U0_ap_ready : STD_LOGIC;
    signal sort_input_U0_A_V_i_din : STD_LOGIC_VECTOR (15 downto 0);
    signal sort_input_U0_A_V_i_write : STD_LOGIC;
    signal sort_input_U0_A_V_q_din : STD_LOGIC_VECTOR (15 downto 0);
    signal sort_input_U0_A_V_q_write : STD_LOGIC;
    signal sort_input_U0_B_V_i_din : STD_LOGIC_VECTOR (15 downto 0);
    signal sort_input_U0_B_V_i_write : STD_LOGIC;
    signal sort_input_U0_B_V_q_din : STD_LOGIC_VECTOR (15 downto 0);
    signal sort_input_U0_B_V_q_write : STD_LOGIC;
    signal sort_input_U0_C_V_i_din : STD_LOGIC_VECTOR (15 downto 0);
    signal sort_input_U0_C_V_i_write : STD_LOGIC;
    signal sort_input_U0_C_V_q_din : STD_LOGIC_VECTOR (15 downto 0);
    signal sort_input_U0_C_V_q_write : STD_LOGIC;
    signal sort_input_U0_start_out : STD_LOGIC;
    signal sort_input_U0_start_write : STD_LOGIC;
    signal sort_input_U0_input_data_TREADY : STD_LOGIC;
    signal play_output_U0_ap_start : STD_LOGIC;
    signal play_output_U0_ap_done : STD_LOGIC;
    signal play_output_U0_ap_continue : STD_LOGIC;
    signal play_output_U0_ap_idle : STD_LOGIC;
    signal play_output_U0_ap_ready : STD_LOGIC;
    signal play_output_U0_A_V_i_read : STD_LOGIC;
    signal play_output_U0_A_V_q_read : STD_LOGIC;
    signal play_output_U0_C_V_i_read : STD_LOGIC;
    signal play_output_U0_C_V_q_read : STD_LOGIC;
    signal play_output_U0_B_V_i_read : STD_LOGIC;
    signal play_output_U0_B_V_q_read : STD_LOGIC;
    signal play_output_U0_output_data_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal play_output_U0_output_data_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal A_V_i_full_n : STD_LOGIC;
    signal A_V_i_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal A_V_i_empty_n : STD_LOGIC;
    signal A_V_q_full_n : STD_LOGIC;
    signal A_V_q_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal A_V_q_empty_n : STD_LOGIC;
    signal B_V_i_full_n : STD_LOGIC;
    signal B_V_i_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal B_V_i_empty_n : STD_LOGIC;
    signal B_V_q_full_n : STD_LOGIC;
    signal B_V_q_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal B_V_q_empty_n : STD_LOGIC;
    signal C_V_i_full_n : STD_LOGIC;
    signal C_V_i_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal C_V_i_empty_n : STD_LOGIC;
    signal C_V_q_full_n : STD_LOGIC;
    signal C_V_q_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal C_V_q_empty_n : STD_LOGIC;
    signal start_for_play_output_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_play_output_U0_full_n : STD_LOGIC;
    signal start_for_play_output_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_play_output_U0_empty_n : STD_LOGIC;
    signal play_output_U0_start_full_n : STD_LOGIC;
    signal play_output_U0_start_write : STD_LOGIC;

    component sort_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_data_TVALID : IN STD_LOGIC;
        A_V_i_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_V_i_full_n : IN STD_LOGIC;
        A_V_i_write : OUT STD_LOGIC;
        A_V_q_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_V_q_full_n : IN STD_LOGIC;
        A_V_q_write : OUT STD_LOGIC;
        B_V_i_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_V_i_full_n : IN STD_LOGIC;
        B_V_i_write : OUT STD_LOGIC;
        B_V_q_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        B_V_q_full_n : IN STD_LOGIC;
        B_V_q_write : OUT STD_LOGIC;
        C_V_i_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_V_i_full_n : IN STD_LOGIC;
        C_V_i_write : OUT STD_LOGIC;
        C_V_q_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        C_V_q_full_n : IN STD_LOGIC;
        C_V_q_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        input_data_TREADY : OUT STD_LOGIC );
    end component;


    component play_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_V_i_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        A_V_i_empty_n : IN STD_LOGIC;
        A_V_i_read : OUT STD_LOGIC;
        A_V_q_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        A_V_q_empty_n : IN STD_LOGIC;
        A_V_q_read : OUT STD_LOGIC;
        C_V_i_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        C_V_i_empty_n : IN STD_LOGIC;
        C_V_i_read : OUT STD_LOGIC;
        C_V_q_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        C_V_q_empty_n : IN STD_LOGIC;
        C_V_q_read : OUT STD_LOGIC;
        B_V_i_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        B_V_i_empty_n : IN STD_LOGIC;
        B_V_i_read : OUT STD_LOGIC;
        B_V_q_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        B_V_q_empty_n : IN STD_LOGIC;
        B_V_q_read : OUT STD_LOGIC;
        output_data_TREADY : IN STD_LOGIC;
        output_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_data_TVALID : OUT STD_LOGIC );
    end component;


    component fifo_w16_d256_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d128_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_play_oubkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    sort_input_U0 : component sort_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sort_input_U0_ap_start,
        start_full_n => start_for_play_output_U0_full_n,
        ap_done => sort_input_U0_ap_done,
        ap_continue => sort_input_U0_ap_continue,
        ap_idle => sort_input_U0_ap_idle,
        ap_ready => sort_input_U0_ap_ready,
        input_data_TVALID => input_data_TVALID,
        A_V_i_din => sort_input_U0_A_V_i_din,
        A_V_i_full_n => A_V_i_full_n,
        A_V_i_write => sort_input_U0_A_V_i_write,
        A_V_q_din => sort_input_U0_A_V_q_din,
        A_V_q_full_n => A_V_q_full_n,
        A_V_q_write => sort_input_U0_A_V_q_write,
        B_V_i_din => sort_input_U0_B_V_i_din,
        B_V_i_full_n => B_V_i_full_n,
        B_V_i_write => sort_input_U0_B_V_i_write,
        B_V_q_din => sort_input_U0_B_V_q_din,
        B_V_q_full_n => B_V_q_full_n,
        B_V_q_write => sort_input_U0_B_V_q_write,
        C_V_i_din => sort_input_U0_C_V_i_din,
        C_V_i_full_n => C_V_i_full_n,
        C_V_i_write => sort_input_U0_C_V_i_write,
        C_V_q_din => sort_input_U0_C_V_q_din,
        C_V_q_full_n => C_V_q_full_n,
        C_V_q_write => sort_input_U0_C_V_q_write,
        start_out => sort_input_U0_start_out,
        start_write => sort_input_U0_start_write,
        input_data_TDATA => input_data_TDATA,
        input_data_TREADY => sort_input_U0_input_data_TREADY);

    play_output_U0 : component play_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => play_output_U0_ap_start,
        ap_done => play_output_U0_ap_done,
        ap_continue => play_output_U0_ap_continue,
        ap_idle => play_output_U0_ap_idle,
        ap_ready => play_output_U0_ap_ready,
        A_V_i_dout => A_V_i_dout,
        A_V_i_empty_n => A_V_i_empty_n,
        A_V_i_read => play_output_U0_A_V_i_read,
        A_V_q_dout => A_V_q_dout,
        A_V_q_empty_n => A_V_q_empty_n,
        A_V_q_read => play_output_U0_A_V_q_read,
        C_V_i_dout => C_V_i_dout,
        C_V_i_empty_n => C_V_i_empty_n,
        C_V_i_read => play_output_U0_C_V_i_read,
        C_V_q_dout => C_V_q_dout,
        C_V_q_empty_n => C_V_q_empty_n,
        C_V_q_read => play_output_U0_C_V_q_read,
        B_V_i_dout => B_V_i_dout,
        B_V_i_empty_n => B_V_i_empty_n,
        B_V_i_read => play_output_U0_B_V_i_read,
        B_V_q_dout => B_V_q_dout,
        B_V_q_empty_n => B_V_q_empty_n,
        B_V_q_read => play_output_U0_B_V_q_read,
        output_data_TREADY => output_data_TREADY,
        output_data_TDATA => play_output_U0_output_data_TDATA,
        output_data_TVALID => play_output_U0_output_data_TVALID);

    A_V_i_U : component fifo_w16_d256_D
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sort_input_U0_A_V_i_din,
        if_full_n => A_V_i_full_n,
        if_write => sort_input_U0_A_V_i_write,
        if_dout => A_V_i_dout,
        if_empty_n => A_V_i_empty_n,
        if_read => play_output_U0_A_V_i_read);

    A_V_q_U : component fifo_w16_d256_D
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sort_input_U0_A_V_q_din,
        if_full_n => A_V_q_full_n,
        if_write => sort_input_U0_A_V_q_write,
        if_dout => A_V_q_dout,
        if_empty_n => A_V_q_empty_n,
        if_read => play_output_U0_A_V_q_read);

    B_V_i_U : component fifo_w16_d256_D
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sort_input_U0_B_V_i_din,
        if_full_n => B_V_i_full_n,
        if_write => sort_input_U0_B_V_i_write,
        if_dout => B_V_i_dout,
        if_empty_n => B_V_i_empty_n,
        if_read => play_output_U0_B_V_i_read);

    B_V_q_U : component fifo_w16_d256_D
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sort_input_U0_B_V_q_din,
        if_full_n => B_V_q_full_n,
        if_write => sort_input_U0_B_V_q_write,
        if_dout => B_V_q_dout,
        if_empty_n => B_V_q_empty_n,
        if_read => play_output_U0_B_V_q_read);

    C_V_i_U : component fifo_w16_d128_D
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sort_input_U0_C_V_i_din,
        if_full_n => C_V_i_full_n,
        if_write => sort_input_U0_C_V_i_write,
        if_dout => C_V_i_dout,
        if_empty_n => C_V_i_empty_n,
        if_read => play_output_U0_C_V_i_read);

    C_V_q_U : component fifo_w16_d128_D
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sort_input_U0_C_V_q_din,
        if_full_n => C_V_q_full_n,
        if_write => sort_input_U0_C_V_q_write,
        if_dout => C_V_q_dout,
        if_empty_n => C_V_q_empty_n,
        if_read => play_output_U0_C_V_q_read);

    start_for_play_oubkb_U : component start_for_play_oubkb
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_play_output_U0_din,
        if_full_n => start_for_play_output_U0_full_n,
        if_write => sort_input_U0_start_write,
        if_dout => start_for_play_output_U0_dout,
        if_empty_n => start_for_play_output_U0_empty_n,
        if_read => play_output_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    input_data_TREADY <= sort_input_U0_input_data_TREADY;
    output_data_TDATA <= play_output_U0_output_data_TDATA;
    output_data_TVALID <= play_output_U0_output_data_TVALID;
    play_output_U0_ap_continue <= ap_const_logic_1;
    play_output_U0_ap_start <= start_for_play_output_U0_empty_n;
    play_output_U0_start_full_n <= ap_const_logic_1;
    play_output_U0_start_write <= ap_const_logic_0;
    sort_input_U0_ap_continue <= ap_const_logic_1;
    sort_input_U0_ap_start <= ap_const_logic_1;
    start_for_play_output_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
